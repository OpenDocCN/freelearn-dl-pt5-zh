["```py\nimport pandas as pd, numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n```", "```py\ninp0 = pd.read_csv('AAPL.csv')\ninp0.head()\n```", "```py\ninp0.tail()\n```", "```py\n    import pandas as pd, numpy as np\n    import matplotlib.pyplot as plt\n    %matplotlib inline\n    ```", "```py\n    inp0 = pd.read_csv('AAPL.csv')\n    ```", "```py\n    inp0.plot(\"Date\", \"Close\")\n    plt.show()\n    ```", "```py\n    inp0 = inp0.sort_index(ascending=False)\n    inp0.plot(\"Date\", \"Close\")\n    plt.show()\n    ```", "```py\n    ts_data = inp0.Close.values.reshape(-1,1)\n    ```", "```py\n    plt.figure(figsize=[14,5])\n    plt.plot(ts_data)\n    plt.show()\n    ```", "```py\n    import numpy as np\n    import tensorflow as tf\n    np.random.seed(0)\n    tf.random.set_seed(0)\n    ```", "```py\n    num_inputs = 2\n    num_neurons = 3\n    ```", "```py\n    Wf = tf.Variable(tf.random.normal\\\n                    (shape=[num_inputs, num_neurons]))\n    Wr = tf.Variable(tf.random.normal\\\n                    (shape=[num_neurons, num_neurons]))\n    ```", "```py\n    b = tf.Variable(tf.zeros([1,num_neurons]))\n    ```", "```py\n    xt0_batch = np.array([[0,1],[2,3],[4,5]]).astype(np.float32)\n    xt1_batch = np.array([[100, 101],[102, 103],\\\n                          [104,105]]).astype(np.float32)\n    ```", "```py\n    def forward_pass(xt0, xt1):\n        yt0 = tf.tanh(tf.matmul(xt0, Wf) + b)\n        yt1 = tf.tanh(tf.matmul(yt0, Wr) + tf.matmul(xt1, Wf) + b)\n        return yt0, yt1\n    ```", "```py\n    yt0_output, yt1_output = forward_pass(xt0_batch, xt1_batch)\n    ```", "```py\n    tf.print(yt0_output)\n    ```", "```py\n    [[-0.776318431 -0.844548464 0.438419849]\n     [-0.0857750699 -0.993522227 0.516408086]\n     [0.698345721 -0.999749422 0.586677969]]\n    ```", "```py\n    tf.print(yt1_output)\n    ```", "```py\n     [[1 -1 0.999998629]\n     [1 -1 0.999998331]\n     [1 -1 0.999997377]]\n    ```", "```py\ntrain_recs = int(len(ts_data) * 0.75)\n```", "```py\ntrain_data = ts_data[:train_recs]\ntest_data = ts_data[train_recs:]\nlen(train_data), len(test_data)\n```", "```py\n(1885, 629)\n```", "```py\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ntrain_scaled = scaler.fit_transform(train_data)\ntest_scaled = scaler.transform(test_data)\n```", "```py\ndef get_lookback(inp, look_back):\n    y = pd.DataFrame(inp)\n    dataX = [y.shift(i) for i in range(1, look_back+1)]\n    dataX = pd.concat(dataX, axis=1)\n    dataX.fillna(0, inplace = True)\n    return dataX.values, y.values\n```", "```py\nlook_back = 10\ntrainX, trainY = get_lookback(train_scaled, look_back=look_back)\ntestX, testY = get_lookback(test_scaled, look_back= look_back)\n```", "```py\ntrainX.shape, testX.shape\n```", "```py\n((1885, 10), (629, 10))\n```", "```py\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers \\\nimport SimpleRNN, Activation, Dropout, Dense, Reshape\n```", "```py\n    from tensorflow.keras.models import Sequential\n    from tensorflow.keras.layers \\\n    import SimpleRNN, Activation, Dropout, Dense, Reshape\n    ```", "```py\n    model = Sequential()\n    ```", "```py\n    model.add(Reshape((look_back,1), input_shape = (look_back,)))\n    ```", "```py\n    model.add(SimpleRNN(32, input_shape=(look_back, 1)))\n    ```", "```py\n    model.add(Dense(1))\n    ```", "```py\n    model.add(Activation('linear'))\n    ```", "```py\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    ```", "```py\n    model.summary()\n    ```", "```py\nmodel.fit(trainX, trainY, epochs=3, batch_size=1, \\\n          verbose=2, validation_split=0.1)\n```", "```py\nimport math\ndef get_model_perf(model_obj):\n    score_train = model_obj.evaluate(trainX, trainY, verbose=0)\n    print('Train RMSE: %.2f RMSE' % (math.sqrt(score_train)))\n    score_test = model_obj.evaluate(testX, testY, verbose=0)\n    print('Test RMSE: %.2f RMSE' % (math.sqrt(score_test)))\n```", "```py\nget_model_perf(model)\n```", "```py\nTrain RMSE: 0.02 RMSE\nTest RMSE: 0.03 RMSE\n```", "```py\ndef plot_pred(model_obj):\n    testPredict = \\\n    scaler.inverse_transform(model_obj.predict(testX))\n    pred_test_plot = ts_data.copy()\n    pred_test_plot[:train_recs+look_back,:] = np.nan\n    pred_test_plot[train_recs+look_back:,:] = \\\n    testPredict[look_back:]\n    plt.plot(ts_data)\n    plt.plot(pred_test_plot, \"--\")\n```", "```py\n%matplotlib inline\nplt.figure(figsize=[10,5])\nplot_pred(model)\n```", "```py\n%matplotlib notebook\nplot_pred(model)\n```", "```py\n    from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten\n    ```", "```py\n    model_conv = Sequential()\n    model_conv.add(Reshape((look_back,1), \\\n                   input_shape = (look_back,)))\n    ```", "```py\n    model_conv.add(Conv1D(5, 5, activation='relu'))\n    ```", "```py\n    model_conv.add(MaxPooling1D(5))\n    ```", "```py\n    model_conv.add(Flatten())\n    ```", "```py\n    model_conv.add(Dense(1))\n    model_conv.add(Activation('linear'))\n    ```", "```py\n    model_conv.summary()\n    ```", "```py\n    model_conv.compile(loss='mean_squared_error', optimizer='adam')\n    model_conv.fit(trainX, trainY, epochs=5, \\\n                   batch_size=1, verbose=2, validation_split=0.1)\n    ```", "```py\n    get_model_perf(model_conv)\n    ```", "```py\n    Train RMSE: 0.04 RMSE\n    Test RMSE: 0.05 RMSE\n    ```", "```py\n    %matplotlib inline\n    plt.figure(figsize=[10,5])\n    plot_pred(model_conv)\n    ```", "```py\n    %matplotlib notebook\n    plot_pred(model_conv)\n    ```", "```py\n    model_comb = Sequential()\n    model_comb.add(Reshape((look_back,1), \\\n                            input_shape = (look_back,)))\n    model_comb.add(Conv1D(5, 3, activation='relu'))\n    ```", "```py\n    model_comb.add(SimpleRNN(32))\n    model_comb.add(Dense(1))\n    model_comb.add(Activation('linear'))\n    ```", "```py\n    model_comb.summary()\n    ```", "```py\n    model_comb.compile(loss='mean_squared_error', optimizer='adam')\n    model_comb.fit(trainX, trainY, epochs=3, \\\n                   batch_size=1, verbose=2, validation_split=0.1)\n    ```", "```py\n    get_model_perf(model_comb)\n    ```", "```py\n    Train RMSE: 0.02 RMSE\n    Test RMSE: 0.03 RMSE\n    ```", "```py\n    %matplotlib notebook\n    plot_pred(model_comb)\n    ```"]