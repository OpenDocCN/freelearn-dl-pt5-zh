["```py\n$ apt-get install python3-pip jupyter-notebook\n```", "```py\n    !pip3 install autokeras\n    ```", "```py\n    import autokeras as ak\n    import matplotlib.pyplot as plt\n    from tensorflow.keras.datasets import cifar10\n    ```", "```py\n    (x_train, y_train), (x_test, y_test) = cifar10.load_data()\n    print(x_train.shape)\n    print(x_test.shape)\n    ```", "```py\n    Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n    170500096/170498071 [==============================] - 11s 0us/step\n    (50000, 32, 32, 3)\n    (10000, 32, 32, 3)\n    ```", "```py\nimport numpy as np \ntrain_histogram = np.histogram(y_train)\ntest_histogram = np.histogram(y_test)\n_, axs = plt.subplots(1, 2)\naxs[0].set_xticks(range(10))\naxs[0].bar(range(10), train_histogram[0])\naxs[1].set_xticks(range(10))\naxs[1].bar(range(10), test_histogram[0])\nplt.show()\n```", "```py\nclf = ak.ImageClassifier(max_trials=2)\n```", "```py\nclf.fit(x_train, y_train)\n```", "```py\ninput_node = ak.ImageInput()\noutput_node = ak.ImageBlock(\n             block_type=\"efficient\",\n             augment=False)(input_node)\noutput_node = ak.ClassificationHead()(output_node)\nclf = ak.AutoModel(inputs=input_node, outputs=output_node, max_trials=2)\nclf.fit(x_train, y_train)\n```", "```py\nmetrics = clf.evaluate(x_test, y_test)\nprint(metrics)\n```", "```py\n313/313 [==============================] - 34s 104ms/step - loss: 0.5260 - accuracy: 0.8445\n[0.525996744632721, 0.8445000052452087]\n```", "```py\nimport matplotlib.pyplot as plt\nlabelNames = [\"airplane\", \"automobile\", \"bird\", \"cat\", \"deer\", \"dog\", \"frog\", \"horse\", \"ship\", \"truck\"]\nfig = plt.figure(figsize=[18,6])\nfor i in range(len(predicted_y)):\n    ax = fig.add_subplot(2, 5, i+1)\n    ax.set_axis_off()\n    ax.set_title('Prediced: %s, Real: %s' % (labelNames[int(predicted_y[i])],labelNames[int(y_test[i])]))\n    img = x_test[i]\n    ax.imshow(img)\nplt.show()\n```", "```py\nmodel = clf.export_model()\nmodel.summary()\n```", "```py\n    !pip3 install autokeras\n    ```", "```py\n    import autokeras as ak\n    import matplotlib.pyplot as plt\n    ```", "```py\n    !wget -nc https://data.vision.ee.ethz.ch/cvl/rrothe/imdb-wiki/static/imdb_crop.tar\n    !tar --no-overwrite-dir -xf imdb_crop.tar\n    ```", "```py\n    Resolving data.vision.ee.ethz.ch (data.vision.ee.ethz.ch)... 129.132.52.162\n    Connecting to data.vision.ee.ethz.ch (data.vision.ee.ethz.ch)|129.132.52.162|:443... connected.\n    HTTP request sent, awaiting response... 200 OK\n    Length: 7012157440 (6.5G) [application/x-tar]\n    Saving to: 'imdb_crop.tar'\n    imdb_crop.tar       100%[===================>]   6.53G  27.7MB/s    in 3m 59s  \n    2020-12-20 00:05:48 (28.0 MB/s) - 'imdb_crop.tar' saved [7012157440/7012157440]\n    ```", "```py\ndf = imdb_meta_to_df(\"imdb_crop/imdb.mat\")\n```", "```py\ntrain_set = df.sample(10000)\ntest_set = df.sample(1000)\n```", "```py\ntrain_imgs, train_ages = normalize_dataset(train_set)\ntest_imgs, test_ages = normalize_dataset(test_set)\n```", "```py\nreg = ak.ImageRegressor(max_trials=10)\n```", "```py\nreg.fit(train_imgs, train_ages)\n```", "```py\ninput_node = ak.ImageInput()\noutput_node = ak.Normalization()(input_node)\noutput_node = ak.ImageAugmentation()(output_node)\noutput_node = ak.ImageBlock(block_type=\"efficient\")(input_node)\noutput_node = ak.RegressionHead()(output_node)\nreg = ak.AutoModel(inputs=input_node, outputs=output_node, max_trials=20)\nreg.fit(train_imgs, train_ages)\n```", "```py\nprint(reg.evaluate(test_imgs, test_ages))\n```", "```py\n32/32 [==============================] - 2s 51ms/step - loss: 165.3358 - mean_squared_error: 165.3358\n[165.33575439453125, 165.33575439453125]\n```", "```py\nfig = plt.figure(figsize=[20,100])\nfor i, v in enumerate(predicted_y[0:80]):\n    ax = fig.add_subplot(20, 5, i+1)\n    ax.set_axis_off()\n    ax.set_title('Prediced: %s, Real: %s' % (predicted_y[i][0], test_ages[i]))\n    img = test_imgs[i]\n    ax.imshow(img)\nplt.show()\n```", "```py\nmodel = clf.export_model()\nmodel.summary()\n```"]