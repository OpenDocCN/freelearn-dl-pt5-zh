["```py\nalexnet = gcv.model_zoo.get_model(\"resnet152_v2\", pretrained=True, ctx=ctx)\n```", "```py\nresnet152.features(summary_image.as_in_context(ctx))\n```", "```py\n[[2.5350871e-04 2.8519407e-01 1.6196619e-03 ... 7.2884483e-05\n  2.9618644e-07 7.8995163e-03]]\n <NDArray 1x2048 @gpu(0)>\n```", "```py\n('accuracy', 0.75)\n```", "```py\n# Qualitative Evaluation\n# Qualitative Evaluation\n# Expected Output\nprint(\"Expected Output:\", example_label)\n# Model Output\nexample_output = resnet50_ft(example_image_preprocessed)\n class_output = np.argmax(example_output, axis=1).asnumpy()[0]\n print(\"Class Output:\", class_output)\nassert class_output == 0 # Cat 0\n```", "```py\nExpected Output: 0\nClass Output: 0\n```", "```py\n# ResNet50 from Model Zoo (This downloads v1d)\n resnet50 = gcv.model_zoo.get_model(\"resnet50_v1d\", pretrained=True, ctx=ctx)\n```", "```py\n('accuracy', 0.925)\n```", "```py\n# Qualitative Evaluation\n# Expected Output\nprint(\"Expected Output:\", example_label)\n# Model Output\nexample_output = resnet50(example_image_preprocessed)\nclass_output = model.CLASSES_DICT[np.argmax(example_output, axis=1).asnumpy()[0]]\nprint(\"Class Output:\", class_output)\nassert class_output == 0 # Cat\n```", "```py\nExpected Output: 0\nClass Output: 0\n```", "```py\n# Replace the classifier (with gradients activated)\n resnet50_tl.fc = mx.gluon.nn.Dense(2)\n resnet50_tl.fc.initialize(ctx=ctx)\n```", "```py\nfor param in resnet50_tl.collect_params().values():\nparam.grad_req = 'null'\n```", "```py\n# Replace the classifier (with gradients activated)\n resnet50_tl.fc = mx.gluon.nn.Dense(2)\n resnet50_tl.fc.initialize(ctx=ctx)\n```", "```py\n('accuracy', 0.985)\n```", "```py\nExpected Output: 0\nClass Output: 0\n```", "```py\n# Un-freeze weights\nfor param in resnet50_ft.collect_params().values():\n    if param.name in updated_params:\n        param.grad_req = 'write'\n```", "```py\n('accuracy', 0.90255)\n```", "```py\n Expected Output: 0\nClass Output: 0\n```", "```py\n# ResNet50 from Model Zoo (This downloads v1d)\n resnet50 = gcv.model_zoo.get_model(\"resnet50_v1d\", pretrained=True, ctx=ctx)\n```", "```py\n('accuracy', 0.98)\n```", "```py\nExpected Output: 0\nClass Output: 0\n```", "```py\nPixAcc:  0.8454046875\nmIoU  :  0.6548404063890942\n```", "```py\n# Compute and plot prediction\ntransformed_image = gcv.data.transforms.presets.segmentation.test_transform(test_image, ctx)\n output = deeplab_ts(transformed_image)\n filtered_output = mx.nd.argmax(output[0], 1)\n masked_output = gcv.utils.viz.plot_mask(test_image, filtered_output)\n axes = fig.add_subplot(1, 2, 2)\n axes.set_title(\"Prediction\", fontsize=16, y=-0.3)\n axes.axis('off')\n axes.imshow(masked_output);\n```", "```py\n# DeepLab-v3 from Model Zoo\ndeeplab_pt\ngcv.model_zoo.get_model('deeplab_resnet101_coco'\npretrained=True, ctx=ctx)\n```", "```py\nPixAcc:  0.9640322916666667\nmIoU  :  0.476540873665686\n```", "```py\nfor param in deeplab_tl.collect_params().values():\nparam.grad_req = 'null'\n```", "```py\n# Replace the last layers\ndeeplab_tl.head = gcv.model_zoo.deeplabv3._DeepLabHead(2)\ndeeplab_tl.head.initialize(ctx=ctx)\ndeeplab_tl.head.collect_params().setattr('lr_mult', 10)\n```", "```py\nPixAcc:  0.9503427083333333\nmIoU  :  0.8799470898171042\n```", "```py\nfor param in deeplab_ft.collect_params().values():\nparam.grad_req = 'write'\n```", "```py\nPixAcc:  0.9637550347222222\nmIoU  :  0.9091450223893902\n```", "```py\n# DeepLab-v3 from Model Zoo\n deeplab_ft_direct = gcv.model_zoo.get_model(\"deeplab_resnet101_coco\", pretrained=True, ctx=ctx)\n```", "```py\nPixAcc:  0.9639182291666667\nmIoU  :  0.9095065032946663\n```", "```py\n# WMT2016 Dataset (Train, Validation and Test)\n# Dataset Parameters\nsrc_lang, tgt_lang = \"en\", \"de\"\nsrc_max_len, tgt_max_len = 50, 50\n wmt2016_train_data = nlp.data.WMT2016BPE(\n    'train',\n src_lang=src_lang,\n    tgt_lang=tgt_lang)\nwmt2016_val_data = nlp.data.WMT2016BPE(\n    'newstest2016',\n    src_lang=src_lang,\n    tgt_lang=tgt_lang)\nwmt2016_test_data = nlp.data.WMT2016BPE(\n    'newstest2016',\n    src_lang=src_lang,\n    tgt_lang=tgt_lang)\n```", "```py\n # Split Val / Test sets\nval_length = 1500\ntest_length = len(wmt2016_test_text) - val_length\nwmt2016_val_data._data[0] = wmt2016_val_data._data[0][:val_length]\n wmt2016_val_data._data[1] = wmt2016_val_data._data[1][:val_length]\n wmt2016_val_data._length = val_length\nwmt2016_val_text._data[0] = wmt2016_val_text._data[0][:val_length]\n wmt2016_val_text._data[1] = wmt2016_val_text._data[1][:val_length]\n wmt2016_val_text._length = val_length\nwmt2016_test_data._data[0] = wmt2016_test_data._data[0][-test_length:]\n wmt2016_test_data._data[1] = wmt2016_test_data._data[1][-test_length:]\n wmt2016_test_data._length = test_length\n```", "```py\n Length of train set: 4500966\nLength of val set  : 1500\nLength of test set : 1499\n```", "```py\n WMT16 test loss: 3.01; test bleu score: 14.50\n```", "```py\nprint(\"Qualitative Evaluation:  Translating from English to German\")\n# From Google Translate\nexpected_tgt_seq = \" Ich lerne jeden Tag neue Dinge.\"\n print(\"Expected translation:\")\n print(expected_tgt_seq)\nsrc_seq = \"I learn new things every day.\"\n print(\"In English:\")\n print(src_seq)\ntranslation_out = nmt.utils.translate(\n     transformer_ts_translator,\n    src_seq,\n     wmt_src_vocab,\n    wmt_tgt_vocab,\n    ctx)\nprint(\"The German translation is:\")\n print(\" \".join(translation_out[0]))\n```", "```py\nQualitative Evaluation: Translating from English to German\nExpected translation:\n Ich lerne jeden Tag neue Dinge.\n In English:\n I learn new things every day.\n The German translation is:\n Ich halte es für so , dass es hier so ist.\n```", "```py\n wmt_model_name = 'transformer_en_de_512'\nwmt_transformer_model_pt, wmt_src_vocab, wmt_tgt_vocab = nlp.model.get_model(\n    wmt_model_name,\n    dataset_name='WMT2014',\n    pretrained=True,\n    ctx=ctx)\nprint('Source Vocab:', len(wmt_src_vocab), ', Target Vocab:', len(wmt_tgt_vocab))\n```", "```py\nSource Vocab: 36794 , Target Vocab: 36794\n```", "```py\n WMT16 test loss: 1.59; test bleu score: 29.76\n```", "```py\n Qualitative Evaluation: Translating from English to German\nExpected translation:\n Ich lerne jeden Tag neue Dinge.\n In English:\n I learn new things every day.\n The German translation is:\n Ich lerne neue Dinge, die in jedem Fall auftreten.\n```", "```py\n updated_params = []\nfor param\nwmt_transformer_model_tl.collect_params().values():\n    if param.grad_req == \"write\":\n        param.grad_req = \"null\"\n        updated_params += [param.name]\n```", "```py\n WMT16 test loss: 1.20; test bleu score: 27.78\n```", "```py\n Qualitative Evaluation: Translating from English to German\nExpected translation:\n Ich lerne jeden Tag neue Dinge.\n In English:\n I learn new things every day.\n The German translation is:\n Ich erlerne jedes Mal neue Dinge\n```", "```py\n for param in wmt_transformer_model_ft.collect_params().values():\n    if param.name in updated_params:\n        param.grad_req = 'write'\n```", "```py\n WMT16 test loss: 1.23; test bleu score: 26.05\n```", "```py\n Qualitative Evaluation: Translating from English to German\nExpected translation:\n Ich lerne jeden Tag neue Dinge.\n In English:\n I learn new things every day.\n The German translation is:\n Ich lerne jedes Mal Neues.\n```", "```py\n wmt_model_name = 'transformer_en_de_512'\nwmt_transformer_model_ft_direct, _, _ = nlp.model.get_model(\n    wmt_model_name,\n    dataset_name='WMT2014',\n    pretrained=True,\n    ctx=ctx)\n```", "```py\n WMT16 test loss: 1.22; test bleu score: 26.75\n```", "```py\n Qualitative Evaluation: Translating from English to German\nExpected translation:\n Ich lerne jeden Tag neue Dinge.\n In English:\n I learn new things every day.\n The German translation is:\n Ich lerne jedes Mal neue Dinge\n```"]