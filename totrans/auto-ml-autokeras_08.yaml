- en: '*Chapter 6*: Working with Structured Data Using AutoKeras'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus on using AutoKeras to work with structured data,
    also known as tabular data. We will learn how to explore this type of dataset
    and what techniques to apply to solve problems based on this data source.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've completed this chapter, you will be able to explore a structured
    dataset, transform it, and use it as a data source for specific models, as well
    as create your own classification and regression models to solve tasks based on
    structured data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding structured data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with structured data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a structured data classifier to predict Titanic survivors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a structured data regressor to predict Boston house prices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the coding examples in this book are available as Jupyter notebooks that
    can be downloaded from this book''s GitHub repository: [https://colab.research.google.com/github/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_HousingPricePredictor.ipynb](https://colab.research.google.com/github/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_HousingPricePredictor.ipynb).'
  prefs: []
  type: TYPE_NORMAL
- en: Since code cells can be executed, each notebook can be self-installed, so you
    can add a code snippet with the requirements you need. For this reason, at the
    beginning of each notebook, there is a code cell for environment setup, which
    installs AutoKeras and its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to run the coding examples in this book, you only need a computer with
    Ubuntu Linux as your OS and to install the respective Jupyter notebook with the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can also run these notebooks using Google Colaboratory. In
    that case, you will only need a web browser. For further details, see the *AutoKeras
    with Google Colaboratory* section of [*Chapter 2*](B16953_02_Final_PG_ePub.xhtml#_idTextAnchor029),
    *Getting Started with AutoKeras*. Furthermore, in the *Installing AutoKeras* section
    of that chapter, you will find other installation options.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding structured data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Structured data is basically tabular data; that is, data represented by rows
    and columns of a database. These tables contain two types of structured data,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Numerical data**: This is data that is expressed on a numerical scale. Furthermore,
    it is represented in two ways, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a. **Continuous**: Data that can take any value in an interval, such as temperature,
    speed, height, and so on. For example, a person''s height could be any value (within
    the range of human heights), not just certain fixed heights.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'b. **Discrete**: Data that can take only non-divisible integer values, such
    as counters. Examples include the amount of money in a bank account, the population
    of a country, and so on.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Categorical data**: This is data that can take only a specific set of values
    corresponding to possible categories. In turn, they are divided into the following
    categories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a. **Binary**: Data that can only accept two values (0/1)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'b. **Ordinal**: Data that has an explicit order, such as the days of the week'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is necessary to know the data type of each feature so that you can apply
    the appropriate preprocessing methods. For example, if one of the columns in a
    DataFrame contains ordinal data, it has to be preprocessed by one-hot encoding
    it before passing it to the model.
  prefs: []
  type: TYPE_NORMAL
- en: Working with structured data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AutoKeras allows us to quickly and easily create high-performance models for
    solving tasks based on structured data.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the format of each column, AutoKeras will preprocess them automatically
    before feeding the model. For instance, if the column contains text, it will convert
    it into an embedding, if the column values are fixed categories, it will convert
    them into one-hot encoding arrays, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will see how easy it is to work with tabular datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a structured data classifier to predict Titanic survivors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This model will predict whether a Titanic passenger will survive the sinking
    of the ship based on characteristics that have been extracted from the Titanic
    Kaggle dataset. Although luck was an important factor in survival, some groups
    of people were more likely to survive than others.
  prefs: []
  type: TYPE_NORMAL
- en: There are a train dataset and a test dataset in this dataset. Both are similar
    datasets that include passenger information such as name, age, sex, socioeconomic
    class, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The train dataset (`train.csv`) contains details about a subset of the passengers
    on board (891, to be exact), revealing if they survived or not in the `survived`
    column.
  prefs: []
  type: TYPE_NORMAL
- en: The test dataset (`test.csv`) will be used in the final evaluation and contains
    similar information for the other 418 passengers.
  prefs: []
  type: TYPE_NORMAL
- en: AutoKeras will find patterns in the train data to predict whether these other
    418 passengers on board (found in `test.csv`) survived.
  prefs: []
  type: TYPE_NORMAL
- en: The full source code notebook can be found at [https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_TitanicClassifier.ipynb](https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_TitanicClassifier.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the relevant cells of the notebook in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing AutoKeras**: As we mentioned in other examples, this snippet at
    the top of the notebook is responsible for installing AutoKeras and its dependencies
    using the pip package manager:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Importing the necessary packages**: The following lines load TensorFlow,
    pandas, and AutoKeras as the necessary dependencies for this project:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Creating the datasets**: First, we will load the Titanic datasets as pandas
    DataFrames:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we must separate the label (target) from the rest of the passenger features
    (inputs):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Showing some samples**: Next, we will print the first few rows to see the
    column''s values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the output of the preceding code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Notebook output of the first few rows of the training dataset'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16953_06_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – Notebook output of the first few rows of the training dataset
  prefs: []
  type: TYPE_NORMAL
- en: The previous screenshot shows the passenger information represented in the different
    columns. The first one (`survived`) will be the target to predict.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to create the classifier model.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the classifier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will use the AutoKeras `StructuredDataClassifier` to find the best
    classification model. Just for this example, we will set `max_trials` (the maximum
    number of different Keras models to try) to `2` and set the epochs parameter to
    `10`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the training process to search for the optimal classifier for the
    training dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`StructuredDataClassifier` accepts different input formats. You can pass it
    a pandas DataFrame, as we did in the previous code, but it also accepts other
    formats, such as NumPy arrays and TensorFlow datasets. It also allows you to directly
    pass the URL or file path and it will be downloaded and ingested by the model
    automatically. To use this latter option, you must specify the name of the target
    column as the second argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be similar in both cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Notebook output of structured data classifier training'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16953_06_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – Notebook output of structured data classifier training
  prefs: []
  type: TYPE_NORMAL
- en: The previous output shows the accuracy of the training dataset is increasing.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, we achieved `0.84` as the best prediction accuracy in the validation
    set. This is a good number just for a few seconds of training. We have limited
    the search to 10 epochs and two architectures (`max_trials = 2`). Simply increasing
    these numbers would give us a better accuracy, but it would also take longer to
    finish.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s evaluate the best model with the testing dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, `0.80` is also a really good final prediction score for the training
    time we've invested.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have a winning model, let''s look at a little summary of its architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Best model architecture summary](img/B16953_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Best model architecture summary
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, AutoKeras has done all the preprocessing work for us, by transforming
    the category columns into categories and performing normalizations on them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a visual representation of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Best model architecture visualization'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16953_06_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – Best model architecture visualization
  prefs: []
  type: TYPE_NORMAL
- en: After the data preprocessing blocks (multicategory and normalization), AutoKeras
    has opted to choose a fully connected neural network. This is a classical ML architecture
    that's suitable for tabular data. This makes sense because structured data is
    easier to train with classical machine learning models, since the patterns within
    the data are more explicit.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to resolve a structured data regression problem
    by predicting house prices.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a structured data regressor to predict Boston house prices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following example, we will try to predict the median home price in a
    Boston suburb in the mid-1970s, given data features about the suburb at that time,
    such as the crime rate, tax rate of the property, local property, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We will create a model that will find out the house price of a specific suburb
    based on its features. For this, we will train the model with the `boston_housing`
    dataset, which we must add to our repository ([https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/boston.csv](https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/boston.csv)).
    The dataset we will use is relatively small – 506 samples divided between 404
    training samples and 102 test samples. Note that the dataset isn't normalized,
    which means that each characteristic in the input data applies a different scale
    to its values. For example, some columns have values in the 0 to 1 range, while
    others are between 1 and 12, 0 and 100, and so on. So, this is a good dataset
    to test AutoKeras's auto preprocessing functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dataset''s features (columns) can be summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CRIM**: Crime rate by town (per capita)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ZN**: Proportion of residential land zoned for lots over 25,000 sq.ft'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**INDUS**: Proportion of non-retail business acres per town'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CHAS**: Charles River dummy variable (1 if the tract bounds the river; 0
    otherwise)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NOX**: Nitric oxides concentration (parts per 10 million)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RM**: Average number of rooms per dwelling'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AGE**: Proportion of owner-occupied units built prior to 1940'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DIS**: Weighted mean of distances to five Boston employment centers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RAD**: Index of accessibility to radial highways'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TAX**: Full-value property tax rate per $10,000'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PTRATIO**: The pupil-teacher ratio by town'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LSTAT**: Percentage lower status of the population'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MEDV**: Median value of owner-occupied homes in $1,000s'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows some samples from this dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – A few samples from the Boston housing dataset](img/B16953_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – A few samples from the Boston housing dataset
  prefs: []
  type: TYPE_NORMAL
- en: As we want to approximate a price, we will use a structured data regressor for
    this task.
  prefs: []
  type: TYPE_NORMAL
- en: The notebook for this example, along with the complete source code, can be found
    at [https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_HousingPricePredictor.ipynb](https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras/blob/main/Chapter06/Chapter6_HousingPricePredictor.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explain the relevant code cells of the notebook in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Getting the Boston housing dataset**: Before training, we must download the
    dataset that contains the features of each suburb, including the median price:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Data preprocessing**: Since we have the dataset as a package, we will create
    the training and test sets while using the **median price column** (**MEDV**)
    as the target value. Note that some of the columns will be pre-processed before
    they''re fed to our model. AutoKeras will preprocess these columns automatically,
    performing normalization in continuous values (setting values between 0 and 1)
    and categorization in discrete values (one-hot encoding). Later in the architecture
    of the model, we will see the data preprocessing blocks that were created for
    this purpose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a structure data regressor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because we want to predict a price from a set of features, and since this price
    is a scalar value, we are going to use the AutoKeras `StructuredDataRegressor`,
    a structured data regression class that creates a regression model that accepts
    set `x` as a structured dataset (as a CSV filename, a NumPy array, a pandas DataFrame,
    or a TensorFlow dataset) and set, `y` as a label dataset (a one-column set in
    the same format as the input set, or a target column name if the input data is
    from a CSV file) as input.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the dataset is small, and the training epochs will be faster
    than the other examples, so we''ll set `max_trials` to 20 and set the epochs parameter
    to 50:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'For regression models, AutoKeras uses **mean square error** (**MSE**) as the
    default loss. As we explained in the previous chapters, this is the square of
    the difference between the predictions and the targets. But for this example,
    we are also monitoring a new metric during training that will give us more information:
    **mean absolute error** (**MAE**). This is the absolute value of the difference
    between the predictions and the targets. For example, an MAE of 1.5 in this problem
    would mean that your predictions are off by $1,500 on average.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the training process to search for the best model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Notebook output of training our house price predictor](img/B16953_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Notebook output of training our house price predictor
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the previous output, after less than 5 minutes, we have a model
    with `5.05` for the best validation loss (MSE). This means that the predictions
    are failing at an average of `2.24` (the square root of 5.05) in the final score.
    This is over $2,200\. This is not a bad result for just 5 minutes of training
    time, so let's evaluate it with the test set.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are ready to evaluate our final model with the testing dataset. Let''s get
    started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Let's look at our new metric, MAE. This has a value of `2.420`, which means
    that our predictions are off by $2,420 on average. This is a really good prediction
    error for the time we've invested. If we run AutoKeras with more trials and epochs,
    we will probably get better results.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, it''s time to look at what we have under the hood:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Best model architecture summary](img/B16953_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Best model architecture summary
  prefs: []
  type: TYPE_NORMAL
- en: As in the previous classification example, AutoKeras has done all the preprocessing
    work for us, transforming the columns with discrete values into categories through
    the `multi_category_encoding` block and performing normalizations on the continuous
    values columns using the `normalization` block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see its visual representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Best model architecture visualization](img/B16953_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Best model architecture visualization
  prefs: []
  type: TYPE_NORMAL
- en: In the previous diagram, we can see the different layers of the model in a more
    schematic way. Now, let's summarize what we have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what structured data is and its different categories,
    how to feed our AutoKeras models with different structured data formats (pandas,
    CSV files, and so on), and how to load and explore tabular datasets using some
    pandas functions.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we applied these concepts by creating a powerful structured data classifier
    model to predict Titanic survivors and a powerful structured data regressor model
    to predict Boston house prices.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have learned the basics of how to tackle any problem based on
    structured data using AutoKeras. With these techniques, any `CSV` file can be
    a dataset that you can train your model with.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to perform sentiment analysis on texts
    using AutoKeras.
  prefs: []
  type: TYPE_NORMAL
