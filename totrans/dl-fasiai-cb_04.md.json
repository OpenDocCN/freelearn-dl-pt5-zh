["```py\n    path = untar_data(URLs.IMDB)\n    ```", "```py\n    ├── test\n    │   ├── neg\n    │   └── pos\n    ├── tmp_clas\n    ├── tmp_lm\n    ├── train\n    │   ├── neg\n    │   └── pos\n    └── unsup\n    ```", "```py\n    dls =TextDataLoaders.from_folder(\\\n    path, valid = 'test', is_lm=True, bs=16)\n    ```", "```py\n    dls.show_batch(max_n=2)\n    ```", "```py\n    learn = language_model_learner(\\\n    dls,AWD_LSTM, metrics=accuracy).to_fp16()\n    learn.fine_tune(1, 1e-2)\n    ```", "```py\n    learn.predict(\"what comes next\", n_words=20)\n    ```", "```py\n    learn.export('/notebooks/temp/models/lm_model_'+modifier)\n    ```", "```py\n    keep_path = learn.path\n    ```", "```py\n    learn.path = Path('/notebooks/temp')\n    ```", "```py\n    learn.save_encoder('ft_'+modifier)\n    ```", "```py\nRuntimeError: CUDA out of memory. Tried to allocate 102.00 MiB (GPU 0; 7.93 GiB total capacity; 7.14 GiB already allocated; 6.50 MiB free; 7.32 GiB reserved in total by PyTorch)\n```", "```py\ndls = TextDataLoaders.from_folder(untar_data(URLs.IMDB), valid='test', bs=16)\n```", "```py\nlearn = language_model_learner(dls,AWD_LSTM,\ndrop_mult=0.5,metrics=accuracy).to_fp16()\n```", "```py\nlearn.save_encoder('ft_'+modifier)\n```", "```py\n    keep_path = learner.path\n    ```", "```py\n    learner.path = Path('/temp/models')\n    ```", "```py\n    learner.path = keep_path\n    ```", "```py\n    dls_clas = TextDataLoaders.from_folder(\\\n    path, valid='test')\n    ```", "```py\n    dls_clas.show_batch(max_n=3)\n    ```", "```py\n    learn_clas = text_classifier_learner(dls_clas, AWD_LSTM, \n                                    metrics=accuracy).to_fp16()\n    ```", "```py\n    learn_clas.path = Path('/notebooks/temp')\n    ```", "```py\n    learn_clas = learn_clas.load_encoder('ft_'+modifier)\n    ```", "```py\n    learn_clas.fit_one_cycle(5, 2e-2)\n    ```", "```py\n    cd /storage/archive\n    ```", "```py\n    mkdir covid_tweets\n    ```", "```py\n    cd /storage/archive/covid_tweets\n    ```", "```py\n    mkdir test\n    mkdir train\n    ```", "```py\n    notebooks/temp directory, make a new /notebooks/temp directory:\n\n    ```", "```py\n\n    ```", "```py\ncp /notebooks/temp/Corona_NLP_test.csv /storage/archive/covid_tweets/test/Corona_NLP_test.csv\n```", "```py\ncp /notebooks/temp/Corona_NLP_train.csv /storage/archive/covid_tweets/train/Corona_NLP_train.csv\n```", "```py\n├── test\n│   └── Corona_NLP_test.csv\n└── train\n    └── Corona_NLP_train.csv\n```", "```py\n    path = URLs.path('covid_tweets')\n    ```", "```py\n    df_train = pd.read_csv(path/'train/Corona_NLP_train.csv',\n                           encoding = \"ISO-8859-1\")\n    ```", "```py\n    dls = TextDataLoaders.from_df(df_train, path=path, \n                                 text_col='OriginalTweet',\n                                 is_lm=True)\n    ```", "```py\n    learn = language_model_learner(dls,AWD_LSTM,\n                               metrics=accuracy).to_fp16()\n    learn.fine_tune(1, 1e-2)\n    ```", "```py\n    learn.predict(\"what comes next\", n_words=20)\n    ```", "```py\n    learn.export('/notebooks/temp/models/lm_model_standalone'+modifier)\n    ```", "```py\n    keep_path = learn.path\n    ```", "```py\n    learn.path = Path('/notebooks/temp')\n    ```", "```py\n    learn.save_encoder('ft_standalone'+modifier)\n    ```", "```py\n    path = URLs.path('covid_tweets')\n    ```", "```py\n    df_train = pd.read_csv(path/'train/Corona_NLP_train.csv',\n                           encoding = \"ISO-8859-1\")\n    ```", "```py\n    dls = TextDataLoaders.from_df(df_train, path=path, text_col='OriginalTweet',label_col='Sentiment')\n    ```", "```py\n    dls.show_batch(max_n=3)\n    ```", "```py\n    learn_clas = text_classifier_learner(dls, AWD_LSTM, \n                               metrics=accuracy).to_fp16()\n    ```", "```py\n    learn_clas.path = Path('/notebooks/temp')\n    ```", "```py\n    learn_clas =\\\n    learn_clas.load_encoder('ft_standalone'+modifier)\n    ```", "```py\n    learn_clas.path = keep_path\n    ```", "```py\n    learn_clas.fit_one_cycle(1, 2e-2)\n    ```", "```py\ndls_clas = TextDataLoaders.from_folder(path, valid='test')\n```", "```py\ndls = TextDataLoaders.from_df(df_train, path=path, text_col='OriginalTweet',label_col='Sentiment')\n```", "```py\n├── test\n│   ├── neg\n│   └── pos\n├── tmp_clas\n├── tmp_lm\n├── train\n│   ├── neg\n│   └── pos\n└── unsup\n```", "```py\ndls = TextDataLoaders.from_df(df_train, path=path, text_col='OriginalTweet',label_col='Sentiment')\n```", "```py\n    df_test = pd.read_csv(path/'test/Corona_NLP_test.csv ',encoding = \"ISO-8859-1\")\n    ```", "```py\n    df_combo = pd.concat([df_train, df_test], axis=0)\n    ```"]