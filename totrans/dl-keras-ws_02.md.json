["```py\n    import numpy as np\n    vec1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    vec1\n    ```", "```py\n    array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    ```", "```py\n    mat1 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n    mat1\n    ```", "```py\n    array([[ 1, 2, 3],\n           [ 4, 5, 6],\n           [ 7, 8, 9],\n           [10, 11, 12]])\n    ```", "```py\n    mat2 = np.matrix([[1, 2, 3], [4, 5, 6], \\\n                      [7, 8, 9], [10, 11, 12]])\n    ```", "```py\n    ten1 = np.array([[[1, 2, 3], [4, 5, 6]], \\\n                     [[7, 8, 9], [10, 11, 12]]])\n    ten1\n    ```", "```py\n    array([[[ 1, 2, 3],\n            [ 4, 5, 6],\n            [[ 7, 8, 9],\n            [10, 11, 12]]])\n    ```", "```py\n    vec1.shape\n    ```", "```py\n    (10, )\n    ```", "```py\n    mat1.shape\n    ```", "```py\n    (4, 3)\n    ```", "```py\n    ten1.shape\n    ```", "```py\n    (2, 2, 3)\n    ```", "```py\n    mat1 = np.matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n    mat1\n    ```", "```py\n    matrix([[ 1, 2, 3],\n            [ 4, 5, 6],\n            [ 7, 8, 9],\n            [10, 11, 12]])\n    ```", "```py\n    mat2 = np.matrix([[2, 1, 4], [4, 1, 7], [4, 2, 9], [5, 21, 1]])\n    mat2\n    ```", "```py\n    matrix([[ 2, 1, 4],\n            [ 4, 1, 7],\n            [ 4, 2, 9],\n            [ 5, 21, 1]])\n    ```", "```py\n    mat3 = mat1 + mat2\n    mat3\n    ```", "```py\n    matrix([[ 3, 3, 7],\n            [ 8, 6, 13],\n            [ 11, 10, 18],\n            [ 15, 32, 13]])\n    ```", "```py\n    mat1 + 4\n    ```", "```py\n    matrix([[ 5, 6, 7],\n            [ 8, 9, 10],\n            [ 11, 12, 13],\n            [ 14, 15, 16]])\n    ```", "```py\n    import numpy as np\n    mat1 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n    mat1\n    ```", "```py\n    array([[ 1,  2,  3],\n           [ 4,  5,  6],\n           [ 7,  8,  9],\n           [10, 11, 12]])\n    ```", "```py\n    mat1.shape\n    ```", "```py\n    (4, 3)\n    ```", "```py\n    mat2 = np.reshape(mat1, [3,4])\n    mat2\n    ```", "```py\n    array([[ 1, 2, 3, 4],\n           [ 5, 6, 7, 8],\n           [ 9, 10, 11, 12]])\n    ```", "```py\n    mat2.shape\n    ```", "```py\n    (3, 4)\n    ```", "```py\n    mat3 = np.reshape(mat1, [3,2,2])\n    mat3\n    ```", "```py\n    array([[[ 1, 2],\n            [ 3, 4]],\n           [[ 5, 6],\n            [ 7, 8]],\n           [[ 9, 10],\n            [ 11, 12]]]) \n    ```", "```py\n    mat3.shape\n    ```", "```py\n    (3, 2, 2)\n    ```", "```py\n    mat4 = np.reshape(mat1, [12])\n    mat4\n    ```", "```py\n    array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    ```", "```py\n    mat4.shape\n    ```", "```py\n    (12, )\n    ```", "```py\n    mat = np.matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n    mat.T\n    ```", "```py\n    mat.shape\n    ```", "```py\n    (4, 3)\n    ```", "```py\n    mat.T.shape\n    ```", "```py\n    (3, 4)\n    ```", "```py\n    np.reshape(mat1, [3,4]) == mat1.T\n    ```", "```py\n    array([[ True, False, False, False],\n           [False, False, False, False],\n           [False, False, False, True]], dtype = bool)\n    ```", "```py\n    import numpy as np\n    mat1 = np.array([[1, 2, 3], [4, 5, 6], \\\n                     [7, 8, 9], [10, 11, 12]])\n    mat2 = np.array([[2, 1, 4], [4, 1, 7], \\\n                     [4, 2, 9], [5, 21, 1]])\n    ```", "```py\n    mat1.dot(mat2.T)\n    ```", "```py\n    array([[ 16, 27, 35, 50],\n           [ 37, 63, 80, 131],\n           [ 58, 99, 125, 212],\n           [ 79, 135, 170, 293]])\n    ```", "```py\n    mat1.T.dot(mat2)\n    ```", "```py\n    array([[ 96, 229, 105],\n           [ 111, 254, 126],\n           [ 126, 279, 147]])\n    ```", "```py\n    np.reshape(mat1, [3,4]).dot(mat2)\n    ```", "```py\n    array([[ 42, 93, 49],\n           [ 102, 193, 133],\n           [ 162, 293, 217]])\n    ```", "```py\n    import numpy as np\n    mat1 = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\n    mat1\n    ```", "```py\n    array([[[ 1, 2, 3],\n            [ 4, 5, 6],\n            [[ 1, 2, 3],\n            [ 4, 5, 6]]])\n    ```", "```py\n    mat1.shape\n    ```", "```py\n    mat2 = mat1.T\n    mat2\n    ```", "```py\n    array([[[ 1, 1],\n            [ 4, 4]],\n           [[ 2, 2],\n            [ 5, 5]],\n           [[ 3, 3],\n            [ 6, 6]]])\n    ```", "```py\n    mat2.shape\n    ```", "```py\n    mat3 = mat2.dot(mat1)\n    mat3\n    ```", "```py\n    array([[[[ 5, 7, 9],\n             [ 5, 7, 9]],\n            [[ 20, 28, 36],\n             [ 20, 28, 36]]],\n           [[[ 10, 14, 18],\n             [ 10, 14, 18]],\n            [[ 25, 35, 45],\n             [ 25, 35, 45]]],\n           [[[ 15, 21, 27],\n             [ 15, 21, 27]],\n            [[ 30, 42, 54],\n             [ 30, 42, 54]]]])\n    ```", "```py\n    mat3.shape\n    ```", "```py\n    (3, 2, 2, 3)\n    ```", "```py\nfrom keras.models import Sequential\nmodel = Sequential()\n```", "```py\nfrom keras.layers import Dense\nfrom keras.models import Sequential\ninput_shape = 20\nunits = 1\nmodel.add(Dense(units, input_dim=input_shape))\n```", "```py\nfrom keras.layers import Dense, Activation\nfrom keras.models import Sequential\ninput_shape = 20\nunits = 1\nmodel.add(Dense(units, input_dim=input_shape))\nmodel.add(Activation('tanh'))\n```", "```py\nmodel.compile(optimizer='adam', loss='binary_crossentropy', \\\n              metrics=['accuracy'])\n```", "```py\nhistory = model.fit(x=X_train, y=y_train['y'], \\\n                    epochs=10, batch_size=32, \\\n                    validation_split=0.2, shuffle=False)\n```", "```py\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.plot(history.history['loss'])\nplt.show()\n```", "```py\ntest_loss = model.evaluate(X_test, y_test['y'])\n```", "```py\n2466/2466 [==============================] - 0s 15us/step\nThe loss on the test set is 0.3632 and the accuracy is 86.902%\n```"]