["```py\nfrom jina import Document\ndocument = Document()\n```", "```py\nfrom jina import Document\ndocument = Document()\ndocument.text = 'hello world'\n```", "```py\ndocument.pop('text')\n```", "```py\ndocument.pop('text', 'id', 'mime_type')\n```", "```py\nfrom jina import Document\ndocument = Document(tags={'dimensions': {'height': 5.0, 'weight': 10.0}})\ndocument.tags['dimensions'] # {'weight': 10.0, 'height': 5.0}\n```", "```py\nfrom jina import Document\ndocument = Document(tags={'dimensions': {'height': 5.0, 'weight': 10.0}})\nDocument.tags__dimensions__weight #10\n```", "```py\nfrom jina import Document\nimport numpy as np\ndocument1 = Document(content='hello world')\ndocument2 = Document(content=b'\\f1')\ndocument3 = Document(content=np.array([1, 2, 3]))\ndocument4 = Document(content=\n'https://static.jina.ai/logo/core/notext/light/logo.png')\n```", "```py\ndoc = Document(text='hello world')\ndoc.uri = 'https://jina.ai/' #text field is cleared, doc \n#has uri field now\nassert not doc.text  # True\ndoc = Document(content='https://jina.ai')\nassert doc.uri == 'https://jina.ai'  # True\nassert not doc.text  # True\ndoc.text = 'hello world' #uri field is cleared, doc has \n#text field now\nassert doc.content == 'hello world'  # True\nassert not doc.uri  # True\n```", "```py\ndoc.convert_buffer_to_blob()\ndoc.convert_blob_to_buffer()\ndoc.convert_uri_to_buffer()\ndoc.convert_buffer_to_uri()\ndoc.convert_text_to_uri()\ndoc.convert_uri_to_text()\ndoc.convert_image_buffer_to_blob()\ndoc.convert_image_blob_to_uri()\ndoc.convert_image_uri_to_blob()\ndoc.convert_image_datauri_to_blob()\n```", "```py\nimport numpy as np\nfrom jina import Document\nd1 = Document(embedding=np.array([1, 2, 3]))\nd2 = Document(embedding=np.array([[1, 2, 3], [4, 5, 6]]))\n```", "```py\nfrom jina import Document\ndocument = Document(uri='https://jina.ai',\n             mime_type='text/plain',\n             granularity=1,\n             adjacency=3,\n             tags={'foo': 'bar'})\n```", "```py\nfrom jina import Document\nimport json\ndoc = {'id': 'hello123', 'content': 'world'}\ndoc1 = Document(d)\ndoc = json.dumps({'id': 'hello123', 'content': 'world'})\ndoc2 = Document(d)\n```", "```py\nfrom jina import Document\ndoc1 = Document({'id': 'hello123', 'foo': 'bar'})\n```", "```py\nfrom jina import Document\ndoc1 = Document({'id': 'hello123', 'foo': 'bar'}, \nfield_resolver={'foo': 'content'})\n```", "```py\n    from jina import Document\n    doc = Document(content='hello, world!')\n    doc1 = doc\n    assert id(doc) == id(doc1)  # True\n    ```", "```py\n    doc1 = Document(doc, copy=True)\n    assert id(doc) == id(doc1)  # False\n    ```", "```py\nfrom jina import DocumentArray, Document\ndocumentarray = DocumentArray([Document(), Document()])\nfrom jina import DocumentArray, Document\ndocumentarray = DocumentArray((Document() for _ in range(10))\nfrom jina import DocumentArray, Document\ndocumentarray1 = DocumentArray((Document() for _ in range(10)))\ndocumentarray2 = DocumentArray(da)\n```", "```py\nfrom jina import DocumentArray, Document\ndocumentarray = DocumentArray([Document(), Document()])\ndocumentarray.save('data.json')\ndocumentarray1 = DocumentArray.load('data.json')\n```", "```py\nfrom jina import DocumentArray, Document\ndocumentarray = DocumentArray([Document(), Document()])\ndocumentarray.save('data.bin', file_format='binary')\ndocumentarray1 = DocumentArray.load('data.bin', file_format='binary')\n```", "```py\nfrom jina import DocumentArray, Document\ndocumentarray = DocumentArray([Document(id='hello'), \nDocument(id='world'), Document(id='goodbye')])\ndocumentarray[0]\n# <jina.types.document.Document id=hello at 5699749904>\ndocumentarray['world']\n# <jina.types.document.Document id=world at 5736614992>\ndocumentarray[1:2]\n# <jina.types.arrays.document.DocumentArray length=1 at \n# 5705863632>\n```", "```py\nfrom jina import DocumentArray, Document\ndocumentarray = DocumentArray(\n    [\n        Document(tags={'id': 1}),\n        Document(tags={'id': 2}),\n        Document(tags={'id': 3})\n    ]\n)\ndocumentarray.sort(key=lambda d: d.tags['id'], \nreverse=True)\nprint(documentarray)\n```", "```py\n<jina.types.arrays.document.DocumentArray length=3 at 5701440528>\n\n{'id': '6a79982a-b6b0-11eb-8a66-1e008a366d49', 'tags': {'id': 3.0}},\n{'id': '6a799744-b6b0-11eb-8a66-1e008a366d49', 'tags': {'id': 2.0}},\n{'id': '6a799190-b6b0-11eb-8a66-1e008a366d49', 'tags': {'id': 1.0}}\n```", "```py\nfrom jina import DocumentArray, Document\ndocumentarray = DocumentArray([Document() for _ in range(6)])\nfor j in range(6):\n    documentarray[j].scores['metric'] = j\nfor d in filter(lambda d: d.scores['metric'].value > 2, documentarray):\n    print(d)\n```", "```py\n{'id': 'b5fa4871-cdf1-11eb-be5d-e86a64801cb1', 'scores': {'values': {'metric': {'value': 3.0}}}}\n{'id': 'b5fa4872-cdf1-11eb-be5d-e86a64801cb1', 'scores': {'values': {'metric': {'value': 4.0}}}}\n{'id': 'b5fa4873-cdf1-11eb-be5d-e86a64801cb1', 'scores': {'values': {'metric': {'value': 5.0}}}}\n```", "```py\nfrom jina import DocumentArray, Document\ndocumentarray = DocumentArray([Document(weight=j) for j in range(6)])\ndocumentarray2 = DocumentArray(d for d in documentarray if d.weight > 2)\nprint(documentarray2)\n```", "```py\nDocumentArray has 3 items:\n{'id': '3bd0d298-b6da-11eb-b431-1e008a366d49', 'weight': 3.0},\n{'id': '3bd0d324-b6da-11eb-b431-1e008a366d49', 'weight': 4.0},\n{'id': '3bd0d392-b6da-11eb-b431-1e008a366d49', 'weight': 5.0}\n```", "```py\njina hub new\n```", "```py\nfrom jina import Executor, requests\nclass MyExecutor(Executor):\n    @requests\n    def foo(self, **kwargs):\n        print(kwargs)\n```", "```py\nfrom jina import Executor\nclass MyExecutor(Executor):\n    def __init__(self, foo: str, bar: int, **kwargs):\n        super().__init__(**kwargs)\n        self.bar = bar\n        self.foo = foo\n```", "```py\nfrom jina import Executor, Flow, Document, requests\nclass MyExecutor(Executor):\n    @requests(on='/index')\n    def foo(self, **kwargs):\n        print(f'foo is called: {kwargs}')\n    @requests(on='/random_work')\n    def bar(self, **kwargs):\n        print(f'bar is called: {kwargs}')\nf = Flow().add(uses=MyExecutor)\nwith f:\n    f.post(on='/index', inputs=Document(text='index'))\n    f.post(on='/random_work', \n    inputs=Document(text='random_work'))\n    f.post(on='/blah', inputs=Document(text='blah')) \n```", "```py\nfrom jina import Executor, requests\nclass MyExecutor(Executor):\n    @requests\n    def foo(self, **kwargs):\n        print(kwargs)\n\n    @requests(on='/index')\n    def bar(self, **kwargs):\n        print(kwargs)\n```", "```py\nfrom jina import Flow\nf = Flow()\n```", "```py\nfrom jina import Flow\nf = Flow()\nwith f:     \nf.block()\n```", "```py\nfrom jina import Flow\nflow = Flow().add().add()\n```", "```py\nfrom jina import Flow, Executor\nclass MyExecutor(Executor):\n    ...\nf = Flow().add(uses=MyExecutor)\n```", "```py\nfrom jina import Flow\nf = Flow().add().plot('f.svg')\n```", "```py\nfrom jina import Flow, Document, Executor, requests  \nclass MyExecutor(Executor):      \n@requests(on='/bar')\n def foo(self, docs, **kwargs):\n    print(docs) \nf = Flow().add(name='myexec1', uses=MyExecutor) \nwith f:     \nf.post(on='/bar', inputs=Document(), on_done=print)\n```"]