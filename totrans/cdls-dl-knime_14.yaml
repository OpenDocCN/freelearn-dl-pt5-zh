- en: '*Chapter 11:* Best Practices and Other Deployment Options'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第11章：*最佳实践和其他部署选项'
- en: In [*Chapter 10*](B16391_10_Final_VK_ePUB.xhtml#_idTextAnchor367), *Deploying
    a Deep Learning Network*, we introduced the concept of deployment and we showed
    how to build a workflow to apply a network to new data. In this chapter, we will
    focus on two more deployment options using the KNIME software.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第10章*](B16391_10_Final_VK_ePUB.xhtml#_idTextAnchor367)，*深度学习网络的部署*中，我们介绍了部署的概念，并展示了如何构建一个工作流将网络应用于新数据。在本章中，我们将重点介绍使用KNIME软件的另外两种部署选项。
- en: In the first section of this chapter, you will learn how to deploy a deep learning
    model as a web application so that end users can execute, interact with, and control
    the application via a web browser. In order to implement a web application, we
    need to introduce the KNIME WebPortal, a feature of KNIME Server. Components play
    a central role in the development of web applications since they are used to implement
    the interaction points according to the **Guided Analytics** feature of the KNIME
    software. In this chapter, you will also learn more about components.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一部分，你将学习如何将深度学习模型部署为一个web应用程序，以便最终用户可以通过web浏览器执行、交互并控制该应用程序。为了实现web应用程序，我们需要介绍KNIME
    WebPortal，这是KNIME Server的一项功能。组件在web应用程序开发中起着核心作用，因为它们用于根据KNIME软件的**引导分析**功能实现交互点。在本章中，你还将更多地了解组件。
- en: Another deployment option to consume a deep learning model is a web service,
    through a REST interface. Web services have become very popular recently because
    they allow you to integrate and orchestrate a number of applications seamlessly
    and easily within the same ecosystem. In the second section of this chapter, you
    will learn how to build, deploy, and call workflows as REST services with the
    KNIME software.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种消费深度学习模型的部署选项是通过REST接口的web服务。由于web服务能够让你在同一生态系统中无缝而轻松地集成和协调多个应用程序，因此它们最近变得非常流行。在本章的第二部分，你将学习如何使用KNIME软件构建、部署并调用作为REST服务的工作流。
- en: We will conclude this chapter with some best practice advice and tips and tricks
    for working with both neural networks and KNIME Analytics Platform. These best
    practices and tips and tricks originate from our own experiences of many years
    of working on deep learning projects, some of which have been described in this
    book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的结尾部分，我们将提供一些最佳实践建议以及在使用神经网络和KNIME分析平台时的技巧与窍门。这些最佳实践和技巧来源于我们多年来在深度学习项目中的实际经验，其中一些已经在本书中有所描述。
- en: 'The chapter is organized into the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的组织结构如下：
- en: Building a Web Application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建web应用程序
- en: Building a Web Service with the REST Interface
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用REST接口构建web服务
- en: KNIME Tips and Tricks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KNIME技巧与窍门
- en: Building a Web Application
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建web应用程序
- en: In this section, we will show you the few steps needed to build a **web application**
    using the KNIME software.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们将向你展示使用KNIME软件构建**web应用程序**所需的几个步骤。
- en: After a short introduction to **KNIME** **WebPortal**, we will show how to create
    composite views, how to include them to create interaction points, and how to
    structure the application into a sequence of web pages as interaction points,
    following the **Guided Analytics** principles.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在简要介绍**KNIME** **WebPortal**之后，我们将展示如何创建复合视图，如何将它们包含在内以创建交互点，以及如何按照**引导分析**原则将应用程序结构化为一系列作为交互点的网页。
- en: As an example, we will apply what we have learned to build a web application
    around the deployment workflow of the case study on cancer cell classification
    described in [*Chapter 9*](B16391_09_Final_NM_ePUB.xhtml#_idTextAnchor316), *Convolutional
    Neural Networks for Image Classification*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将应用所学的知识，围绕[*第9章*](B16391_09_Final_NM_ePUB.xhtml#_idTextAnchor316)，*卷积神经网络在图像分类中的应用*案例研究中的癌细胞分类部署工作流，构建一个web应用程序。
- en: Introduction to KNIME WebPortal
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: KNIME WebPortal简介
- en: 'The first step in building a web application is to design and implement the
    sequence of web-based interaction points within the workflow. In a case study
    on the classification of cancer cells, our data scientist could build a deployment
    workflow with two interaction points: one to allow the end user to upload a histopathology
    slide image, and one to display the results on the final web page. In between
    those two interaction points, the workflow ingests the new image and executes
    the trained model to classify it.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 web 应用程序的第一步是设计并实现工作流中的一系列基于 web 的交互点。在一个癌细胞分类的案例研究中，我们的数据科学家可以构建一个部署工作流，包含两个交互点：一个允许最终用户上传组织病理切片图像，另一个在最终的网页上展示结果。在这两个交互点之间，工作流会摄取新的图像并执行训练好的模型来进行分类。
- en: 'Once the workflow is ready, it will be transferred onto the production **KNIME
    server**. From now on, the workflow can be accessed on-demand through **KNIME
    WebPortal** via any web browser. This web-based interaction allows the pathologist
    to control the process without being familiar with KNIME Analytics Platform or
    the deep learning algorithm. *Figure 11.1* shows you what this web-based application
    could look like:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦工作流准备好，它将被转移到生产 **KNIME 服务器**。从此以后，工作流可以通过任何 web 浏览器通过 **KNIME WebPortal**
    按需访问。基于 web 的交互方式使病理学家能够控制整个过程，而无需熟悉 KNIME Analytics Platform 或深度学习算法。*图 11.1*
    向您展示了这个基于 web 的应用程序可能的样子：
- en: '![igure 11.1 – A web application implemented by a KNIME workflow, running on
    KNIME Server, and called via KNIME WebPortal from any web browser'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.1 – 通过 KNIME 工作流实现的 web 应用程序，运行在 KNIME Server 上，并可以通过任何 web 浏览器通过 KNIME
    WebPortal 调用](img/B16391_11_001.jpg)'
- en: '](img/B16391_11_001.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16391_11_001.jpg)'
- en: Figure 11.1 – A web application implemented by a KNIME workflow, running on
    KNIME Server, and called via KNIME WebPortal from any web browser
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 通过 KNIME 工作流实现的 web 应用程序，运行在 KNIME Server 上，并可以通过任何 web 浏览器通过 KNIME
    WebPortal 调用
- en: 'In this example, the web application is a very simple one. It has only two
    interaction points – that is, two web pages: the first one for the image upload
    and the second one to inspect the results.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，web 应用程序非常简单。它只有两个交互点——即两个网页：第一个用于图像上传，第二个用于查看结果。
- en: More complex web applications can be developed codelessly using this combination
    of KNIME Analytics Platform, KNIME Server, and KNIME WebPortal. Some examples
    of quite complex and very beautifully designed web applications, such as Guided
    Visualization, Guided Labeling, and Guided Automation, are available for download
    from the KNIME Hub ([https://hub.knime.com](https://hub.knime.com)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 KNIME Analytics Platform、KNIME Server 和 KNIME WebPortal 的组合，开发更复杂的无代码 web
    应用程序。像 Guided Visualization、Guided Labeling 和 Guided Automation 等一些相当复杂且设计精美的
    web 应用程序示例，可以从 KNIME Hub 下载（[https://hub.knime.com](https://hub.knime.com)）。
- en: 'In contrast to KNIME Analytics Platform, KNIME Server contains no data operations
    or model training algorithms. However, it contains the whole IT infrastructure
    to allow collaboration among team members, on-demand and scheduled execution of
    applications, a definition of the access rights for each registered user or group
    of users, model management, auditing features, and, of course, deployment options,
    as we will see in this chapter. Also, in contrast to KNIME Analytics Platform,
    KNIME Server is not open source but rather needs a yearly license. *Figure 11.2*
    shows the login page for KNIME WebPortal:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与 KNIME Analytics Platform 相比，KNIME Server 不包含数据操作或模型训练算法。然而，它包含了完整的 IT 基础设施，允许团队成员之间的协作，应用程序的按需和定时执行，定义每个注册用户或用户组的访问权限，模型管理，审计功能，当然还有部署选项，正如我们将在本章中看到的那样。此外，与
    KNIME Analytics Platform 相比，KNIME Server 不是开源的，而是需要购买年度许可证。*图 11.2* 显示了 KNIME
    WebPortal 的登录页面：
- en: '![Figure 11.2 – Login page for KNIME WebPortal](img/B16391_11_002.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – KNIME WebPortal 登录页面](img/B16391_11_002.jpg)'
- en: Figure 11.2 – Login page for KNIME WebPortal
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – KNIME WebPortal 登录页面
- en: Among the many IT features available with KNIME Server, KNIME WebPortal allows
    you to see and manage workflows from any web browser. This seems a simple feature,
    but it can be the missing link between the data scientist and the end user.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 KNIME Server 提供的众多 IT 功能中，KNIME WebPortal 允许您通过任何 web 浏览器查看和管理工作流。这个功能看起来很简单，但它可能是数据科学家和最终用户之间缺失的纽带。
- en: Important note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The end user is an expert in their domain and usually has neither the time nor
    the inclination to open KNIME Analytics Platform and investigate workflows and
    nodes. All the end user needs is a comfortable web-based application running on
    a web browser and showing only the information they need to see; at the very least,
    the page for the data upload and the final page summarizing the results.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最终用户是某一领域的专家，通常既没有时间也没有兴趣打开 KNIME Analytics Platform 查看工作流和节点。最终用户所需要的，只是一个在网页浏览器上运行的舒适的
    Web 应用程序，且只显示他们需要看到的信息；至少，包括数据上传页面和总结结果的最终页面。
- en: WebPortal does not need any special installation. It comes already pre-packaged
    with the installation of KNIME Server. However, its appearance can be easily customized
    through dedicated *CSS style sheets*. KNIME WebPortal only accepts registered
    users and requires logging in (*Figure 11.2*).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: WebPortal 不需要任何特殊安装。它已经随 KNIME Server 的安装预先打包。然而，其外观可以通过专用的*CSS 样式表*轻松定制。KNIME
    WebPortal 只接受注册用户，并且需要登录（*图 11.2*）。
- en: 'After a successful login, the starting page appears with the folders you have
    been granted access to. Navigate to the workflow you would like to start and then
    press **Run** (*Figure 11.3*):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录后，起始页面会显示您有权限访问的文件夹。导航到您想要开始的工作流，然后点击**运行**（*图 11.3*）：
- en: '![Figure 11.3 – Start page for a selected workflow on KNIME WebPortal](img/B16391_11_003.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – 在 KNIME WebPortal 上选择的工作流的起始页面](img/B16391_11_003.jpg)'
- en: Figure 11.3 – Start page for a selected workflow on KNIME WebPortal
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 在 KNIME WebPortal 上选择的工作流的起始页面
- en: Important note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: KNIME Server is the complementary tool to KNIME Analytics Platform. While KNIME
    Analytics Platform has all the algorithms and data operations, KNIME Server provides
    the IT infrastructure for team-based collaboration, application automation, model
    management, and deployment options.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: KNIME Server 是 KNIME Analytics Platform 的补充工具。虽然 KNIME Analytics Platform 拥有所有算法和数据操作功能，KNIME
    Server 提供了团队协作、应用自动化、模型管理和部署选项所需的 IT 基础设施。
- en: Let's find out how a workflow must be structured to create a sequence of pages
    on KNIME WebPortal with defined interaction options.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看工作流如何结构化，以便在 KNIME WebPortal 上创建一个具有定义交互选项的页面序列。
- en: Creating a Workflow to Run on KNIME WebPortal
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个在 KNIME WebPortal 上运行的工作流
- en: The execution of a workflow on KNIME WebPortal moves from one web page to the
    next. These pages, also called wizard steps, offer the end user the possibility
    of visually guided actions to move and interact with the process.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 KNIME WebPortal 上执行工作流时，从一个网页移动到下一个网页。这些页面，也称为向导步骤，为最终用户提供了可视化引导操作的可能性，使其能够与流程进行交互。
- en: Now, it would be long and complicated if we had to build all those pages/steps
    from scratch. Luckily, there are **components**. Each page/step just visualizes
    the content of the **composite view** of a component in the underlying workflow.
    So, implementing a sequence of web pages for WebPortal in reality corresponds
    to just implementing a sequence of components with the required composite views.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们必须从头开始构建所有这些页面/步骤，那将会是漫长且复杂的。幸运的是，有了**组件**。每个页面/步骤只是将组件在底层工作流中的**复合视图**的内容可视化。因此，实际实现
    WebPortal 的一系列网页仅仅对应于实现一系列具有所需复合视图的组件。
- en: 'The upper part of *Figure 11.4* shows three web pages from an application running
    on KNIME WebPortal: a form to import customers from a database; a scatter plot
    and a table, connected to each other, to select some customers; and finally, a
    page displaying the information for the selected customers. The lower part of
    *Figure 11.4* shows the underlying workflow with the corresponding three components.
    The composite view of each component produces one page during the execution of
    the workflow on KNIME WebPortal:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.4* 的上半部分展示了在 KNIME WebPortal 上运行的一个应用程序的三个网页：一个从数据库导入客户的表单；一个散点图和一个表格，二者相互连接，用于选择客户；最后是一个展示选定客户信息的页面。*图
    11.4* 的下半部分展示了对应的工作流和三个组件。每个组件的复合视图在 KNIME WebPortal 上执行工作流时会生成一个页面：'
- en: '![Figure 11.4 – Top: step execution of an application on KNIME WebPortal. Bottom:
    the corresponding workflow generating the web pages for the step execution](img/B16391_11_004.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – 上：在 KNIME WebPortal 上执行应用程序的步骤。下：生成网页的对应工作流](img/B16391_11_004.jpg)'
- en: 'Figure 11.4 – Top: step execution of an application on KNIME WebPortal. Bottom:
    the corresponding workflow generating the web pages for the step execution'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 上：在 KNIME WebPortal 上执行应用程序的步骤。下：生成网页的对应工作流
- en: The workflow in *Figure 11.4* is used as an example for a step execution of
    a workflow from a web browser and refers to a customer dataset. We will use only
    this dataset for this section since it allows us to show many different features
    used in component construction. This web application has been designed to allow
    the end user to inspect customer data and select customers with a high risk of
    churn to be contacted by a team member.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.4* 中的工作流用作从 web 浏览器执行工作流的步骤示例，并涉及客户数据集。我们将仅使用此数据集，因为它使我们能够展示在组件构建中使用的多种不同功能。此
    web 应用程序旨在允许最终用户检查客户数据并选择高风险流失的客户，以便由团队成员联系。'
- en: The first component, **Get Customers from Database**, creates the first page
    on the left. Here, the end user must provide their username and password to connect
    to the database.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个组件，**从数据库获取客户**，创建了左侧的第一页。在这里，最终用户必须提供他们的用户名和密码以连接到数据库。
- en: 'After clicking on the **Next** button in the lower-right corner, the workflow
    is executed until the next component, **Select Customers to Contact**, is reached
    and the corresponding web page is created. On this page, the end user gets an
    overview of the customer data via a scatter plot and a table and selects the customers
    to contact. For the selection, the view provides two interaction options: select
    a product via the radio buttons in the upper-left corner or change the churn score
    using the range slider in the lower-left corner. The scatter plot and table are
    automatically updated according to the new selection parameters. Once the end
    user is happy with the selection, they click **Next** again to get to the last
    page of the web application.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 点击右下角的**下一步**按钮后，工作流会执行直到到达下一个组件**选择要联系的客户**，并创建相应的网页。在此页面上，最终用户可以通过散点图和表格查看客户数据，并选择要联系的客户。选择时，视图提供了两个交互选项：通过左上角的单选按钮选择产品，或使用左下角的范围滑块更改流失分数。散点图和表格会根据新的选择参数自动更新。一旦最终用户对选择满意，他们再次点击**下一步**以进入
    web 应用的最后一页。
- en: 'The final page is created by the **Browse and Download Customers List** component.
    Here, the data of each selected customer is reported in a tile view and can be
    exported into an Excel file. The workflow is available on the KNIME Hub: [https://hub.knime.com/kathrin/spaces/Codeless%20Deep%20Learning%20with%20KNIME/latest/Chapter_11/](https://hub.knime.com/kathrin/spaces/Codeless%20Deep%20Learning%20with%20KNIME/latest/Chapter_11/).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一页由**浏览并下载客户列表**组件创建。在这里，每个选定客户的数据以卡片视图呈现，并可以导出为 Excel 文件。该工作流可在 KNIME Hub
    上找到：[https://hub.knime.com/kathrin/spaces/Codeless%20Deep%20Learning%20with%20KNIME/latest/Chapter_11/](https://hub.knime.com/kathrin/spaces/Codeless%20Deep%20Learning%20with%20KNIME/latest/Chapter_11/)。
- en: Tip
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'To open the interactive view of a component already in KNIME Analytics Platform,
    after execution, right-click the component and select **Interactive View: <name
    of the component>**.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开 KNIME Analytics Platform 中已存在组件的交互视图，执行后，右键点击该组件并选择**交互视图：<组件名称>**。
- en: To summarize, again each of these pages is created by one component in the workflow
    and displays its interactive view. Components and their composite views are then
    the key elements to build workflows for web applications.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，每一页都是由工作流中的一个组件创建的，并显示其交互视图。组件及其复合视图是构建 web 应用工作流的关键元素。
- en: Let's now see how a composite view can be created and customized.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何创建和自定义一个复合视图。
- en: Creating Composite Views
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建复合视图
- en: The composite view of a component collects all interactive views from the **View**
    and **Widget** nodes contained inside.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的复合视图收集了其中包含的**视图**和**小部件**节点的所有交互视图。
- en: Tip
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: To create a new component, you must select the nodes to include inside the component,
    then right-click and select the **Create Component...** option.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新组件，您必须选择要包含在组件中的节点，然后右键点击并选择**创建组件...**选项。
- en: 'Before looking deeper into the **View** and **Widget** nodes, let''s have a
    look inside the **Select Customer to Contact** component (*Figure 11.5*):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入查看**视图**和**小部件**节点之前，我们先来看一下**选择要联系的客户**组件（*图 11.5*）：
- en: '![Figure 11.5 – Contents of the Select Customers to Contact component](img/B16391_11_005.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – 选择要联系的客户组件的内容](img/B16391_11_005.jpg)'
- en: Figure 11.5 – Contents of the Select Customers to Contact component
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 选择要联系的客户组件的内容
- en: In the lower-left part of the corresponding page, the end user has the option
    to define a threshold for the churn score via a slider. This interactive slider
    is created by the **Interactive Range Slider Filter Widget** node.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在相应页面的左下角，最终用户可以通过滑块定义流失分数的阈值。这个交互式滑块由**交互式范围滑块筛选器小部件**节点创建。
- en: In the upper-left corner, the option to select the product is created by the
    **Interactive Value Filter Widget** node.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在左上角，选择产品的选项由**交互式值筛选器小部件**节点创建。
- en: In addition, the page shows an interactive scatter plot and an interactive table.
    Those two views are created by the **Scatter Plot** node and the **Table View**
    node, respectively.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，页面展示了一个交互式散点图和一个交互式表格。这两个视图分别由**散点图**节点和**表格视图**节点创建。
- en: As you can see, each widget/view node adds one piece to the final composite
    view and therefore to the corresponding page in WebPortal.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，每个小部件/视图节点为最终的复合视图添加一个元素，因此也为WebPortal中的相应页面添加内容。
- en: Tip
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: In KNIME Analytics Platform, the view of each widget/view node is visible by
    right-clicking the node and selecting **Interactive View:<name of node>**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在KNIME分析平台中，右键点击节点并选择**交互式视图：<节点名称>**，即可查看每个小部件/视图节点的视图。
- en: 'The nodes that can contribute pieces to a composite view can be categorized
    into three groups:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为复合视图贡献元素的节点可分为三类：
- en: '**Widget nodes**'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小部件节点**'
- en: '**View nodes**'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图节点**'
- en: '**Interactive widget nodes**'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互式小部件节点**'
- en: Let's have a look at each category in detail.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看每个类别。
- en: Widget Nodes
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小部件节点
- en: Widget nodes produce a view with an interactive form for setting parameters.
    The newly set parameters are then exported as **flow variables** and can be used
    by other nodes down the line in the workflow.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件节点生成带有交互式表单的视图，用于设置参数。新设置的参数随后作为**流变量**导出，并可以被工作流中其他节点使用。
- en: Tip
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: In [*Chapter 2*](B16391_02_Final_SK_ePUB.xhtml#_idTextAnchor051), *Data Access
    and Preprocessing with KNIME Analytics Platform*, we introduced the concept of
    flow variables and how they can be used to overwrite setting options.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第2章*](B16391_02_Final_SK_ePUB.xhtml#_idTextAnchor051)《使用KNIME分析平台进行数据访问和预处理》中，我们介绍了流变量的概念以及它们如何用于覆盖设置选项。
- en: 'Each widget node is specialized in producing one specific input or interaction
    form, such as string input, integer input, selecting one or many values from a
    list, and more. You can find all the available widget nodes in the Node Repository
    under **Workflow Abstraction** | **Widgets**, as shown in *Figure 11.6*:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 每个小部件节点专门用于生成一种特定的输入或交互表单，如字符串输入、整数输入、从列表中选择一个或多个值等。你可以在节点库的**工作流抽象** | **小部件**中找到所有可用的小部件节点，如*图11.6*所示：
- en: '![Figure 11.6 – Available widget nodes in the Node Repository](img/B16391_11_006.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图11.6 – 节点库中的可用小部件节点](img/B16391_11_006.jpg)'
- en: Figure 11.6 – Available widget nodes in the Node Repository
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6 – 节点库中的可用小部件节点
- en: 'The widget nodes themselves can be divided into three subgroups:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件节点本身可以分为三组：
- en: '**Input widget nodes**: The widget nodes in the *input* category produce an
    input form on a web page, which allows you to input values of different types
    into the workflow – integers, strings, Booleans, doubles, or lists – as well as
    data in other formats, such as date&time or credentials.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入小部件节点**：*输入*类别中的小部件节点在网页上生成一个输入表单，允许你将不同类型的值输入到工作流中——整数、字符串、布尔值、双精度数或列表——以及其他格式的数据，如日期和时间或凭证。'
- en: '**Selection widget nodes**: The widget nodes in the *selection* category produce
    web forms to select values from a list, such as choosing a specific column from
    a data table, including/excluding multiple columns from a dataset, or selecting
    one or more values to filter data from a table.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择小部件节点**：*选择*类别中的小部件节点生成网页表单，用于从列表中选择值，例如从数据表中选择特定列、包括/排除数据集中的多列，或选择一个或多个值以从表中筛选数据。'
- en: '**Output widget nodes**: These widget nodes add custom text, links, or images
    to the composite view.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出小部件节点**：这些小部件节点向复合视图中添加自定义文本、链接或图像。'
- en: 'As an example, *Figure 11.7* shows the **Single Selection Widget** node and
    its configuration window:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个例子，*图11.7*展示了**单选小部件**节点及其配置窗口：
- en: '![Figure 11.7 – The Single Selection Widget node and its configuration window
    ](img/B16391_11_007.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图11.7 – 单选小部件节点及其配置窗口](img/B16391_11_007.jpg)'
- en: Figure 11.7 – The Single Selection Widget node and its configuration window
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7 – 单选小部件节点及其配置窗口
- en: 'Most of the widget nodes share some important settings, such as **Label**,
    **Description**, and **Variable Name**:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数小部件节点共享一些重要的设置，如**标签**、**描述**和**变量名**：
- en: '**Label**: This creates a label on top of the form created by the widget node.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**：这将在小部件节点创建的表单顶部创建一个标签。'
- en: '**Description**: This value is shown as a tooltip on the widget form.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：该值作为工具提示显示在小部件表单上。'
- en: '**Variable Name**: This gives the name of the flow variable created by the
    node.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量名**：这为节点创建的流程变量提供名称。'
- en: 'Let''s have a look at the additional configuration settings for the **Single
    Selection Widget** node (*Figure 11.7*):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下**单选小部件**节点的附加配置设置（*图 11.7*）：
- en: '**Selection Type**: Defines the objects used for the selection: a drop-down
    menu, vertical or horizontal radio buttons, or a list'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择类型**：定义用于选择的对象：下拉菜单、垂直或水平单选按钮，或列表。'
- en: '**Possible Choices**: Defines the list of available values to choose from'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可能的选择**：定义可供选择的值列表。'
- en: '**Default Value**: Assigns an initial default value to the selection operation'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认值**：为选择操作分配一个初始默认值。'
- en: The standard widget node produces either some flow variables or a table as output,
    which can be used in the downstream nodes in the workflow. A special set of widget
    nodes are the interactive widget nodes.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 标准小部件节点产生一些流程变量或一个表格作为输出，可以在工作流中的下游节点中使用。一组特殊的小部件节点是交互式小部件节点。
- en: View Nodes
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视图节点
- en: View nodes visualize data through interactive charts, plots, and tables.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 视图节点通过交互式图表、图形和表格可视化数据。
- en: '*Figure 11.8* shows you an overview of the available view nodes in the Node
    Repository:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.8* 向您展示了节点库中可用的视图节点概览：'
- en: '![Figure 11.8 – Available view nodes in the Node Repository](img/B16391_11_008.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.8 – 节点库中可用的视图节点](img/B16391_11_008.jpg)'
- en: Figure 11.8 – Available view nodes in the Node Repository
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – 节点库中可用的视图节点
- en: If multiple view nodes are present inside a component, their views interact
    with each other in the resulting component view; for example, via selection, data
    points selected in the view of one node can be selected or even isolated in the
    view of another node.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个组件中包含多个视图节点，它们的视图将在生成的组件视图中相互交互；例如，通过选择，在一个节点的视图中选择的数据点可以在另一个节点的视图中被选择或甚至被隔离。
- en: Tip
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The **Plotly** nodes and the **JavaScript** nodes in the **Labs** category offer
    even more interactive options to visualize your data in composite views. Views
    from (local) nodes in the **Local (Swing)** category cannot be integrated into
    the composite view of a component.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**Plotly**节点和**JavaScript**节点位于**实验室**类别中，提供更多的交互式选项，用于在复合视图中可视化数据。来自**本地（Swing）**类别中（本地）节点的视图不能集成到组件的复合视图中。'
- en: Interactive Widget Nodes
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交互式小部件节点
- en: '**Interactive widget** nodes are special widget nodes. They implement filter
    events and feed view nodes. During execution, changes in the interactive widget
    nodes are reflected immediately in the views of the subsequent view nodes.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**交互式小部件**节点是特殊的小部件节点。它们实现过滤事件并提供视图节点。在执行过程中，交互式小部件节点的变化会立即反映在后续视图节点的视图中。'
- en: 'At the time of writing, KNIME Analytics Platform offers two interactive widget
    nodes: the **Interactive Range Slider Filter Widget** node and the **Interactive
    Value Filter Widget** node.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，KNIME Analytics Platform 提供了两个交互式小部件节点：**交互式范围滑块过滤器小部件**节点和**交互式值过滤器小部件**节点。
- en: These nodes can be used to trigger updates in the composite view. In the configuration
    window of downstream view nodes, we can set whether or not this node should listen
    to the filter events from previous interactive widget nodes. If yes, the view
    produced by the view node is immediately updated when settings in the filter event
    of the previous interactive widget nodes change.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些节点可用于触发复合视图中的更新。在下游视图节点的配置窗口中，我们可以设置该节点是否应监听先前交互式小部件节点的过滤事件。如果设置为“是”，当先前交互式小部件节点的过滤事件中的设置发生变化时，由视图节点生成的视图会立即更新。
- en: In comparison to the standard widget nodes, these two nodes trigger direct filter
    events in the open composite view or web page. The flow variable created by a
    standard widget node can be used by a subsequent node but doesn't trigger direct
    changes in the open page or composite view.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准小部件节点相比，这两个节点会在打开的复合视图或网页中触发直接的过滤事件。标准小部件节点创建的流程变量可以被后续节点使用，但不会在打开的页面或复合视图中触发直接变化。
- en: Now that we have an overview of the nodes available to build a composite view,
    let's customize the composite view of a component through some layout options.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经概览了可用于构建复合视图的节点，让我们通过一些布局选项来定制一个组件的复合视图。
- en: Defining the Layout of a Composite View
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义复合视图的布局
- en: You can define a layout for the composite view of every component containing
    at least one widget or view node.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为每个包含至少一个小部件或视图节点的组件定义复合视图的布局。
- en: Tip
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: To open a component in a new tab in the workflow editor, you must press *Ctrl*
    + double-click the component or right-click the component and select **Component**
    | **Open**.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要在工作流编辑器中以新标签页打开一个组件，必须按住*Ctrl*键并双击组件，或者右键点击组件并选择**组件** | **打开**。
- en: 'The layout in a composite view is set via the **layout editor** from inside
    the component. After opening the content of the component in a new tab in the
    workflow editor, click the layout editor button at the rightmost side of the top
    toolbar, as shown in *Figure 11.9*:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 复合视图中的布局通过组件内部的**布局编辑器**进行设置。在工作流编辑器中新标签页打开组件内容后，点击顶部工具栏最右侧的布局编辑器按钮，如*图 11.9*所示：
- en: '![Figure 11.9 – Toolbar with layout editor button to the far right](img/B16391_11_009.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.9 – 带有布局编辑器按钮的工具栏，位于最右侧](img/B16391_11_009.jpg)'
- en: Figure 11.9 – Toolbar with layout editor button to the far right
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 带有布局编辑器按钮的工具栏，位于最右侧
- en: 'Upon clicking on the layout editor button, the visual layout editor (*Figure
    11.10*) opens:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 单击布局编辑器按钮后，打开可视化布局编辑器（*图 11.10*）：
- en: '![Figure 11.10 – Visual layout editor](img/B16391_11_010.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.10 – 可视化布局编辑器](img/B16391_11_010.jpg)'
- en: Figure 11.10 – Visual layout editor
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – 可视化布局编辑器
- en: The layout editor uses a grid structure with rows and columns.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 布局编辑器使用具有行和列的网格结构。
- en: On the left, there are row templates with different numbers of columns and a
    list of all the still-unplaced views. On the right, there is the layout editor
    itself.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧有不同列数的行模板，以及所有尚未放置的视图列表。右侧是布局编辑器本身。
- en: You can change the layout by adding new row templates via drag and drop from
    the template list on the left to the layout editor on the right. To add a new
    empty column, click the **+** button in the layout editor. Columns inside a row
    can be manually resized.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将新行模板从左侧的模板列表拖放到右侧的布局编辑器来更改布局。要添加一个新的空列，请点击布局编辑器中的**+**按钮。行中的列可以手动调整大小。
- en: Empty cells in the layout editor can be populated by dragging and dropping views
    from the list of unused views into the cells in the layout editor.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 布局编辑器中的空单元格可以通过将未使用视图从视图列表中拖放到布局编辑器中的单元格来填充。
- en: The default layout consists of one column only and all views from the widget
    and view nodes are placed in it from top to bottom. To start from a blank canvas,
    click the **clear layout** button in the upper-left corner of the layout editor.
    This clearing action adds all views to the list on the left.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 默认布局仅由一列组成，所有来自小部件和视图节点的视图都从上到下放置在其中。要从空白画布开始，请点击布局编辑器左上角的**清除布局**按钮。此清除操作将所有视图添加到左侧列表中。
- en: Tip
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Node labels (the text below the node) are used in the layout editor to identify
    the views. It is best practice to change the node labels to meaningful descriptions,
    to easily recognize the views in the layout editor.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 节点标签（节点下方的文本）在布局编辑器中用于标识视图。最佳实践是将节点标签更改为有意义的描述，以便在布局编辑器中轻松识别视图。
- en: If you want to exclude the view of a node from the composite view, you can go
    to the first tab of the layout editor, called **Node Usage**, and disable the
    node view for the WebPortal/composite view.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将一个节点的视图从复合视图中排除，可以进入布局编辑器的第一个标签，名为**节点使用**，并禁用WebPortal/复合视图的节点视图。
- en: It is also possible to have nested components, which are a component inside
    a component. If the nested component has a view, this shows up as a node view
    in the layout editor. Thus, you can integrate the view of the nested component
    into your layout as you would do for any other node.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以拥有嵌套组件，即一个组件内嵌另一个组件。如果嵌套组件有视图，它将在布局编辑器中显示为一个节点视图。因此，您可以像处理其他任何节点一样，将嵌套组件的视图集成到您的布局中。
- en: A composite view can be easily beautified – for example, by adding a header
    or a sidebar and styling the text body. You are in luck as there are shared components
    on the KNIME Hub to do that.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 复合视图可以很容易地美化——例如，通过添加一个头部或侧边栏，并对正文进行样式设置。幸运的是，KNIME Hub 上有共享组件可以帮助完成这一点。
- en: '*Figure 11.11* shows the web page before and after the introduction of some
    styling elements using some of the available shared components:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Web page without (left) and with (right) a header, sidebar,
    and additional information in the body of the page](img/B16391_11_011.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – Web page without (left) and with (right) a header, sidebar, and
    additional information in the body of the page
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: You will see some shared components in action at the end of this section when
    we build the cancer cell classification example.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Let's first find out more about shared components.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Shared Components
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, *Creating Composite Views*, we discussed how to use
    components to create composite views and then pages for WebPortal applications.
    Components can also bundle up functionalities that can be reused and shared with
    others via the KNIME Hub and KNIME Server. These functionalities range from simple
    repetitive tasks, such as entering credentials into a database, to more complicated
    tasks, such as optimizing parameters.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: In comparison to metanodes, components have their own configuration window.
    They can be configured without touching the individual nodes inside – providing
    a handy way to hide configuration complexity. Of course, if needed, you can still
    open the component, dive into the details, and make any adjustments relevant to
    your use case.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: To add settings in the configuration window of a component, you can use the
    **configuration nodes**. They work similarly to widget nodes but at the level
    of the configuration window instead of the composite view. You can find them in
    the Node Repository under **Workflow Abstraction** | **Configuration**. Components
    can have a description in the **Description** panel like any KNIME node. From
    inside a component, you can edit the description by clicking on the pen in the
    upper-left corner of the **Description** panel in KNIME Analytics Platform.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: For components to become like all other KNIME nodes, they have to be shared.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: To share a component, you right-click on it and select **Component** | **Share…**.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you decide where to save the template: either on your local workspace,
    on the KNIME Hub, or on KNIME Server.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you can select the link type to link the component instance to the component
    template. The link type defines the location of the component template when checking
    for updates. After choosing the destination of the component template, a dialog
    opens asking you for the link type:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '**Create absolute link**: The workflow uses the absolute path when looking
    for the component template.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create mountpoint-relative link**: The workflow uses the relative path starting
    from the selected mountpoint when looking for the component template.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create workflow-relative link**: The workflow uses a relative path starting
    from the current workflow folder when looking for the component template.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Don''t create link with shared instance**: A component template is created
    but is not linked to the current instance.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you deploy a workflow to KNIME Server, make sure that all link types on
    the component instances also work when on the server.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To create an instance of a shared component, simply drag and drop the component
    template from the KNIME Hub or KNIME Explorer to the workflow editor. Newly created
    instances are read-only and link to the corresponding shared component.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Each time the workflow is started, KNIME Analytics Platform searches for possible
    updates of the component template and if there are any, proposes to also update
    the instance. This has the advantage that if something changes in the component
    template, the changes are automatically reflected in the instances.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Being read-only, new instances cannot be edited. You need to disconnect the
    instance from the template first in order to change its content. To do that, you
    need to right-click on the component instance and select **Component** | **Disconnect
    Link**.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of public shared components on the EXAMPLES Server or the KNIME
    Hub. You will also find some shared components in the workflow group for this
    chapter on the KNIME Hub.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Now that you are familiar with shared components and the WebPortal, let's have
    a look at the deployment example of cancer cell classification.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Building a WebPortal Application for Cancer Cell Classification
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's go back to the cancer data and the workflow for cancer cell classification
    described in [*Chapter 9*](B16391_09_Final_NM_ePUB.xhtml#_idTextAnchor316), *Convolutional
    Neural Networks for Image Classification*. In this section, we will show how to
    deploy a trained deep learning model as a web application using KNIME WebPortal.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'The goal here is to produce a web application for pathologists who are not
    familiar with KNIME Analytics Platform and data science in general. It should
    help them in their daily routine by suggesting a cancer classification during
    the analysis of histopathology images. An additional requirement is the option
    to upload multiple images in sequence without restarting the application. *Figure
    11.12* shows you the workflow implementing the application. You can download the
    workflow from the KNIME Hub: [https://hub.knime.com/kathrin/spaces/Codeless%20Deep%20Learning%20with%20KNIME/latest/Chapter_11/](https://hub.knime.com/kathrin/spaces/Codeless%20Deep%20Learning%20with%20KNIME/latest/Chapter_11/).'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s focus first on the middle part of the workflow: the loop body inside
    the annotation box:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Deployment workflow to score new histopathology images from
    a web browser](img/B16391_11_012.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – Deployment workflow to score new histopathology images from a
    web browser
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'At each iteration, one image is uploaded, the classification is produced, and
    two web pages are presented to the pathologist. The loop takes care of the iterations
    and the two components in the loop body – the **Upload Image** component and the
    **View Results** component – of the web pages:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 每次迭代时，都会上传一张图像，生成分类，并向病理学家展示两个网页。循环负责迭代和循环体中的两个组件——**上传图像**组件和**查看结果**组件——的网页：
- en: '![Figure 11.13 – Workflow inside the Upload Image component and the webpage
    created by it](img/B16391_11_013.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图11.13 – 上传图像组件内的工作流及其创建的网页](img/B16391_11_013.jpg)'
- en: Figure 11.13 – Workflow inside the Upload Image component and the webpage created
    by it
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.13 – 上传图像组件内的工作流及其创建的网页
- en: The loop body starts with the **Upload Image** component, which creates the
    first web page of the web application. You can see the created page as well as
    the inside of the component in *Figure 11.13*.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 循环体从**上传图像**组件开始，该组件创建了Web应用程序的第一个网页。您可以在*图11.13*中看到创建的页面以及组件内部的情况。
- en: The header of the web page, with the KNIME logo and the navigation path, is
    created by the shared component named **WebPortal Header**. For WebPortal applications
    with many steps, a header like this helps the end user to get an overview of the
    current step (in frame), the steps already covered (yellow boxes or light-gray
    boxes), and the steps yet to come (gray boxes).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 网页的头部，由KNIME徽标和导航路径组成，是由名为**WebPortal Header**的共享组件创建的。对于具有多个步骤的WebPortal应用程序，这样的头部有助于最终用户概览当前步骤（在框架中）、已经完成的步骤（黄色框或浅灰色框）以及尚未完成的步骤（灰色框）。
- en: 'The little green arrow in the lower-left corner of the **WebPortal Header**
    component indicates that this component instance is linked to a shared component
    template. The **WebPortal Header** component comes with a configuration window
    (*Figure 11.14*), resulting from configuration nodes in it. In this configuration
    window, you can define the step labels and whether to outline the current step
    with a yellow frame:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**WebPortal Header**组件左下角的小绿箭头表示该组件实例与共享组件模板相连。**WebPortal Header**组件带有一个配置窗口（*图11.14*），这是由其中的配置节点生成的。在该配置窗口中，您可以定义步骤标签，并设置是否用黄色框突出显示当前步骤：'
- en: '![Figure 11.14 – Configuration window of the WebPortal Header component](img/B16391_11_014.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图11.14 – WebPortal Header组件的配置窗口](img/B16391_11_014.jpg)'
- en: Figure 11.14 – Configuration window of the WebPortal Header component
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.14 – WebPortal Header组件的配置窗口
- en: The web page for the **Upload Image** step includes just one item to upload
    the next image. By clicking on the **Choose File** button, the pathologist uploads
    the file with the histopathology slide image to a temporary local folder. This
    item is created by the **File Upload Widget** node. The output variable of the
    node contains the file path to the selected image in a temporary folder.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**上传图像**步骤的网页仅包含一个项目，用于上传下一张图像。通过点击**选择文件**按钮，病理学家将含有组织病理切片图像的文件上传到临时本地文件夹。该项目由**文件上传控件**节点创建。该节点的输出变量包含指向临时文件夹中所选图像的文件路径。'
- en: In the workflow in *Figure 11.12,* the flow variable is written into a table
    using the **Variable to Table Row** node. The **Load and preprocess images** metanode
    performs the same preprocessing steps as for training, as described in [*Chapter
    9*](B16391_09_Final_NM_ePUB.xhtml#_idTextAnchor316), *Convolutional Neural Networks
    for Image Classification*. That is, it loads the image, normalizes it, splits
    it into patches of 64 x 64 pixels, and swaps some dimensions to fit the VGG16
    model used as the starting point for the transfer learning approach.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图11.12*中的工作流中，流变量通过**Variable to Table Row**节点写入一个表格。**加载和预处理图像**元节点执行与训练时相同的预处理步骤，如在[*第9章*](B16391_09_Final_NM_ePUB.xhtml#_idTextAnchor316)中所述，*卷积神经网络用于图像分类*。也就是说，它加载图像，进行归一化处理，将其分割为64x64像素的小块，并交换某些维度，以适应作为迁移学习起点的VGG16模型。
- en: Next, the workflow reads the trained deep learning network using the **Keras
    Network Reader** node and applies it to the image patches with the **Keras Network
    Executor** node.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，工作流使用**Keras网络读取器**节点读取训练好的深度学习网络，并通过**Keras网络执行器**节点将其应用于图像小块。
- en: In the **Prepare Visualization** metanode, the image patches are assigned a
    color, according to the probability of belonging to one of the three cancer classes.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在**准备可视化**元节点中，根据图像属于三类癌症之一的概率，为图像小块分配颜色。
- en: 'Finally, the results are visualized using the last component, named **View
    Results**. *Figure 11.15* shows you the workflow inside the component and the
    corresponding web page obtained when executing the workflow in the web browser:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.15 – Workflow snippet inside the View Results component and the
    web page created by it](img/B16391_11_015.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: Figure 11.15 – Workflow snippet inside the View Results component and the web
    page created by it
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: In the **View Results** component, we again find the shared **WebPortal Header**
    component, to create the page header, this time with the **Upload Image** box
    in yellow (past steps) and the **Results** box with the yellow frame (current
    step).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: The **Table to Image** node converts the image contained in the first row of
    the selected column into an image object. This image object is then fed into the
    **Image Output Widget** node to display it inside a composite view.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, the pathologist must decide whether to upload another image. This selection
    part is implemented in the web page via radio buttons and in the workflow by the
    **Single Selection Widget** node.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'This node produces a flow variable at its output port with the selected option:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.16 – Configuration window of the Variable Condition Loop End node](img/B16391_11_016.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: Figure 11.16 – Configuration window of the Variable Condition Loop End node
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: This whole snippet, from **Upload Image** to **View Results**, is wrapped in
    a loop, to meet the additional requirement to give the pathologist the option
    to upload multiple images. The last radio button selection is used as the loop
    stopping criterion.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Remember that a loop always needs a loop start and a loop end node. In between
    these two nodes, there is the loop body, which is executed at each loop iteration.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: There are many different loop start and loop end nodes available. Some, for
    example, use only a subset of rows at each iteration (**Group Loop Start** and
    **Chunk Loop Start**) and some only a subset of the columns (**Column List Loop
    Start**).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: The workflow in *Figure 11.12* uses the `keepgoing` – created by the `No`. As
    the **Generic Loop Start** node always needs an input table, an empty table is
    created with the **Empty Table Creator** node to feed the node.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: After deploying this workflow to a KNIME server and running it on KNIME WebPortal,
    the pathologist can easily upload new images and get the result from the automatic
    classification.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned how to build a web application using the KNIME
    software and how to deploy a deep learning network as a web application.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Let's now discover how deep learning networks can be deployed as REST services.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Building a Web Service with the REST Interface
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to build **REST** services using the KNIME
    software. As a practical example, we will walk through the deployment workflow
    of the sentiment analysis example of [*Chapter 7*](B16391_07_Final_NM_ePUB.xhtml#_idTextAnchor230),
    *Implementing NLP Applications*.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: The KNIME Server REST API offers an interface for non-KNIME applications to
    communicate with KNIME Server via simple HTTP requests. The main benefit of **RESTful
    web services** is the ease of integration of the application into the company
    IT landscape. Self-contained and isolated applications can call each other and
    exchange data via the REST interface. In this way, it becomes easier to add new
    applications to the ecosystem.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Any workflow uploaded on KNIME Server is automatically available via the **REST
    API**. This allows you to seamlessly deploy KNIME workflows as web services via
    the REST API and integrate them into the infrastructure of your data science lab.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: In the sentiment analysis example, we want to deploy the deep learning network
    as a **REST service**. In this way, external applications – for example, a website
    or a mobile app – can send some text to the REST service and get back the predicted
    sentiment.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Let's quickly look at the steps required to build a deployment workflow as a
    REST service in KNIME Analytics Platform.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Building a REST Service Workflow
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the example of sentiment prediction, the goal is to build a REST service
    with an input, the new movie reviews, and an output, the sentiment predictions.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: When building a REST service with an input and an output, we need to define
    the structure of the inputs and outputs. In KNIME Analytics Platform, this can
    be done via the **container** input and output nodes.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Not every REST service has inputs and outputs. For example, a REST service that
    connects to a database to get the most recent data only has outputs. A REST service
    that concludes the process by writing the results to a database does not need
    to output any results.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'KNIME Analytics Platform has a variety of input nodes that can be used to define
    the structure of the input to the REST API. You can find these nodes in the Node
    Repository under **Workflow Abstraction** | **Workflow Invocation** (*Figure 11.17*):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.17 – Available container nodes to define the REST API](img/B16391_11_017.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
- en: Figure 11.17 – Available container nodes to define the REST API
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in *Figure 11.17*, there are four **Container Input** nodes –
    for credentials, for one data row only, for a data table, or for flow variables.
    A table input allows you to send either a single data row or multiple data rows
    to the web service. On the other hand, a row input sends only one single data
    row.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Container Input (Row)** and **Container Input (Table)** nodes have an
    optional input port. This port receives a template data table and based on that
    table, defines the input structure. This template serves two purposes: first,
    if no input table is provided when the workflow is called via the REST API, the
    values from the template are used as default input to execute the workflow. Second,
    the table is used to define the input structure that the web service expects.
    If the structure of the current input differs from the template, the web service
    will produce an error message. The advantage of this template technique is that
    the input is parsed automatically and converted into the specified types.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, to define the output of the REST service, you can use one of the
    **Container Output** nodes: either the **Container Output (Row)** or the **Container
    Output (Table)** node.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: For our deployment workflow, to classify one movie review at a time, we used
    a **Container Input (Row)** node to define the input structure and a **Container
    Output (Row)** node to define the output structure to the REST service. In order
    to classify one or more movie reviews at a time, the **Container Input (Table)**
    node and the **Container Output (Table)** node could be used.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to create a workflow that can be deployed as a REST service:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Automatically with the **Integrated Deployment** feature
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually by building the workflow from scratch
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In [*Chapter 10*](B16391_10_Final_VK_ePUB.xhtml#_idTextAnchor367), *Deploying
    a Deep Learning Network*, we introduced the **Integrated Deployment** extension
    of KNIME Analytics Platform, which allows you to capture parts of the training
    workflow and deploy them automatically. Even there, as an example, we used the
    sentiment analysis case study. In *Figure 11.18*, you can see the automatically
    created workflow via **Integrated Deployment**, with a **Container Input (Table)**
    node and a **Container Output (Table)** node to define the input and output data
    structures:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.18 – Automatically created deployment workflow from Chapter 10,
    Deploying a Deep Learning Network](img/B16391_11_018.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
- en: Figure 11.18 – Automatically created deployment workflow from [*Chapter 10*](B16391_10_Final_VK_ePUB.xhtml#_idTextAnchor367),
    Deploying a Deep Learning Network
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 10*](B16391_10_Final_VK_ePUB.xhtml#_idTextAnchor367), *Deploying
    a Deep Learning Network*, we saved this automatically created workflow locally
    and we triggered its execution through a **Call Workflow (Table Based)** node.
    Instead of saving the workflow locally, we could deploy it on a KNIME server.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'The other option is to build a REST service manually from scratch. In this
    case, we have to provide the dictionary and the trained model (*Figure 11.19*):'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.19 – Manually built REST service deployment workflow](img/B16391_11_019.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
- en: Figure 11.19 – Manually built REST service deployment workflow
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it looks really similar to the previous workflow in *Figure
    11.18*, with the only difference that it uses a **Table Reader** node and a **Keras
    Network Reader** node to read the dictionary and the trained model. In addition,
    a template table has been inserted to define the input data structure to the REST
    API.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: We have the REST service. Let's see how we can call it.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Calling a REST Service
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To call the deployed workflow as a REST service from an external application,
    you need to know the path to the REST service and the expected input data structure.
    KNIME Server can show you the API definition in your browser. Simply right-click
    the deployed workflow on the server and select **Show API definition**. A browser
    window opens showing the REST API definition for this specific workflow (*Figure
    11.20*):'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.20 – Documentation of the REST API using Swagger](img/B16391_11_020.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
- en: Figure 11.20 – Documentation of the REST API using Swagger
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: This web page is created using an open source framework called **Swagger**.
    Swagger has been integrated into KNIME Server to document the REST API, to easily
    explore the different HTTP requests and test them.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: For example, you could test how to trigger the execution of the REST service
    with a **POST** request. By selecting the POST request, Swagger shows you an overview
    of the possible parameters, the schema for the input data, and the URL to call.
    You can also try it out by clicking on the **Try it out** button.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: You can also trigger the execution of the REST service from another workflow
    using the **Call Workflow (Table Based)** node. This node calls local or remote
    workflows, sending the provided input table and outputting the REST service response.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow in *Figure 11.21* shows how to trigger the execution of a REST
    service on KNIME Server:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.21 – This workflow triggers the execution of a REST service on
    KNIME Server](img/B16391_11_021.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
- en: Figure 11.21 – This workflow triggers the execution of a REST service on KNIME
    Server
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: If you want to run a workflow on KNIME Server, you have to ensure that the **Call
    Workflow** node is connected to the server. To connect to a KNIME server, you
    can use the **KNIME Server Connection** node. In its configuration window, you
    need to provide the address to the server by either typing it in manually or by
    selecting a mountpoint and entering the credentials.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: In the configuration window of the **Call Workflow (Table Based)** node, you
    get the list of all the workflows deployed on KNIME Server by clicking on the
    **Browse workflows** button. After selecting a workflow, in the advanced settings,
    you can assign the input table to the input of the called workflow and the output
    table to the output of the called workflow. This feature comes in very handy when
    the deployed workflow has many input nodes.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned how to deploy a workflow as a REST service
    on KNIME Server. Let's now conclude with some tips and tricks from our own experience.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: KNIME Tips and Tricks
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout the book, we covered many case studies, implemented using KNIME
    Analytics Platform. In the KNIME Hub space of this book, you can find these workflows
    and you can use them as a starting point for your deep learning projects: [https://hub.knime.com/kathrin/spaces/Codeless%20Deep%20Learning%20with%20KNIME/latest/](https://hub.knime.com/kathrin/spaces/Codeless%20Deep%20Learning%20with%20KNIME/latest/).
    In this last section, we want to share some tips and tricks to work with deep
    learning in KNIME Analytics Platform.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with data shuffling for training.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Shuffling Data during Training
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When training neural networks, for faster convergence of the training process
    and to avoid overfitting, it is recommended to shuffle the training data before
    each epoch.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: To do that, make sure you activate the **Shuffle training data before each epoch**
    checkbox in the **Advanced** tab in the configuration window of the **Keras Network
    Learner** node.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Using Batch Normalization
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Batch normalization is a technique that standardizes the data in each batch.
    This has the effect of stabilizing the learning process and dramatically reducing
    the number of training epochs required to train deep networks.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: To add batch normalization to your network, you can use the **Keras Batch Normalization
    Layer** node.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Keeping Your Workflow Clean and Structured
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make it easy to maintain your workflows, it is important to document and
    structure them in logical, easy-to-understand blocks:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '**Use metanodes and components**: To keep large workflows tidy and clean, it
    is recommended to hide the implementation details and some of the complexity inside
    metanodes or components. Indeed, to make a workflow easily understandable at first
    glance, you can create one metanode or component for each step in the project,
    such as data access, data preprocessing, model training, and model evaluation.
    Inside each metanode/component, you can have further metanodes and components
    for different sub-steps, such as, for example, different preprocessing steps or
    network layers.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Documenting a workflow**: KNIME Analytics Platform offers you three ways
    to document a workflow:'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**a) Node labels**'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**b) Annotation boxes**'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**c) Workflow description**'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Node labels and annotation boxes help you and other users to understand at a
    glance the workflow's tasks and subtasks easily.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to add meta-information to your workflow through the **Description**
    panel. To do so, click anywhere in the workflow editor (not on a node). The **Description**
    view changes to a workflow description with meta-information about the workflow:
    the title, description, and related links and tags.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Using the GroupBy Node and Pivoting Node to Avoid Loops
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The execution of loops can be slow as the nodes must be executed at each iteration.
    Often, however, no doubt due to our programming background, we overdo the use
    of loops and use them even when more efficient alternatives are available.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, some loops could be avoided by simply using the following aggregation
    nodes: **GroupBy**, **Pivoting**, **Ungroup**, and **Unpivoting**. **Aggregation**
    nodes often perform the same task as a loop and are much more efficient in terms
    of execution speed.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the Execution Order
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you have parallel branches in a workflow, it is sometimes important to
    define an execution order. *Figure 11.22* shows you a very simple example where
    the order of writing tables into Excel sheets is enforced:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.22 – In this workflow, the execution order is forced by using a
    flow variable connection](img/B16391_11_022.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
- en: Figure 11.22 – In this workflow, the execution order is forced by using a flow
    variable connection
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the **Excel Sheet Appender (XLS)** node should be executed after
    the **Excel Writer (XLS)** node. By using a flow variable connection from the
    flow variable output port of the **Excel Writer (XLS)** node to the flow variable
    input port of the **Excel Sheet Appender (XLS)** node, we force the execution
    of the **Excel Sheet Appender (XLS)** node to start only after the execution of
    the **Excel Writer (XLS)** node is finished.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned about two more options to deploy your trained
    deep learning networks: web applications and REST services. We finished the chapter
    – and the book – with some tips and tricks to successfully work with deep learning
    in KNIME Analytics Platform.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: In the first section of this chapter, you learned how to build web applications
    using KNIME WebPortal of KNIME Server so that end users can execute their workflows
    and interact with the web pages comfortably from a web browser.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Next, you learned how to build, deploy, and call REST services using KNIME Server
    to integrate your deep learning networks into the company's IT infrastructure.
    You learned about the many options to define the input and output data structure
    of the REST service, how to inspect the REST API using the open source Swagger
    tool, and how to trigger the execution of a REST service from within KNIME Analytics
    Platform.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: In the last section, we collated some tips and tricks from our own experience
    that might turn out to be helpful when working with deep learning in KNIME Analytics
    Platform.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we think that you are well equipped to start building and deploying
    your own workflows to train and use deep learning networks suitable to your own
    business cases and data with the KNIME software.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Questions and Exercises
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which kind of nodes can you use to add input fields to a composite view?
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Configuration nodes
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Widget nodes
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) View nodes
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Container input nodes
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How can you create a composite view?
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) By selecting some nodes, right-clicking, and selecting **Create Metanode**
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) By selecting some view or widget nodes, right-clicking, and selecting **Create
    Metanode**
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) By selecting some view or widget nodes, right-clicking, and selecting **Create
    Component**
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) By right-clicking anywhere in the workflow and selecting **Create Component**
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How can you define the layout of a composite view?
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Right-click on a component and select **Component** | **Layout**.
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Double-click on a component and go to the **Layout** tab in the configuration
    window.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Go inside a component and click on the **Layout** button in the toolbar.
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Right-click on a component and select **Layout**.
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which node can be used to define the input and output of a REST service?
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Configuration nodes
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Widget nodes
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) View nodes
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Container nodes
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
