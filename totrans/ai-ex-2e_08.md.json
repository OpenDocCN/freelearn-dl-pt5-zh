["```py\nh1=(x1*w1)+(x2*w4) #II.A.weight of hidden neuron h1\nh2=(x2*w3)+(x1*w2) #II.B.weight of hidden neuron h2 \n```", "```py\n#Solution to the XOR implementation with\n#a feedforward neural network(FNN)\n#I.Setting the first weights to start the process\nw1=0.5;w2=0.5;b1=0.5\nw3=w2;w4=w1;b2=b1\n#II.hidden layer #1 and its output\nh1=(x1*w1)+(x2*w4) #II.A.weight of hidden neuron h1\nh2=(x2*w3)+(x1*w2) #II.B.weight of hidden neuron h2\n#III.threshold I, hidden layer 2\nif(h1>=1): h1=1\nif(h1<1): h1=0\nif(h2>=1): h2=1\nif(h2<1): h2=0\nh1= h1 * -b1\nh2= h2 * b2\n#IV.Threshold II and Final OUTPUT y\ny=h1+h2\nif(y>=1): y=1\nif(y<1): y=0\n#V.Change the critical weights and try again until a solution is found\nw2=w2+0.5\nb1=b1+0.5 \n```", "```py\n#FEEDFORWARD NEURAL NETWORK(FNN) WITH BACK PROPAGATION SOLUTION FOR XOR\nresult=[0,0,0,0] #trained result\ntrain=4 #dataset size to train \n```", "```py\n#II hidden layer 1 and its output\ndef hidden_layer_y(epoch,x1,x2,w1,w2,w3,w4,b1,b2,pred,result):\n    h1=(x1*w1)+(x2*w4) #II.A.weight of hidden neuron h1\n    h2=(x2*w3)+(x1*w2) #II.B.weight of hidden neuron h2\n#III.threshold I,a hidden layer 2 with bias\n    if(h1>=1):h1=1;\n    if(h1<1):h1=0;\n    if(h2>=1):h2=1\n    if(h2<1):h2=0\n    h1= h1 * -b1\n    h2= h2 * b2\n\n#IV. threshold II and OUTPUT y\n    y=h1+h2\n    if(y<1 and pred>=0 and pred<2):\n        result[pred]=1\n    if(y>=1 and pred>=2 and pred<4):\n        result[pred]=1 \n```", "```py\n#I Forward and backpropagation\nfor epoch in range(50):\n    if(epoch<1):\n        w1=0.5;w2=0.5;b1=0.5\n    w3=w2;w4=w1;b2=b1 \n```", "```py\n#I.A forward propagation on epoch 1 and IV.backpropagation starting epoch 2\n    for t in range (4):\n        if(t==0):x1 = 1;x2 = 1;pred=0\n        if(t==1):x1 = 0;x2 = 0;pred=1\n        if(t==2):x1 = 1;x2 = 0;pred=2\n        if(t==3):x1 = 0;x2 = 1;pred=3\n        #forward propagation on epoch 1\n        hidden_layer_y(epoch,x1,x2,w1,w2,w3,w4,b1,b2,pred,result) \n```", "```py\n if(convergence<0):w2+=training_step;b1=w2 \n```", "```py\nepoch: 10 optimization 0 w1: 0.5 w2: 1.0 w3: 1.0 w4: 0.5 b1: -1.0 b2: 1.0 \n```", "```py\n convergence=sum(result)-train #estimating the direction of the slope\n    if(convergence>=-0.00000001): break \n```", "```py\n h1= h1 * -b1\n    h2= h2 * b2\n    print(h1,h2) \n```", "```py\nlinearly separability through cartesian training -1.0000000000000004 1.0000000000000004\nlinearly separability through cartesian training -0.0 0.0\nlinearly separability through cartesian training -0.0 1.0000000000000004\nlinearly separability through cartesian training -0.0 1.0000000000000004\nepoch: 10 optimization 0 w1: 0.5 w2: 1.0 w3: 1.0 w4: 0.5 b1: -1.0 b2: 1.0 \n```", "```py\n#IV. threshold II and OUTPUT y\n    y=h1+h2 # logical separation\n    if(y<1 and pred>=0 and pred<2):\n        result[pred]=1\n    if(y>=1 and pred>=2 and pred<4):\n        result[pred]=1 \n```", "```py\n w1=0.5;w2=1;b1=1\n    w3=w2;w4=w1;b2=b1\n    s1=random.randint(1,500000)#choice in one set s1\n    s2=random.randint(1,500000)#choice in one set s2 \n```", "```py\n x1=random.randint(0, 1)#property of choice:size smaller=0\n    x2=random.randint(0, 1)#property of choice :size bigger=1\n    hidden_layer_y(x1,x2,w1,w2,w3,w4,b1,b2,result) \n```", "```py\n#II hidden layer 1 and its output\ndef hidden_layer_y(x1,x2,w1,w2,w3,w4,b1,b2,result):\n    h1=(x1*w1)+(x2*w4) #II.A.weight of hidden neuron h1\n    h2=(x2*w3)+(x1*w2) #II.B.weight of hidden neuron h2\n#III.threshold I,a hidden layer 2 with bias\n    if(h1>=1):h1=1\n    if(h1<1):h1=0\n    if(h2>=1):h2=1\n    if(h2<1):h2=0\n    h1= h1 * -b1\n    h2= h2 * b2\n#IV. threshold II and OUTPUT y\n    y=h1+h2\n    if(y<1):\n        result[0]=0\n    if(y>=1):\n        result[0]=1 \n```", "```py\nfor element in range(1000000):\n    ...(a block of code is here in the program)...\n    if(result[0]>0):\n        subsets+=1\n        print(\"Subset:\",subsets,\"size subset #\",x1,\" and \",\"size subset #\",x2,\"result:\",result[0],\"order #\",\" and \",s1,\"order #\",s2)\n    if(subsets>=8333):\n        break \n```", "```py\nSubset: 8330 size subset # 1 and size subset # 0 result: 1 order # and 53154 order # 14310\nSubset: 8331 size subset # 1 and size subset # 0 result: 1 order # and 473411 order # 196256\nSubset: 8332 size subset # 1 and size subset # 0 result: 1 order # and 133112 order # 34827\nSubset: 8333 size subset # 0 and size subset # 1 result: 1 order # and 470291 order # 327392 \n```"]