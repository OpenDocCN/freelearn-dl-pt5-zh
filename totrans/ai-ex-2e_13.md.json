["```py\n    import tensorflow as tf\n    from tensorflow.keras import datasets, layers, models \n    ```", "```py\ncv_img=[]\nimages = []\nfor img_path in glob.glob('dataset/training_set/img/*.png'):\n    images.append(mpimg.imread(img_path))\n\nplt.figure(figsize=(20,20)) #20,10\ncolumns = 5\nfor i, image in enumerate(images):\n    plt.subplot(len(images) / columns + 1, columns, i + 1)\n    plt.imshow(image) \n```", "```py\nimport tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models \n```", "```py\n#initializing the Tensorflow 2 classifier\nclassifier = models.Sequential()\n#adding the convolution layers to the layers\nclassifier.add(layers.Conv2D(32, (3, 3), padding='same', input_shape = (28, 28, 3), activation = 'relu'))\nclassifier.add(layers.Conv2D(32, (3, 3), activation='relu'))\n...\n#adding dense-dropout-dense layers\nclassifier.add(layers.Dense(units = 512, activation = 'relu')) \n```", "```py\n#Printing the model summary\nprint(\"Model Summary\",classifier.summary()) \n```", "```py\nModel: \"sequential\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nconv2d (Conv2D)              (None, 28, 28, 32)        896       \n_________________________________________________________________\nconv2d_1 (Conv2D)            (None, 26, 26, 32)        9248      \n_________________________________________________________________\nmax_pooling2d (MaxPooling2D) (None, 13, 13, 32)        0         \n_________________________________________________________________\ndropout (Dropout)            (None, 13, 13, 32)        0         \n_________________________________________________________________\nconv2d_2 (Conv2D)            (None, 13, 13, 64)        18496     \n_________________________________________________________________\nconv2d_3 (Conv2D)            (None, 11, 11, 64)        36928     \n_________________________________________________________________\nmax_pooling2d_1 (MaxPooling2 (None, 5, 5, 64)          0         \n_________________________________________________________________\ndropout_1 (Dropout)          (None, 5, 5, 64)          0         \n_________________________________________________________________\nconv2d_4 (Conv2D)            (None, 5, 5, 64)          36928     \n_________________________________________________________________\nconv2d_5 (Conv2D)            (None, 3, 3, 64)          36928     \n_________________________________________________________________\nmax_pooling2d_2 (MaxPooling2 (None, 1, 1, 64)          0         \n_________________________________________________________________\ndropout_2 (Dropout)          (None, 1, 1, 64)          0         \n_________________________________________________________________\nflatten (Flatten)            (None, 64)                0         \n_________________________________________________________________\ndense (Dense)                (None, 512)               33280     \n_________________________________________________________________\ndropout_3 (Dropout)          (None, 512)               0         \n_________________________________________________________________\ndense_1 (Dense)              (None, 3)                 1539      \n=============================================================== \n```", "```py\n# Compiling the convolutional neural network (CNN)\nclassifier.compile(optimizer = 'rmsprop',\n    loss = 'categorical_crossentropy',metrics = ['accuracy']) \n```", "```py\ntrain_datagen = ImageDataGenerator(rescale = 1./255)\ntest_datagen = ImageDataGenerator(rescale = 1./255)\ntraining_set = train_datagen.flow_from_directory(\n                                  'dataset/training_set',\n                                  target_size = (28, 28),\n                                  batch_size = 16,\n                                  class_mode =\n                                  'categorical')\ntest_set = test_datagen.flow_from_directory('dataset/test_set',\n                                           target_size = (28, 28),\n                                           batch_size = 16,\n                                           class_mode =\n                                           'categorical') \n```", "```py\n#Selecting an image for the activation model\nimg_path = 'dataset/test_set/img/img1.png'\nimg1 = image.load_img('dataset/test_set/img/img1.png', target_size=(28, 28))\nimg = image.img_to_array(img1)\nimg = np.expand_dims(img, axis=0)\nimg /= 255.\nplt.imshow(img[0])\nplt.show()\nprint(\"img tensor shape\",img.shape) \n```", "```py\n    #Selecting the number of layers to display\n    e=12 #last layer displayed\n    layer_outputs = [layer.output for layer in classifier.layers[0:e]] \n    ```", "```py\n    Displaying layer: conv2d\n    Displaying layer: conv2d_1\n    Displaying layer: max_pooling2d \n    ```", "```py\n    # Extracting the information of the top n layers\n    activation_model = models.Model(inputs=classifier.input,\n                                    outputs=layer_outputs) \n    ```", "```py\n    # Activating the model\n    activations = activation_model.predict(img) \n    ```", "```py\n    #layer names\n    layer_names = []\n    for layer in classifier.layers[:12]:\n        layer_names.append(layer.name) \n    ```", "```py\n    # Processing the layer outputs\n    for layer_name, layer_activation in zip(layer_names,\n            activations):\n        #getting the layer_names and their activations\n        n_features = layer_activation.shape[-1] #features in the layer\n        size = layer_activation.shape[1] #shape of the feature map\n        n_cols = n_features // images_per_row #number of images per row\n        display_grid = np.zeros((size * n_cols,\n                                 images_per_row * size)) #size of the display grid\n        for col in range(n_cols): #organizing the columns\n            for row in range(images_per_row): #...and rows to display\n                image = layer_activation[0,:, :,\n                    col * images_per_row + row] #retrieving the image...\n                image -= image.mean() #...and processing it in the...\n                if(image.std()>0): # ...following lines to display it\n                    image /= image.std()\n                    image *= 64\n                    image += 128\n                    image = np.clip(image, 0,\n                        255).astype('uint8')\n                    display_grid[col * size : (col + 1) * size,\n                        row * size : (row + 1) * size] = image \n    ```", "```py\n     #displaying the layer names and processed grids\n        print(\"Displaying layer:\",layer_name)\n        scale = 1\\. / size\n        plt.figure(figsize=(scale * display_grid.shape[1],\n                            scale * display_grid.shape[0]))\n        plt.title(layer_name)\n        plt.grid(False)\n        plt.imshow(display_grid, aspect='auto', cmap='viridis')\n        plt.savefig(\"dataset/output/\"+layer_name)\n        plt.show() \n    ```", "```py\n#adding more convolution layers to the layers\nclassifier.add(layers.Conv2D(64, (3, 3), padding='same', activation = 'relu'))\nclassifier.add(layers.Conv2D(64, (3, 3), activation='relu')) \n```", "```py\nclassifier.add(layers.Conv2D(32, (3, 3), padding='same',\n    input_shape = (28, 28, 3), activation = 'softmax')) \n```", "```py\n#adding a max pooling layer to the layers\nclassifier.add(layers.MaxPooling2D(pool_size=(2, 2))) \n```", "```py\nclassifier.add(layers.Dropout(0.5)) # antes era 0.25 \n```", "```py\n# Ensure TensorFlow 2.0 is installed.\n!pip install -q tf-nightly-2.0-preview\n# Load the TensorBoard notebook extension.\n%load_ext tensorboard \n```", "```py\n    # Define the model.\n    model = keras.models.Sequential([\n        keras.layers.Flatten(input_shape=(28, 28)),\n        keras.layers.Dense(32, activation='relu'),\n        keras.layers.Dropout(0.2),\n        keras.layers.Dense(10, activation='softmax')\n    ]) \n    ```", "```py\n    model.compile(\n        optimizer='adam',\n        loss='sparse_categorical_crossentropy',\n        metrics=['accuracy']) \n    ```", "```py\n%tensorboard --logdir logs \n```"]