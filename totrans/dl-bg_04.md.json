["```py\n!wget https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data\n```", "```py\nimport pandas as pd\ndf = pd.read_csv('processed.cleveland.data', header=None)\nprint(df.head())\n```", "```py\n    0   1   2     3     4   5   6     7   8    9   10  11  12  13\n0  63\\.  1\\.  1\\.  145\\.  233\\.  1\\.  2\\.  150\\.  0\\.  2.3  3\\.  0\\.  6\\.   0\n1  67\\.  1\\.  4\\.  160\\.  286\\.  0\\.  2\\.  108\\.  1\\.  1.5  2\\.  3\\.  3\\.   2\n2  67\\.  1\\.  4\\.  120\\.  229\\.  0\\.  2\\.  129\\.  1\\.  2.6  2\\.  2\\.  7\\.   1\n3  37\\.  1\\.  3\\.  130\\.  250\\.  0\\.  0\\.  187\\.  0\\.  3.5  3\\.  0\\.  3\\.   0\n4  41\\.  0\\.  2\\.  130\\.  204\\.  0\\.  2\\.  172\\.  0\\.  1.4  1\\.  0\\.  3\\.   0\n```", "```py\nprint(set(df[13]))\n```", "```py\n{0, 1, 2, 3, 4}\n```", "```py\ndf[13].replace(to_replace=[2,3,4], value=1, inplace=True)\nprint(df.head())\nprint(set(df[13]))\n```", "```py\n    0   1   2     3     4   5   6     7   8    9   10  11  12  13\n0  63\\.  1\\.  1\\.  145\\.  233\\.  1\\.  2\\.  150\\.  0\\.  2.3  3\\.  0\\.  6\\.   0\n1  67\\.  1\\.  4\\.  160\\.  286\\.  0\\.  2\\.  108\\.  1\\.  1.5  2\\.  3\\.  3\\.   1\n2  67\\.  1\\.  4\\.  120\\.  229\\.  0\\.  2\\.  129\\.  1\\.  2.6  2\\.  2\\.  7\\.   1\n3  37\\.  1\\.  3\\.  130\\.  250\\.  0\\.  0\\.  187\\.  0\\.  3.5  3\\.  0\\.  3\\.   0\n4  41\\.  0\\.  2\\.  130\\.  204\\.  0\\.  2\\.  172\\.  0\\.  1.4  1\\.  0\\.  3\\.   0\n\n{0, 1}\n```", "```py\nfrom sklearn.datasets import fetch_openml\nmnist = fetch_openml('mnist_784')\nprint(mnist.data.shape)\nprint(mnist.target.shape)\n```", "```py\n(70000, 784)\n(70000,)\n```", "```py\nprint(mnist.data[0].reshape(28, 28)[10:18,10:18])\nmnist.data[mnist.data < 128] = 0\nmnist.data[mnist.data >=128] = 1\nprint(mnist.data[0].reshape(28, 28)[10:18,10:18])\n```", "```py\n[[ 1\\. 154\\. 253\\.  90\\.   0\\.   0\\.   0\\.   0.]\n [ 0\\. 139\\. 253\\. 190\\.   2\\.   0\\.   0\\.   0.]\n [ 0\\.  11\\. 190\\. 253\\.  70\\.   0\\.   0\\.   0.]\n [ 0\\.   0\\.  35\\. 241\\. 225\\. 160\\. 108\\.   1.]\n [ 0\\.   0\\.   0\\.  81\\. 240\\. 253\\. 253\\. 119.]\n [ 0\\.   0\\.   0\\.   0\\.  45\\. 186\\. 253\\. 253.]\n [ 0\\.   0\\.   0\\.   0\\.   0\\.  16\\.  93\\. 252.]\n [ 0\\.   0\\.   0\\.   0\\.   0\\.   0\\.   0\\. 249.]]\n\n[[ 0\\. 1\\. 1\\. 0\\. 0\\. 0\\. 0\\. 0.]\n [ 0\\. 1\\. 1\\. 1\\. 0\\. 0\\. 0\\. 0.]\n [ 0\\. 0\\. 1\\. 1\\. 0\\. 0\\. 0\\. 0.]\n [ 0\\. 0\\. 0\\. 1\\. 1\\. 1\\. 0\\. 0.]\n [ 0\\. 0\\. 0\\. 0\\. 1\\. 1\\. 1\\. 0.]\n [ 0\\. 0\\. 0\\. 0\\. 0\\. 1\\. 1\\. 1.]\n [ 0\\. 0\\. 0\\. 0\\. 0\\. 0\\. 0\\. 1.]\n [ 0\\. 0\\. 0\\. 0\\. 0\\. 0\\. 0\\. 1.]]\n```", "```py\nX = mnist.data[(mnist.target == '7') | (mnist.target == '8')]\ny = mnist.target[(mnist.target == '7') | (mnist.target == '8')]\nprint(X.shape)\nprint(y.shape)\n```", "```py\n(14118, 784)\n(14118)\n```", "```py\nprint(y[:10])\ny = [0 if v=='7' else 1 for v in y]\nprint(y[:10])\n```", "```py\n['7' '8' '7' '8' '7' '8' '7' '8' '7' '8']\n[0, 1, 0, 1, 0, 1, 0, 1, 0, 1]\n```", "```py\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nprint(sorted(list(set(mnist.target))))\n\nle.fit(sorted(list(set(mnist.target))))\n```", "```py\n['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n\nLabelEncoder()\n```", "```py\nprint(le.transform([\"9\", \"3\", \"7\"]) )\n\nlist(le.inverse_transform([2, 2, 1]))\n```", "```py\n[9 3 7]\n\n['2', '2', '1']\n```", "```py\nprint(\"Before \", mnist.target[:3])\ny = le.transform(mnist.target)\nprint(\"After \", y[:3])\n```", "```py\nBefore ['5' '0' '4']\nAfter [5 0 4]\n```", "```py\nimport pandas as pd\ndf=pd.DataFrame({'Gender': ['female','male','male',\n                            'female','female']})\nprint(df)\n```", "```py\n  Gender\n0 female\n1 male\n2 male\n3 female\n4 female\n```", "```py\npd.get_dummies(df, prefix=['Gender'])\n```", "```py\n  Gender_female  Gender_male\n0             1            0\n1             0            1\n2             0            1\n3             1            0\n4             1            0\n```", "```py\nfrom sklearn.preprocessing import OneHotEncoder\nenc = OneHotEncoder()\ny = [list(v) for v in mnist.target] # reformat for sklearn\nenc.fit(y)\n\nprint('Before: ', y[0])\ny = enc.transform(y).toarray()\nprint('After: ', y[0])\nprint(enc.get_feature_names())\n```", "```py\nBefore: ['5']\nAfter: [0\\. 0\\. 0\\. 0\\. 0\\. 1\\. 0\\. 0\\. 0\\. 0.]\n['x0_0' 'x0_1' 'x0_2' 'x0_3' 'x0_4' 'x0_5' 'x0_6' 'x0_7' 'x0_8' 'x0_9']\n```", "```py\ndf = pd.read_csv('processed.cleveland.data', header=None)\ndf[[4,9]].describe()\n```", "```py\n                 4            9\ncount   303.000000   303.000000\nmean    246.693069     1.039604\nstd      51.776918     1.161075\nmin     126.000000     0.000000\n25%     211.000000     0.000000\n50%     241.000000     0.800000\n75%     275.000000     1.600000\nmax     564.000000     6.200000\n```", "```py\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(df[[4,9]])\ndf[[4,9]] = scaler.transform(df[[4,9]])\ndf[[4,9]].describe()\n```", "```py\n                4            9\ncount  303.000000   303.000000\nmean     0.275555     0.167678\nstd      0.118212     0.187270\nmin      0.000000     0.000000\n25%      0.194064     0.000000\n50%      0.262557     0.129032\n75%      0.340183     0.258065\nmax      1.000000     1.000000\n```", "```py\ndf[[4,9]] = (df[[4,9]]-df[[4,9]].mean())/df[[4,9]].std()\ndf[[4,9]].describe()\n```", "```py\n                   4                9\ncount   3.030000e+02     3.030000e+02\nmean    1.700144e-16    -1.003964e-16\nstd     1.000000e+00     1.000000e+00\nmin    -2.331021e+00    -8.953805e-01\n25%    -6.893626e-01    -8.953805e-01\n50%    -1.099538e-01    -2.063639e-01\n75%     5.467095e-01     4.826527e-01\nmax     6.128347e+00     4.444498e+00\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(df[[4,9]])\ndf[[4,9]] = scaler.transform(df[[4,9]])\n```", "```py\nfrom sklearn.preprocessing import QuantileTransformer\ntransformer = QuantileTransformer(output_distribution='normal')\ndf[[4,9]] = transformer.fit_transform(df[[4,9]])\n```", "```py\ntransformer = QuantileTransformer(output_distribution='uniform')\n```", "```py\nfrom sklearn.datasets import fetch_openml\nmnist = fetch_openml('mnist_784')\n```", "```py\nfrom skimage.transform import rescale\nx = mnist.data[0].reshape(28,28)\n```", "```py\ns = rescale(x, 0.5, multichannel=False)\nx_= rescale(s, 2.0, multichannel=False)\n```", "```py\nfrom skimage.util import random_noise\nx_ = random_noise(x)\n```", "```py\nfrom skimage.transform import rotate\nx_ = rotate(x, 22)\n```", "```py\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\ndf = pd.read_csv('processed.cleveland.data', header=None)\ndf = df.apply(pd.to_numeric, errors='coerce').dropna()\n```", "```py\nX = df[[0,1,2,3,4,5,6,7,8,9,10,11,12]].values\ny = df[13].values\n\ndr = LinearDiscriminantAnalysis(n_components=2)\nX_ = dr.fit_transform(X, y)\n```", "```py\nfrom sklearn.decomposition import KernelPCA\n\ndr = KernelPCA(n_components=2, kernel='linear')\nX_ = dr.fit_transform(X)\n```", "```py\nfrom sklearn.datasets import fetch_openml\nmnist = fetch_openml('mnist_784')\n\nX = mnist.data\n```", "```py\nfrom sklearn.decomposition import MiniBatchSparsePCA\n\ndr = MiniBatchSparsePCA(n_components=2, batch_size=50, \n                        normalize_components=True)\nX_ = dr.fit_transform(X)\n```", "```py\nfrom sklearn.decomposition import MiniBatchDictionaryLearning\n\ndr = MiniBatchDictionaryLearning(n_components=2, batch_size=50)\nX_ = dr.fit_transform(X)\n```"]