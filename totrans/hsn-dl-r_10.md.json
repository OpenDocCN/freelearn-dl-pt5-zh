["```py\nlibrary(quantmod)\nlibrary(tseries) \nlibrary(ggplot2)\nlibrary(timeSeries)\nlibrary(forecast)\nlibrary(xts)\nlibrary(keras)\nlibrary(tensorflow)\n\nFB <- getSymbols('FB', from='2014-01-01', to='2018-12-31', source = 'google', auto.assign=FALSE)\n```", "```py\nFB[1:5,]\n```", "```py\nclosing_prices <- FB$FB.Close\n```", "```py\nplot.xts(closing_prices,main=\"Facebook Closing Stock Prices\")\n```", "```py\narima_mod <- auto.arima(closing_prices)\n\nforecasted_prices <- forecast(arima_mod,h=365)\n\nautoplot(forecasted_prices)\n```", "```py\nfb_future <- getSymbols('FB', from='2019-01-01', to='2019-12-31', source = 'google', auto.assign=FALSE)\n\nfuture_values <- ts(data = fb_future$FB.Close, start = 1258, end = 1509)\n\nautoplot(forecasted_prices) + autolayer(future_values, series=\"Actual Closing Prices\")\n```", "```py\nfuture_prices <- fb_future$FB.Close\n\nclosing_deltas <- diff(log(rbind(closing_prices,future_prices)),lag=1)\nclosing_deltas <- closing_deltas[!is.na(closing_deltas)]\n```", "```py\nplot(closing_deltas,type='l', main='Facebook Daily Log Returns')\n```", "```py\nadf.test(closing_deltas)\n```", "```py\ntrain_gen <- timeseries_generator(\n  closing_deltas,\n  closing_deltas,\n  length = 3,\n  sampling_rate = 1,\n  stride = 1,\n  start_index = 1,\n  end_index = 1258,\n  shuffle = FALSE,\n  reverse = FALSE,\n  batch_size = 1\n)\n\ntest_gen <- timeseries_generator(\n  closing_deltas,\n  closing_deltas,\n  length = 3,\n  sampling_rate = 1,\n  stride = 1,\n  start_index = 1259,\n  end_index = 1507,\n  shuffle = FALSE,\n  reverse = FALSE,\n  batch_size = 1\n)\n```", "```py\nmodel <- keras_model_sequential()\n```", "```py\nmodel %>%\n  layer_lstm(units = 4,\n             input_shape = c(3, 1)) %>%\n  layer_dense(units = 1)\n```", "```py\nmodel %>%\n  compile(loss = 'mse', optimizer = 'adam')\n\nmodel\n```", "```py\nhistory <- model %>% fit_generator(\n  train_gen,\n  epochs = 100,\n  steps_per_epoch=1,\n  verbose=2\n)\n```", "```py\ntestpredict <- predict_generator(model, test_gen, steps = 200)\ntrainpredict <- predict_generator(model, train_gen, steps = 1200)\n```", "```py\ntrainpredict <- data.frame(pred = trainpredict)\nrownames(trainpredict) <- index(closing_deltas)[4:1203]\ntrainpredict <- as.xts(trainpredict)\n\ntestpredict <- data.frame(pred = testpredict)\nrownames(testpredict) <- index(closing_deltas)[1262:1461]\ntestpredict <- as.xts(testpredict)\n```", "```py\nclosing_deltas$trainpred <- rep(NA,1507)\nclosing_deltas$trainpred[4:1203] <- trainpredict$pred\n\nclosing_deltas$testpred <- rep(NA,1507)\nclosing_deltas$testpred[1262:1461] <- testpredict$pred\n```", "```py\nplot(as.zoo(closing_deltas), las=1, plot.type = \"single\", col = c(\"light gray\",\"black\",\"black\"), lty = c(3,1,1))\n```", "```py\nevaluate_generator(model, test_gen, steps = 200)\nevaluate_generator(model, train_gen, steps = 1200)\n```", "```py\ntrain_gen <- timeseries_generator(\n  closing_deltas,\n  closing_deltas,\n  length = 10,\n  sampling_rate = 1,\n  stride = 1,\n  start_index = 1,\n  end_index = 1258,\n  shuffle = FALSE,\n  reverse = FALSE,\n  batch_size = 1\n)\n\ntest_gen <- timeseries_generator(\n  closing_deltas,\n  closing_deltas,\n  length = 10,\n  sampling_rate = 1,\n  stride = 1,\n  start_index = 1259,\n  end_index = 1507,\n  shuffle = FALSE,\n  reverse = FALSE,\n  batch_size = 1\n)\n```", "```py\nmodel <- keras_model_sequential()\n\nmodel %>%\n layer_lstm(units = 256,input_shape = c(10, 1),return_sequences=\"True\") %>%\n layer_dropout(rate = 0.3) %>%\n layer_lstm(units = 256,input_shape = c(10, 1),return_sequences=\"False\") %>%\n layer_dropout(rate = 0.3) %>%\n layer_dense(units = 32, activation = \"relu\") %>%\n layer_dense(units = 1, activation = \"linear\")\n```", "```py\nmodel %>%\n  compile(\n    optimizer = optimizer_adam(lr = 0.001), \n    loss = 'mse',\n    metrics = 'accuracy')\n\nmodel\n```", "```py\nhistory <- model %>% fit_generator(\n train_gen,\n epochs = 100,\n steps_per_epoch=1,\n verbose=2\n)\n```", "```py\nevaluate_generator(model, train_gen, steps = 1200)\nevaluate_generator(model, test_gen, steps = 200)\n```"]