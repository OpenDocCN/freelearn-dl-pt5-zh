["```py\n    $ conda create -n python3d python=3.7\n    ```", "```py\n    $ source activate python3d\n    ```", "```py\n    $ conda install pytorch torchvision torchaudio cudatoolkit-11.1 -c pytorch -c nvidia\n    ```", "```py\n$ conda install pytorch3d -c pytorch3d\n```", "```py\nply\n```", "```py\nformat ascii 1.0\n```", "```py\ncomment created for the book 3D Deep Learning with Python\n```", "```py\nelement vertex 8\n```", "```py\nproperty float32 x\n```", "```py\nproperty float32 y\n```", "```py\nproperty float32 z\n```", "```py\nelement face 12\n```", "```py\nproperty list uint8 int32 vertex_indices\n```", "```py\nend_header\n```", "```py\n-1 -1 -1\n```", "```py\n1 -1 -1\n```", "```py\n1 1 -1\n```", "```py\n-1 1 -1\n```", "```py\n-1 -1 1\n```", "```py\n1 -1 1\n```", "```py\n1 1 1\n```", "```py\n-1 1 1\n```", "```py\n3 0 1 2\n```", "```py\n3 5 4 7\n```", "```py\n3 6 2 1\n```", "```py\n3 3 7 4\n```", "```py\n3 7 3 2\n```", "```py\n3 5 1 0\n```", "```py\n3 0 2 3\n```", "```py\n3 5 7 6\n```", "```py\n3 6 1 5\n```", "```py\n3 3 4 0\n```", "```py\n3 7 2 6\n```", "```py\n3 5 0 4\n```", "```py\nimport open3d\n```", "```py\nfrom pytorch3d.io import load_ply\n```", "```py\nmesh_file = \"cube.ply\"\n```", "```py\nprint('visualizing the mesh using open3D')\n```", "```py\nmesh = open3d.io.read_triangle_mesh(mesh_file)\n```", "```py\nopen3d.visualization.draw_geometries([mesh],\n```", "```py\n       mesh_show_wireframe = True,\n```", "```py\n       mesh_show_back_face = True)\n```", "```py\nprint(\"Loading the same file with PyTorch3D\")\n```", "```py\nvertices, faces = load_ply(mesh_file)\n```", "```py\nprint('Type of vertices = ', type(vertices))\n```", "```py\nprint(\"type of faces = \", type(faces))\n```", "```py\nprint('vertices = ', vertices)\n```", "```py\nprint('faces = ', faces)\n```", "```py\nply\n```", "```py\nformat ascii 1.0\n```", "```py\ncomment created for the book 3D Deep Learning with Python\n```", "```py\nelement vertex 8\n```", "```py\nproperty float32 x\n```", "```py\nproperty float32 y\n```", "```py\nproperty float32 z\n```", "```py\nelement face 4\n```", "```py\nproperty list uint8 int32 vertex_indices\n```", "```py\nend_header\n```", "```py\n-1 -1 -1\n```", "```py\n1 -1 -1\n```", "```py\n1 1 -1\n```", "```py\n-1 1 -1\n```", "```py\n-1 -1 1\n```", "```py\n1 -1 1\n```", "```py\n1 1 1\n```", "```py\n-1 1 1\n```", "```py\n3 0 1 2\n```", "```py\n3 0 2 3\n```", "```py\n3 5 4 7\n```", "```py\n3 5 7 6\n```", "```py\n    import open3d\n    from pytorch3d.io import load_ply\n    ```", "```py\n    mesh_file = \"parallel_plane_mono.ply\"\n    print('visualizing the mesh using open3D')\n    mesh = open3d.io.read_triangle_mesh(mesh_file)\n    ```", "```py\n    open3d.visualization.draw_geometries([mesh],\n                      mesh_show_wireframe = True,\n                      mesh_show_back_face = True)\n    ```", "```py\n    print(\"Loading the same file with PyTorch3D\")\n    vertices, faces = load_ply(mesh_file)\n    ```", "```py\n    print('Type of vertices = ', type(vertices), \", type of faces = \", type(faces))\n    print('vertices = ', vertices)\n    print('faces = ', faces)\n    ```", "```py\nply\n```", "```py\nformat ascii 1.0\n```", "```py\ncomment created for the book 3D Deep Learning with Python\n```", "```py\nelement vertex 8\n```", "```py\nproperty float32 x\n```", "```py\nproperty float32 y\n```", "```py\nproperty float32 z\n```", "```py\nproperty uchar red\n```", "```py\nproperty uchar green\n```", "```py\nproperty uchar blue\n```", "```py\nelement face 4\n```", "```py\nproperty list uint8 int32 vertex_indices\n```", "```py\nend_header\n```", "```py\n-1 -1 -1 255 0 0\n```", "```py\n1 -1 -1 255 0 0\n```", "```py\n1 1 -1 255 0 0\n```", "```py\n-1 1 -1 255 0 0\n```", "```py\n-1 -1 1 0 0 255\n```", "```py\n1 -1 1 0 0 255\n```", "```py\n1 1 1 0 0 255\n```", "```py\n-1 1 1 0 0 255\n```", "```py\n3 0 1 2\n```", "```py\n3 0 2 3\n```", "```py\n3 5 4 7\n```", "```py\n3 5 7 6\n```", "```py\nimport open3d\n```", "```py\nfrom pytorch3d.io import load_ply\n```", "```py\nmesh_file = \"parallel_plane_color.ply\"\n```", "```py\nprint('visualizing the mesh using open3D')\n```", "```py\nmesh = open3d.io.read_triangle_mesh(mesh_file)\n```", "```py\nopen3d.visualization.draw_geometries([mesh],\n```", "```py\n                     mesh_show_wireframe = True,\n```", "```py\n                     mesh_show_back_face = True)\n```", "```py\nprint(\"Loading the same file with PyTorch3D\")\n```", "```py\nvertices, faces = load_ply(mesh_file)\n```", "```py\nprint('Type of vertices = ', type(vertices), \", type of faces = \", type(faces))\n```", "```py\nprint('vertices = ', vertices)\n```", "```py\nprint('faces = ', faces)\n```", "```py\nmtllib ./cube.mtl\n```", "```py\no cube\n```", "```py\n# Vertex list\n```", "```py\nv -0.5 -0.5 0.5\n```", "```py\nv -0.5 -0.5 -0.5\n```", "```py\nv -0.5 0.5 -0.5\n```", "```py\nv -0.5 0.5 0.5\n```", "```py\nv 0.5 -0.5 0.5\n```", "```py\nv 0.5 -0.5 -0.5\n```", "```py\nv 0.5 0.5 -0.5\n```", "```py\nv 0.5 0.5 0.5\n```", "```py\n# Point/Line/Face list\n```", "```py\nusemtl Door\n```", "```py\nf 1 2 3\n```", "```py\nf 6 5 8\n```", "```py\nf 7 3 2\n```", "```py\nf 4 8 5\n```", "```py\nf 8 4 3\n```", "```py\nf 6 2 1\n```", "```py\nf 1 3 4\n```", "```py\nf 6 8 7\n```", "```py\nf 7 2 6\n```", "```py\nf 4 5 1\n```", "```py\nf 8 3 7\n```", "```py\nf 6 1 5\n```", "```py\nnewmtl Door\n```", "```py\nKa  0.8 0.6 0.4\n```", "```py\nKd  0.8 0.6 0.4\n```", "```py\nKs  0.9 0.9 0.9\n```", "```py\nd  1.0\n```", "```py\nNs  0.0\n```", "```py\nillum 2\n```", "```py\nimport open3d\n```", "```py\nfrom pytorch3d.io import load_obj\n```", "```py\nmesh_file = \"cube.obj\"\n```", "```py\nprint('visualizing the mesh using open3D')\n```", "```py\nmesh = open3d.io.read_triangle_mesh(mesh_file)\n```", "```py\nopen3d.visualization.draw_geometries([mesh],\n```", "```py\n                 mesh_show_wireframe = True,\n```", "```py\n                 mesh_show_back_face = True)\n```", "```py\nprint(\"Loading the same file with PyTorch3D\")\n```", "```py\nvertices, faces, aux = load_obj(mesh_file)\n```", "```py\nprint('Type of vertices = ', type(vertices))\n```", "```py\nprint(\"Type of faces = \", type(faces))\n```", "```py\nprint(\"Type of aux = \", type(aux))\n```", "```py\nprint('vertices = ', vertices)\n```", "```py\nprint('faces = ', faces)\n```", "```py\nprint('aux = ', aux)\n```", "```py\nvisualizing the mesh using open3D\n```", "```py\nLoading the same file with PyTorch3D\n```", "```py\nType of vertices =  <class 'torch.Tensor'>\n```", "```py\nType of faces =  <class 'pytorch3d.io.obj_io.Faces'>\n```", "```py\nType of aux =  <class 'pytorch3d.io.obj_io.Properties'>\n```", "```py\nvertices =  tensor([[-0.5000, -0.5000,  0.5000],\n```", "```py\n        [-0.5000, -0.5000, -0.5000],\n```", "```py\n        [-0.5000,  0.5000, -0.5000],\n```", "```py\n        [-0.5000,  0.5000,  0.5000],\n```", "```py\n        [ 0.5000, -0.5000,  0.5000],\n```", "```py\n        [ 0.5000, -0.5000, -0.5000],\n```", "```py\n        [ 0.5000,  0.5000, -0.5000],\n```", "```py\n        [ 0.5000,  0.5000,  0.5000]])\n```", "```py\nfaces =  Faces(verts_idx=tensor([[0, 1, 2],\n```", "```py\n        [5, 4, 7],\n```", "```py\n        [6, 2, 1],\n```", "```py\n        ...\n```", "```py\n        [3, 4, 0],\n```", "```py\n        [7, 2, 6],\n```", "```py\n        [5, 0, 4]]), normals_idx=tensor([[-1, -1, -1],\n```", "```py\n        [-1, -1, -1],\n```", "```py\n        [-1, -1, -1],\n```", "```py\n        [-1, -1, -1],\n```", "```py\n        ...\n```", "```py\n        [-1, -1, -1],\n```", "```py\n        [-1, -1, -1]]), textures_idx=tensor([[-1, -1, -1],\n```", "```py\n        [-1, -1, -1],\n```", "```py\n        [-1, -1, -1],\n```", "```py\n        ...\n```", "```py\n        [-1, -1, -1],\n```", "```py\n        [-1, -1, -1]]), materials_idx=tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))\n```", "```py\naux =  Properties(normals=None, verts_uvs=None, material_colors={'Door': {'ambient_color': tensor([0.8000, 0.6000, 0.4000]), 'diffuse_color': tensor([0.8000, 0.6000, 0.4000]), 'specular_color': tensor([0.9000, 0.9000, 0.9000]), 'shininess': tensor([0.])}}, texture_images={}, texture_atlas=None)\n```", "```py\nmtllib cube_texture.mtl\n```", "```py\nv 1.000000 -1.000000 -1.000000\n```", "```py\nv 1.000000 -1.000000 1.000000\n```", "```py\nv -1.000000 -1.000000 1.000000\n```", "```py\nv -1.000000 -1.000000 -1.000000\n```", "```py\nv 1.000000 1.000000 -0.999999\n```", "```py\nv 0.999999 1.000000 1.000001\n```", "```py\nv -1.000000 1.000000 1.000000\n```", "```py\nv -1.000000 1.000000 -1.000000\n```", "```py\nvt 1.000000 0.333333\n```", "```py\nvt 1.000000 0.666667\n```", "```py\nvt 0.666667 0.666667\n```", "```py\nvt 0.666667 0.333333\n```", "```py\nvt 0.666667 0.000000\n```", "```py\nvt 0.000000 0.333333\n```", "```py\nvt 0.000000 0.000000\n```", "```py\nvt 0.333333 0.000000\n```", "```py\nvt 0.333333 1.000000\n```", "```py\nvt 0.000000 1.000000\n```", "```py\nvt 0.000000 0.666667\n```", "```py\nvt 0.333333 0.333333\n```", "```py\nvt 0.333333 0.666667\n```", "```py\nvt 1.000000 0.000000\n```", "```py\nvn 0.000000 -1.000000 0.000000\n```", "```py\nvn 0.000000 1.000000 0.000000\n```", "```py\nvn 1.000000 0.000000 0.000000\n```", "```py\nvn -0.000000 0.000000 1.000000\n```", "```py\nvn -1.000000 -0.000000 -0.000000\n```", "```py\nvn 0.000000 0.000000 -1.000000\n```", "```py\ng main\n```", "```py\nusemtl Skin\n```", "```py\ns 1\n```", "```py\nf 2/1/1 3/2/1 4/3/1\n```", "```py\nf 8/1/2 7/4/2 6/5/2\n```", "```py\nf 5/6/3 6/7/3 2/8/3\n```", "```py\nf 6/8/4 7/5/4 3/4/4\n```", "```py\nf 3/9/5 7/10/5 8/11/5\n```", "```py\nf 1/12/6 4/13/6 8/11/6\n```", "```py\nf 1/4/1 2/1/1 4/3/1\n```", "```py\nf 5/14/2 8/1/2 6/5/2\n```", "```py\nf 1/12/3 5/6/3 2/8/3\n```", "```py\nf 2/12/4 6/8/4 3/4/4\n```", "```py\nf 4/13/5 3/9/5 8/11/5\n```", "```py\nf 5/6/6 1/12/6 8/11/6\n```", "```py\nnewmtl Skin\n```", "```py\nKa 0.200000 0.200000 0.200000\n```", "```py\nKd 0.827451 0.792157 0.772549\n```", "```py\nKs 0.000000 0.000000 0.000000\n```", "```py\nNs 0.000000\n```", "```py\nmap_Kd ./wal67ar_small.jpg\n```", "```py\nimport open3d\n```", "```py\nfrom pytorch3d.io import load_obj\n```", "```py\nimport torch\n```", "```py\nmesh_file = \"cube_texture.obj\"\n```", "```py\nprint('visualizing the mesh using open3D')\n```", "```py\nmesh = open3d.io.read_triangle_mesh(mesh_file)\n```", "```py\nopen3d.visualization.draw_geometries([mesh],\n```", "```py\n                  mesh_show_wireframe = True,\n```", "```py\n                  mesh_show_back_face = True)\n```", "```py\nprint(\"Loading the same file with PyTorch3D\")\n```", "```py\nvertices, faces, aux = load_obj(mesh_file)\n```", "```py\nprint('Type of vertices = ', type(vertices))\n```", "```py\nprint(\"Type of faces = \", type(faces))\n```", "```py\nprint(\"Type of aux = \", type(aux))\n```", "```py\nprint('vertices = ', vertices)\n```", "```py\nprint('faces = ', faces)\n```", "```py\nprint('aux = ', aux)\n```", "```py\ntexture_images = getattr(aux, 'texture_images')\n```", "```py\nprint('texture_images type = ', type(texture_images))\n```", "```py\nprint(texture_images['Skin'].shape)\n```", "```py\nvisualizing the mesh using open3D\n```", "```py\nLoading the same file with PyTorch3D\n```", "```py\nType of vertices =  <class 'torch.Tensor'>\n```", "```py\nType of faces =  <class 'pytorch3d.io.obj_io.Faces'>\n```", "```py\nType of aux =  <class 'pytorch3d.io.obj_io.Properties'>\n```", "```py\nvertices =  tensor([[ 1.0000, -1.0000, -1.0000],\n```", "```py\n        [ 1.0000, -1.0000,  1.0000],\n```", "```py\n        [-1.0000, -1.0000,  1.0000],\n```", "```py\n        [-1.0000, -1.0000, -1.0000],\n```", "```py\n        [ 1.0000,  1.0000, -1.0000],\n```", "```py\n        [ 1.0000,  1.0000,  1.0000],\n```", "```py\n        [-1.0000,  1.0000,  1.0000],\n```", "```py\n        [-1.0000,  1.0000, -1.0000]])\n```", "```py\nfaces =  Faces(verts_idx=tensor([[1, 2, 3],\n```", "```py\n        [7, 6, 5],\n```", "```py\n        [4, 5, 1],\n```", "```py\n        [5, 6, 2],\n```", "```py\n        [2, 6, 7],\n```", "```py\n        [0, 3, 7],\n```", "```py\n        [0, 1, 3],\n```", "```py\n        ...\n```", "```py\n        [3, 3, 3],\n```", "```py\n        [4, 4, 4],\n```", "```py\n        [5, 5, 5]]), textures_idx=tensor([[ 0,  1,  2],\n```", "```py\n        [ 0,  3,  4],\n```", "```py\n        [ 5,  6,  7],\n```", "```py\n        [ 7,  4,  3],\n```", "```py\n        [ 8,  9, 10],\n```", "```py\n        [11, 12, 10],\n```", "```py\n        ...\n```", "```py\n        [12,  8, 10],\n```", "```py\n        [ 5, 11, 10]]), materials_idx=tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))\n```", "```py\naux =  Properties(normals=tensor([[ 0., -1.,  0.],\n```", "```py\n        [ 0.,  1.,  0.],\n```", "```py\n        [ 1.,  0.,  0.],\n```", "```py\n        [-0.,  0.,  1.],\n```", "```py\n        [-1., -0., -0.],\n```", "```py\n        [ 0.,  0., -1.]]), verts_uvs=tensor([[1.0000, 0.3333],\n```", "```py\n        ...\n```", "```py\n        [0.3333, 0.6667],\n```", "```py\n        [1.0000, 0.0000]]), material_colors={'Skin': {'ambient_color': tensor([0.2000, 0.2000, 0.2000]), 'diffuse_color': tensor([0.8275, 0.7922, 0.7725]), 'specular_color': tensor([0., 0., 0.]), 'shininess': tensor([0.])}}, texture_images={'Skin': tensor([[[0.2078, 0.1765, 0.1020],\n```", "```py\n         [0.2039, 0.1725, 0.0980],\n```", "```py\n         [0.1961, 0.1647, 0.0902],\n```", "```py\n         ...,\n```", "```py\n          [0.2235, 0.1882, 0.1294]]])}, texture_atlas=None)\n```", "```py\ntexture_images type =  <class 'dict'>\n```", "```py\nSkin\n```", "```py\ntorch.Size([250, 250, 3])\n```", "```py\n    mtllib ./cube.mtl\n    o cube\n    # Vertex list\n    v -50 -50 20\n    v -50 -50 10\n    v -50 50 10\n    v -50 50 20\n    v 50 -50 20\n    v 50 -50 10\n    v 50 50 10\n    v 50 50 20\n    # Point/Line/Face list\n    usemtl Door\n    f 1 2 3\n    f 6 5 8\n    f 7 3 2\n    f 4 8 5\n    f 8 4 3\n    f 6 2 1\n    f 1 3 4\n    f 6 8 7\n    f 7 2 6\n    f 4 5 1\n    f 8 3 7\n    f 6 1 5\n    # End of file\n    ```", "```py\n    import open3d\n    import torch\n    import pytorch3d\n    from pytorch3d.io import load_obj\n    from scipy.spatial.transform import Rotation as Rotation\n    from pytorch3d.renderer.cameras import PerspectiveCameras\n    ```", "```py\n    #Load meshes and visualize it with Open3D\n    mesh_file = \"cube.obj\"\n    print('visualizing the mesh using open3D')\n    mesh = open3d.io.read_triangle_mesh(mesh_file)\n    open3d.visualization.draw_geometries([mesh],\n                     mesh_show_wireframe = True,\n                     mesh_show_back_face = True)\n    ```", "```py\n    #Define a mini-batch of 8 cameras\n    image_size = torch.ones(8, 2)\n    image_size[:,0] = image_size[:,0] * 1024\n    image_size[:,1] = image_size[:,1] * 512\n    image_size = image_size.cuda()\n    focal_length = torch.ones(8, 2)\n    focal_length[:,0] = focal_length[:,0] * 1200\n    focal_length[:,1] = focal_length[:,1] * 300\n    focal_length = focal_length.cuda()\n    principal_point = torch.ones(8, 2)\n    principal_point[:,0] = principal_point[:,0] * 512\n    principal_point[:,1] = principal_point[:,1] * 256\n    principal_point = principal_point.cuda()\n    R = Rotation.from_euler('zyx', [\n        [n*5, n, n]  for n in range(-4, 4, 1)], degrees=True).as_matrix()\n    R = torch.from_numpy(R).cuda()\n    T = [ [n, 0, 0] for n in range(-4, 4, 1)]\n    T = torch.FloatTensor(T).cuda()\n    camera = PerspectiveCameras(focal_length = focal_length,\n                                principal_point = principal_point,\n                                in_ndc = False,\n                                image_size = image_size,\n                                R = R,\n                                T = T,\n                                device = 'cuda')\n    ```", "```py\n    world_to_view_transform = camera.get_world_to_view_transform()\n    world_to_screen_transform = camera.get_full_projection_transform()\n    #Load meshes using PyTorch3D\n    vertices, faces, aux = load_obj(mesh_file)\n    vertices = vertices.cuda()\n    world_to_view_vertices = world_to_view_transform.transform_points(vertices)\n    world_to_screen_vertices = world_to_screen_transform.transform_points(vertices)\n    print('world_to_view_vertices = ', world_to_view_vertices)\n    print('world_to_screen_vertices = ', world_to_screen_vertices\n    ```"]