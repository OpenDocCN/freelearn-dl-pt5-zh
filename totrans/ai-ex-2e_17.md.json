["```py\n     target = \"Algorithm\" # No space unless specified as a character in the gene set \n    ```", "```py\n     target=\"AAAA\" #unspecified target \n    ```", "```py\n    def gen_parent(length) \n    ```", "```py\n    geneSet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!.-\" \n    ```", "```py\n     index=random.randrange(0,len(parent)) \n    ```", "```py\n     if(newGene!=oldGene):childGenes[index]=newGene; \n    ```", "```py\n     if(newGene==oldGene):childGenes[index]=alternate; \n    ```", "```py\n     target=\"FBDC\" \n    ```", "```py\n    def get_fitness(this_choice,scenario):\n        if(scenario==1): \n    ```", "```py\n    KPIset =\"0123456772012345674701234569980923456767012345671001234\"   #KPI set \n    ```", "```py\nimport math\nimport random\nimport datetime \n```", "```py\nscenario=0   # 1=target provided at start, 0=no target, genetic optimizer \n```", "```py\nif(GA==1):\n    geneSet =\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!.-\"\n    # target with no space unless specified as a character in the geneSet\n    target = \"Algorithm\"  # No space unless specified as a character in the geneSet\n    print(\"geneSet:\",geneSet,\"\\n\",\"target:\",target)\n    ga_main() \n```", "```py\ngeneSet: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!.-\n target: Algorithm \n```", "```py\n startTime=datetime.datetime.now()\n    print(\"starttime\",startTime)\n    alphaParent=gen_parent(len(target))\n    bestFitness=get_fitness(alphaParent,scenario)\n    display(alphaParent,bestFitness,bestFitness,startTime) #no childFitness for generation 1 so default value sent \n```", "```py\n    starttime 2019-10-12 10:32:28.294943 \n    ```", "```py\ndef gen_parent(length): \n```", "```py\n genes=[]                        #genes array \n```", "```py\n while len(genes)<length:  #genes is constrained to the length\n        #sampleSize: length of target constraint\n        sampleSize=min(length-len(genes),len(geneSet))\n        #extend genes with a random sample the size of sampleSize extracted from geneSet\n        genes.extend(random.sample(geneSet,sampleSize)) \n```", "```py\naFJPKzYBD \n```", "```py\n return ''.join(genes) \n```", "```py\n#I PARENT GENERATION\n    startTime=datetime.datetime.now()\n    print(\"starttime\",startTime)\n    alphaParent=gen_parent(len(target)) \n```", "```py\n bestFitness = get_fitness(alphaParent,scenario) \n```", "```py\ndef get_fitness(this_choice,scenario):\n    if(scenario==1):\n        fitness = sum(1 for expected,\n            actual in zip(target,this_choice) if expected==actual) \n```", "```py\n return fitness \n```", "```py\ndef ga_main():\n    #I PARENT GENERATION\n    startTime=datetime.datetime.now()\n    print(\"starttime\",startTime)\n    alphaParent=gen_parent(len(target))\n    bestFitness=get_fitness(alphaParent,scenario) \n```", "```py\n display(alphaParent,bestFitness,bestFitness,startTime) \n```", "```py\ndef display(selection,bestFitness,childFitness,startTime): \n```", "```py\n timeDiff=datetime.datetime.now()-startTime\n    print(\"Selection:\",selection,\"Fittest:\",bestFitness,\n          \"This generation Fitness:\",childFitness,\n          \"Time Difference:\",timeDiff) \n```", "```py\nSelection: BnVYkFcRK Fittest: 0 This generation Fitness: 0 Time Difference: 0:00:00.000198 \n```", "```py\ndef crossover(parent): \n```", "```py\n index=random.randrange(0,len(parent))#producing a random position of the parent gene \n```", "```py\n childGenes=list(parent) \n```", "```py\n oldGene=childGenes[index]        # for diversity check \n```", "```py\n newGene,alternate=random.sample(geneSet,2) \n```", "```py\n if(newGene!=oldGene):childGenes[index]=newGene;  #natural crossover \n```", "```py\n if(newGene==oldGene):childGenes[index]=alternate;  #mutation introduced to ensure diversity to avoid to get stuck in a local minima \n```", "```py\n return ''.join(childGenes) \n```", "```py\n while True:\n        g+=1\n        child=crossover(bestParent)        #mutation\n        childFitness=get_fitness(child,scenario) #number of correct genes\n        if bestFitness>=childFitness:#\n            continue\n        display(child,bestFitness,childFitness,startTime)\n        bestFitness=childFitness\n        bestParent=child\n        if scenario==1: goal=len(alphaParent);#number of good genes=parent length\n        if scenario==0: goal=threshold;\n        if childFitness>=goal:\n            break \n```", "```py\n     g+=1 \n    ```", "```py\n     child=crossover(bestParent) \n    ```", "```py\n     childFitness=get_fitness(child,scenario) #number of correct genes \n    ```", "```py\n     if bestFitness>=childFitness: \n    ```", "```py\n     display(child,bestFitness,childFitness,startTime)\n            bestFitness=childFitness\n            bestParent=child \n    ```", "```py\n     if scenario==1: goal=len(alphaParent);\n            if scenario==0: goal=threshold; \n    ```", "```py\n     if childFitness>=goal:\n                break \n    ```", "```py\nGenetic Algorithm\ngeneSet: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!.-\n target: Algorithm\nstarttime 2019-10-12 20:47:03.232931\nSelection: Xe!bMSRzV Fittest: 0 This generation Fitness: 0 Time Difference: 0:00:00.000953\nSelection: Xe!bMSRhV Fittest: 0 This generation Fitness: 1 Time Difference: 0:00:00.002404\nSelection: Xl!bMSRhV Fittest: 1 This generation Fitness: 2 Time Difference: 0:00:00.004391\nSelection: XlgbMSRhV Fittest: 2 This generation Fitness: 3 Time Difference: 0:00:00.006860\nSelection: XlgoMSRhV Fittest: 3 This generation Fitness: 4 Time Difference: 0:00:00.009525\nSelection: AlgoMSRhV Fittest: 4 This generation Fitness: 5 Time Difference: 0:00:00.011954\nSelection: AlgorSRhV Fittest: 5 This generation Fitness: 6 Time Difference: 0:00:00.013745\nSelection: AlgorSthV Fittest: 6 This generation Fitness: 7 Time Difference: 0:00:00.016339\nSelection: AlgorithV Fittest: 7 This generation Fitness: 8 Time Difference: 0:00:00.019031\nSelection: Algorithm Fittest: 8 This generation Fitness: 9 Time Difference: 0:00:00.022239 \n```", "```py\n#III. SUMMARY\n    print(\"Summary---------------------------------------------------\")\n    endTime=datetime.datetime.now()\n    print(\"endtime\",endTime)\n    print(\"geneSet:\",geneSet);print(\"target:\",target)\n    print(\"geneSet length:\",len(geneSet))\n    print(\"target length:\",len(target))\n    print(\"generations:\",g)\n    print(\"Note: the process is stochastic so the number of generations will vary\") \n```", "```py\nSummary---------------------------------------------------\nendtime 2019-10-12 20:47:03.257112\ngeneSet: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!.-\ntarget: Algorithm\ngeneSet length: 55\ntarget length: 9\ngenerations: 782\nNote: the process is stochastic so the number of generations will vary \n```", "```py\nif(scenario==1 and GA==3):\n    target=\"FBDC\"  # No space unless specified as a character in the geneSet\n    print(\"geneSet:\",geneSet,\"\\n\",\"target:\",target)\n    ga_main() \n```", "```py\nGenetic Algorithm\ngeneSet: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!.-\ntarget: FBDC \n```", "```py\n    geneSet=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!.-\"   #gene set \n    ```", "```py\n    KPIset =\"0123456772012345674701234569980923456767012345671001234\"   #KPI set \n    ```", "```py\n    threshold=35 \n    ```", "```py\nif(scenario==0 and GA==2):\n    target=\"AAAA\"                         #unspecified target\n    print(\"geneSet:\",geneSet,\"\\n\",\"target:\",target)\n    ga_main() \n```", "```py\n if(scenario==0):\n        cc=list(this_choice) # cc= this choice\n        gs=list(geneSet)     # gene set\n        cv=list(KPIset)      # value of each KPI in the set\n        fitness=0\n        for op1 in range(0,len(geneSet)): #2.first find parent gene in gene set\n            for op in range(0,len(target)):\n                if cc[op]==gs[op1]:       #3.gene identified in gene set\n                    vc=int(cv[op1])       #4.value of critical path constraint\n                    fitness+=vc \n```", "```py\n for op in range(0,len(target)):\n                for op1 in range(0,len(target)):\n                    if op!=op1 and cc[op]==cc[op1]:\n                        fitness=0    # no repetitions allowed, mutation enforcement \n```", "```py\n if scenario==0: goal=threshold;\n        if childFitness>=goal:\n            break \n```", "```py\nGenetic Algorithm\ngeneSet: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!.-\n target: AAAA\nstarttime 2019-10-13 09:08:21.043754\nSelection: PNVx Fittest: 18 This generation Fitness: 18 Time Difference: 0:00:00.001252\nSelection: LNVx Fittest: 18 This generation Fitness: 24 Time Difference: 0:00:00.004130\nSelection: LNVq Fittest: 24 This generation Fitness: 27 Time Difference: 0:00:00.004708\nSelection: LNFq Fittest: 27 This generation Fitness: 29 Time Difference: 0:00:00.010362\nSelection: LBFq Fittest: 29 This generation Fitness: 31 Time Difference: 0:00:00.015797\nSelection: CBFq Fittest: 31 This generation Fitness: 33 Time Difference: 0:00:00.024712\nSelection: CBFt Fittest: 33 This generation Fitness: 34 Time Difference: 0:00:00.032680\nSelection: CBFD Fittest: 34 This generation Fitness: 35 Time Difference: 0:00:00.048524\nSummary---------------------------------------------------\nendtime 2019-10-13 09:08:21.094005\ngeneSet: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!.-\ntarget: AAAA\ngeneSet length: 55\ntarget length: 4\ngenerations: 154\nNote: the process is stochastic so the number of generations will vary \n```", "```py\n    !pip install deap \n    ```", "```py\n     window_size = window_size_bits.uint \n    ```", "```py\n    population_size = 4\n    num_generations = 2\n    gene_length = 10 \n    ```", "```py\nEpoch 1/5\n17200/17200 [==============================] - 207s 12ms/sample - loss: 0.0096\nEpoch 2/5\n17200/17200 [==============================] - 202s 12ms/sample - loss: 0.0059\nEpoch 3/5\n17200/17200 [==============================] - 202s 12ms/sample - loss: 0.0058\nEpoch 4/5\n17200/17200 [==============================] - 200s 12ms/sample - loss: 0.0057\nEpoch 5/5\n17200/17200 [==============================] - 200s 12ms/sample - loss: 0.0057\nTest RMSE: 0.0926447226146452 \n```"]