["```py\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ntrain_scaled = scaler.fit_transform(train_data)\ntest_scaled = scaler.transform(test_data)\n```", "```py\nExercise7.04.ipynb\n# Function to generate real samples\ndef realData(loc,batch):\n    \"\"\"\n    loc is the random location or mean \n    around which samples are centered\n    \"\"\"\n    # Generate numbers to right of the random point\n    xr = np.arange(loc,loc+(0.1*batch/2),0.1)\n    xr = xr[0:int(batch/2)]\n    # Generate numbers to left of the random point\n    xl = np.arange(loc-(0.1*batch/2),loc,0.1)\nThe complete code for this step can be found at https://packt.live/3iIJHVS.\n```", "```py\nhistory = model.fit(X, y, epochs=100, batch_size=5, verbose=1, \\\n                    validation_split=0.2, shuffle=False)\n```", "```py\n# Print the sizes of the dataset\nprint(\"Number of Examples in the Dataset = \", X.shape[0])\nprint(\"Number of Features for each example = \", X.shape[1])\n```", "```py\n\"\"\"\nDefine a seed for the random number generator to ensure the \nresult will be reproducible\n\"\"\"\nseed = 1\nnp.random.seed(seed)\nrandom.set_seed(seed)\n```", "```py\npip --version\n```", "```py\npip install --upgrade pip\n```", "```py\npip install --upgrade tensorflow\n```", "```py\nsudo pip install --upgrade tensorflow\n```", "```py\npip install keras\n```", "```py\nsudo pip install keras\n```"]