["```py\n# R is The Reward Matrix for each location in a warehouse (or any other problem)\nR = ql.matrix([ [0,0,0,0,1,0],\n                [0,0,0,1,0,1],\n                [0,0,100,1,0,0],\n                [0,1,1,0,1,0],\n                [1,0,0,1,0,0],\n                [0,1,0,0,0,0] ]) \n```", "```py\n# The variables\nx = tf.Variable([[0.0,0.0,0.0,0.0,0.0]], dtype = tf.float32)\nW = tf.Variable([[0.0],[0.0],[0.0],[0.0],[0.0]], dtype =\n    tf.float32)\nb = tf.Variable([[0.0]]) \n```", "```py\n# The Neuron\ndef neuron(x, W, b):\n    y1=np.multiply(x,W)+b\n    y1=np.sum(y1)\n    y = 1 / (1 + np.exp(-y1))\n    return y \n```", "```py\n# The data\nx_1 = [[10, 2, 1., 6., 2.]]\nw_t = [[.1, .7, .75, .60, .20]]\nb_1 = [1.0] \n```", "```py\n# Computing the value of the neuron\nvalue=neuron(x_1,w_t,b_1) \n```", "```py\nvalue for threshold calculation:0.99999 \n```", "```py\n>>> print(\"Availability of location x:{0:.5f}\".format(\n...       round(availability,5)))\nAvailability of location x:0.00001 \n```", "```py\n y1=np.multiply(x,W)+b\n    y1=np.sum(y1)\n    y = 1 / (1 + np.exp(-y1)) #logistic Sigmoid \n```", "```py\n    # y is the vector of the scores of the lv vector in the warehouse example:\n    y = [0.0002, 0.2, 0.9,0.0001,0.4,0.6] \n    ```", "```py\n    y_exp = [math.exp(i) for i in y] \n    ```", "```py\n    sum_exp_yi = sum(y_exp) \n    ```", "```py\nsoftmax = [round(i / sum_exp_yi, 3) for i in y_exp] \n```", "```py\ndef softmax(x):\n    return np.exp(x) / np.sum(np.exp(x), axis=0) \n```", "```py\nprint(\"7C.\nFinding the highest value in the normalized y vector : \",ohot) \n```", "```py\nLocations={l1-A, l2-B, l3-C, l4-D, l5-E, l6-F} \n```", "```py\nR = ql.matrix([ [0,0,0,0,1,0],\n                [0,0,0,1,0,1],\n                [0,0,100,1,0,0],\n                [0,1,1,0,1,0],\n                [1,0,0,1,0,0],\n                [0,1,0,0,0,0] ]) \n```"]