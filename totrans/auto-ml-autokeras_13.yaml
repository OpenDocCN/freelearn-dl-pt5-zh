- en: '*Chapter 10*: Exporting and Visualizing the Models'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will see how to export and import our AutoKeras models.
    Once trained, we will also learn to visualize in a graphic way and in real time
    what is happening during the training of our models.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have completed this chapter, you will be able to export and import
    your models to disk and you will have in your toolkit a powerful visualization
    tool that will help you to know what is happening during the training of your
    models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, in this chapter, we will cover these main points:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exporting your models: How to save and load your models from disk'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visualizing your models with TensordBoard: How to visualize your models in
    real time using this powerful tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing and comparing your models with ClearML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start with the first point, but first make sure, as usual, that we have
    all the requirements installed.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All coding examples in this book are available as Jupyter notebooks that can
    be downloaded from the website: [https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras](https://github.com/PacktPublishing/Automated-Machine-Learning-with-AutoKeras).'
  prefs: []
  type: TYPE_NORMAL
- en: As code cells can be executed, each notebook can be self-installable, adding
    a code snippet with the requirements you need. For this reason, at the beginning
    of each notebook, there is a code cell for environment setup, which installs AutoKeras
    and its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in order to run the coding examples, you only require a computer with Ubuntu
    Linux as the OS and can install the Jupyter notebook with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can also run these notebooks using Google Colaboratory. In
    this instance, you will only require a web browser; refer to the *AutoKeras with
    Google Colaboratory* section in [*Chapter 2*](B16953_02_Final_PG_ePub.xhtml#_idTextAnchor029),
    *Getting Started with Autokeras*, for more details. Furthermore, in the main section,
    *Installing AutoKeras*, you will also find other installation options.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's put the concepts of the previous section into practice with a practical
    example.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting your models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best model found by AutoKeras can be easily exported as a Keras model.
  prefs: []
  type: TYPE_NORMAL
- en: 'When saving your models to disk, this can be done in two different formats:
    the TensorFlow SavedModel format, and the older Keras H5 format. The recommended
    format is SavedModel, and this is the option used by default when we call to `model.save()`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to save and load a model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s now see how to export and restore a model step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Export the model to a Keras model using the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, try to save to the TensorFlow format using the h5 format as backup as
    something is wrong:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the model, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code is almost self-explanatory, but we are going to explain the loading
    function in a bit more detail. In this function, which is responsible for loading
    our model from disk into memory, we are passing the `ak.CUSTOM_OBJECTS` value
    as a `custom_objects` parameter. This indicates to the Keras function that the
    model we want to load has custom AutoKeras objects.
  prefs: []
  type: TYPE_NORMAL
- en: Once we know how to import and export our models, it is time to move on to the
    next section, where we will learn to visualize during the training process. This
    will help us to extract perspectives from the learning processes.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing your models with TensorBoard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To develop efficient and successful models, you will need to know what is happening
    during your experiments so that you can react as soon as possible by correcting
    possible anomalous or unwanted results, such as overfitting and slow learning.
    This is where the concept of a tactile callback comes into play.
  prefs: []
  type: TYPE_NORMAL
- en: 'A callback is an object (a class instance that implements specific methods)
    that is passed to the model on the call to fit and that is called by the model
    at various points during training. You have access to all available data on the
    status of the model and its performance and, based on this, take measures including
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Interrupt training, because you have stopped learning or are overfitting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save a model; in this way, the training could be resumed from the saved point
    in the future
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Record metrics, such as precision or loss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alter its state, and modify its structure or hyperparameters, such as the learning
    rate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some examples of the ways in which you can use callbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Model checkpoints: Save current model weights at different points during training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Early stop: Interrupt training when the loss of validation is no longer improving
    (and of course, saving the best model obtained during training).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamically adjust the value of certain parameters during training, such as
    the learning rate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Record training and validation metrics during training, or view representations
    learned by the model as they are updated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are two especially useful callbacks for training, `EarlyStopping` and
    `ModelCheckpoint`. The first one serves to interrupt training once the observed
    metric has stopped improving for the number of times initially set. For example,
    this callback allows you to interrupt training as soon as you start overfitting,
    thereby avoiding having to retrain your model with fewer epochs. This callback
    is typically used in conjunction with `ModelCheckpoint`, which allows you to continuously
    save the model during training.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Example of how to train a model with callbacks'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16953_10_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – Example of how to train a model with callbacks
  prefs: []
  type: TYPE_NORMAL
- en: AutoKeras always saves the best model during training and uses `EarlyStopping`
    by default, setting a number of epochs that varies depending on the type of model
    we are training. However, this behavior can be customized through the callback's
    parameter of the `fit` function.
  prefs: []
  type: TYPE_NORMAL
- en: Using callbacks to log the model state
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Callbacks that record metrics are essential for monitoring since they allow
    tools such as TensorBoard, which we will see here, to visualize in real time the
    learning progress of a model during its training.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in our case, we will set the callbacks to log the training progress with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, we defined a log directory (`log_dir`) and created a callback
    to save the model checkpoints there, which means that AutoKeras will automatically
    save the metrics for each epoch in multiple log files in this folder. We have
    also activated the histograms (`histogram_freq=1`), so in the **Histograms** tab
    of TensorBoard, you can view the histograms of activation values in each layer.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will visualize the logs with TensorBoard, a web application
    for viewing information regarding TensorFlow models. Since AutoKeras has TensorFlow
    under the hood, we can use this tool in an easy way to visualize our models.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and loading TensorBoard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TensorBoard allows us to visualize different metrics in real time, such as loss
    and precision, as well as render the model graph (by layers and operations), along
    with histograms of weights, biases, or other tensors.
  prefs: []
  type: TYPE_NORMAL
- en: TensorBoard can be used directly in the Jupyter notebook and in Colab. This
    is done by loading the TensorBoard extension into the notebook. This is the approach
    we will use in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you have installed Jupyter and TensorBoard on the same virtualenv, you should
    be good to go. If you are using a more complicated setup, such as a global installation
    of Jupyter and kernels for different Conda/virtualenv environments, you need to
    make sure that the TensorBoard binary is in your `PATH` within the context of
    the Jupyter notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to set `callbacks`, as we explained in the previous section,
    to record the training progress in the `logs` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we pass `callbacks` to the training function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the training is done, we are ready to load the `tensorboard` extension
    to visualize the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous lines of code loads the TensorBoard dashboard, feeding it with
    the model `logs` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – TensorBoard showing model training results'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16953_10_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – TensorBoard showing model training results
  prefs: []
  type: TYPE_NORMAL
- en: In the previous screenshot, there are two graphs each with four different lines
    representing the learning progress of two candidate models.
  prefs: []
  type: TYPE_NORMAL
- en: In the first graph, the two highest lines show the epoch accuracy on the training
    and validation set, respectively, while the lower lines show the accuracy of the
    epochs for the training and validation datasets of the other model.
  prefs: []
  type: TYPE_NORMAL
- en: The same happens in the second graph, but in this case, it represents the loss
    instead of the accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see the elements of the model in the **GRAPHS** tab. The **GRAPHS**
    tab displays an interactive low-level TensorFlow graph display of the features
    used by your AutoKeras model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – TensorBoard showing the model graph'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16953_10_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – TensorBoard showing the model graph
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we can see part of the model graph with its different
    layers and operations. As you can see, the model is much more complex than you
    might expect. When you define the classifier, it's only three lines of code, but
    under the hood, AutoKeras builds a fairly complex graph structure to make it work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can also visualize the weight/bias distributions in the different
    layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – TensorBoard showing the distribution of the model layers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16953_10_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – TensorBoard showing the distribution of the model layers
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many more options available to us that we will not explain here.
    TensorBoard is a very powerful and complete tool, and its domain is beyond the
    scope of this book. The following URL is a very good starting point: [https://www.tensorflow.org/tensorboard/get_started](https://www.tensorflow.org/tensorboard/get_started).'
  prefs: []
  type: TYPE_NORMAL
- en: Let's see now in the next section how we can share our experiments with the
    world.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing your ML experiment results with TensorBoard.dev
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TensorBoard.dev is a free public service that allows you to upload your TensorBoard
    records and get a permanent link that can be shared with whoever you want, while
    also being used in your academic articles, blog posts, social media, and so on.
    This can allow better reproducibility and collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use TensorBoard.dev simply by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command uploads to TensorBoard.dev the model `logs` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, clicking on the link will open a browser in which we will see the TensorBoard
    panel on the TensorBoard.dev website, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Model training results shared on TensorBoard.dev](img/B16953_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Model training results shared on TensorBoard.dev
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen, TensorBoard is a very powerful tool for monitoring your models,
    but if you need to track your experiments, as well as compare and share them with
    other teams, there is an AutoKeras extension called ClearML that is specially
    designed for monitoring and tracking experiments, allowing access to TensorBoard
    logs, and complementing it with many more added functions. Let's take a look at
    this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing and comparing your models with ClearML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ClearML (formerly Trains) is a complete open source ML/DL experimentation solution
    that automatically tracks everything you need to document your work, visualize
    results, and reproduce, adjust, and compare experiments using an intuitive web
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'ClearML allows you to perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Visualize experiment results in the ClearML Web UI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track and upload models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track model performance and create tracking leaderboards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rerun experiments, reproduce experiments on any target machine, and tune experiments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare experiments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To use it in your AutoKeras project, you just have to initialize a ClearML Task
    in your code, and ClearML automatically records scalars, graphs, and images reported
    to TensorBoard, Matplotlib, Plotly, and Seaborn, as well as all the other automatic
    logs and explicit reports that you add to your code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding ClearML to code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just add these two lines of code to your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When the code runs, it initializes a Task in ClearML Server. A hyperlink to
    the experiment''s log is output to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: ClearML will inspect the AutoKeras training process and look for TensorBoard
    callbacks, as well as any kind of output, including logs, metrics, images, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the generated experiment link, you can see in real time the dashboards with
    different graphics related to the models autogenerated by AutoKeras. This is done
    during training, and their accuracy, their performance in the training and evaluation
    datasets, console outputs, and many more metrics can also be seen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – ClearML dashboard showing TensorBoard metrics](img/B16953_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – ClearML dashboard showing TensorBoard metrics
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous screenshot, we can see how the precision and loss of our models
    evolves throughout the epochs and, in the next one, we can see the distributions
    of the weights in one of the convolutional layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – ClearML dashboard showing some model layer distributions](img/B16953_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – ClearML dashboard showing some model layer distributions
  prefs: []
  type: TYPE_NORMAL
- en: In the previous screenshots, we can see ClearML panels similar to those shown
    previously in the TensorBoard dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: AutoKeras will generate multiple models during the training process, so let's
    see how ClearML shows us each model's results at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing experiments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With this tool, you can also compare experiments and contrast results in a
    powerful way. There are many comparison options, such as comparing model artifacts,
    hyperparameters, data series graphs, and debug samples for each iteration. It
    also allows you to browse samples with a viewer (for images and video) and a player
    (for audio):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – ClearML dashboard comparing the training results of two models'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16953_10_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.8 – ClearML dashboard comparing the training results of two models
  prefs: []
  type: TYPE_NORMAL
- en: Detailed information on these options and many more can be found in the ClearML
    Web UI documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to define Keras callbacks to monitor your
    models during training, how to use TensorBoard to view histograms, model graphs,
    and many more metrics besides, and how to monitor and track your experiments using
    the ClearML extension.
  prefs: []
  type: TYPE_NORMAL
- en: With these new tools, you will be better equipped to build your deep learning
    models in the real world and debug potential problems.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we have learned the basic concepts necessary to use AutoKeras
    to solve any task based on text, images, or structured data, as well as the visualization
    techniques seen in this chapter. AutoKeras, Keras, and TensorFlow have excellent
    documentation that you can dig into for as long as you need. The foundations are
    already laid; now it's time to finish the building.
  prefs: []
  type: TYPE_NORMAL
- en: A final few words
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the end of *Automated Machine Learning with AutoKeras*! I hope you have
    learned that it will help you to implement your own AI projects or to improve
    the ones you already had, especially in the field of AI, where new concepts are
    born every day. Therefore, I encourage you to keep walking, delving into this
    exciting world, and enjoying every step.
  prefs: []
  type: TYPE_NORMAL
- en: In Spain, on the Camino de Santiago, a phrase is often repeated that says "wanderer,
    there is no path. The path is made by walking."
  prefs: []
  type: TYPE_NORMAL
- en: I hope this book serves as a starting point to continue on that path.
  prefs: []
  type: TYPE_NORMAL
