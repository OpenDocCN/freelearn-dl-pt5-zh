["```py\n    from tensorflow.keras.preprocessing.image import load_img\n    from tensorflow.keras.preprocessing.image import img_to_array\n    from tensorflow.keras.applications.resnet50 import ResNet50\n    from tensorflow.keras.preprocessing import image\n    from tensorflow.keras.applications.resnet50 \\\n    import preprocess_input\n    from tensorflow.keras.applications.resnet50 \\\n    import decode_predictions\n    \\ ) to split the logic across multiple lines. When the code is executed, Python will ignore the backslash, and treat the code on the next line as a direct continuation of the current line.\n    ```", "```py\n    mymodel = ResNet50()\n    ```", "```py\n    myimage = load_img('im1.jpg', target_size=(224, 224))\n    ```", "```py\n    myimage = load_img('D:/projects/demo/im1.jpg', \\\n                       target_size=(224, 224))\n    ```", "```py\n    myimage\n    ```", "```py\n    myimage = img_to_array(myimage)\n    ```", "```py\n    myimage = myimage.reshape((1, 224, 224, 3))\n    ```", "```py\n    myimage = preprocess_input(myimage)\n    ```", "```py\n    myresult = mymodel.predict(myimage)\n    ```", "```py\n    mylabel = decode_predictions(myresult)\n    ```", "```py\n    mylabel = mylabel[0][0]\n    ```", "```py\n    print(\"This is a : \" + mylabel[1])\n    ```", "```py\n    This is a : pizza\n    ```", "```py\n    sayit=\"This is a \"+mylabel[1]\n    ```", "```py\n    !pip install gtts\n    ```", "```py\n    from gtts import gTTS\n    import os\n    ```", "```py\n    myobj = gTTS(text=sayit)\n    ```", "```py\n    myobj.save(\"prediction.mp3\")\n    ```", "```py\n    os.system(\"prediction.mp3\")\n    ```", "```py\na = tf.constant (10)\n```", "```py\ns = tf.constant(\"Hello\")\n```", "```py\nb=tf.Variable(20)\n```", "```py\nC = tf.Variable([[1,2,3],[4,5,6],[7,8,9]])\n```", "```py\ndef myfunc(x,y,c):\n    Z=x*x*y+y+c\n    return Z\n```", "```py\nX=3\nY=4\n```", "```py\n    import tensorflow as tf\n    ```", "```py\n    X=tf.Variable(3)\n    Y=tf.Variable(4)\n    ```", "```py\n    C=tf.constant(2)\n    ```", "```py\n    def myfunc(x,y,c):\n        Z=x*x*y+y+c\n        return Z\n    ```", "```py\n    result=myfunc(X,Y,C)\n    ```", "```py\n    tf.print(result)\n    ```", "```py\n    42\n    ```", "```py\nC = tf.matmul(A,B)\n```", "```py\n    import tensorflow as tf\n    X=tf.Variable([[1,2,3],[4,5,6]])\n    Y=tf.Variable([[7,8],[9,10],[11,12]])\n    ```", "```py\n    tf.print(X)\n    ```", "```py\n    [[1 2 3]\n     [4 5 6]]\n    ```", "```py\n    tf.print(Y)\n    ```", "```py\n    [[7 8]\n     [9 10]\n     [11 12]]\n    ```", "```py\n    c1=tf.matmul(X,Y)\n    ```", "```py\n    tf.print(c1)\n    ```", "```py\n    [[58 64]\n     [139 154]]\n    ```", "```py\n    c2=tf.matmul(Y,X)\n    ```", "```py\n    tf.print(c2)\n    ```", "```py\n    [[39 54 69]\n     [49 68 87]\n     [59 82 105]]\n    ```", "```py\nX=tf.Variable([[1,2,3],[4,5,6]])\n```", "```py\nX.shape\n```", "```py\nTensorShape([2, 3])\n```", "```py\ntf.reshape(X,[3,2])\n```", "```py\n    x=tf.reshape(x,[3,2])\n    ```", "```py\n    import tensorflow as tf\n    A=tf.Variable([[1,2,3,4], \\\n                   [5,6,7,8], \\\n                   [9,10,11,12], \\\n                   [13,14,15,16], \\\n                   [17,18,19,20]])\n    ```", "```py\n    tf.print(A)\n    ```", "```py\n    [[1 2 3 4]\n     [5 6 7 8]\n     [9 10 11 12]\n     [13 14 15 16]\n     [17 18 19 20]]\n    ```", "```py\n    A.shape\n    ```", "```py\n    TensorShape([5, 4])\n    ```", "```py\n    tf.print(tf.reshape(A,[5,4,1]))\n    ```", "```py\n    [[[1]\n      [2]\n      [3]\n      [4]]\n     [[5]\n      [6]\n      [7]\n      [8]]\n     [[9]\n      [10]\n      [11]\n      [12]]\n     [[13]\n      [14]\n      [15]\n      [16]]\n     [[17]\n      [18]\n      [19]\n      [20]]]\n    ```", "```py\n    A.shape\n    ```", "```py\n    TensorShape([5, 4])\n    ```", "```py\n    A = tf.reshape(A,[5,4,1])\n    ```", "```py\n    A.shape\n    ```", "```py\n    TensorShape([5, 4, 1])\n    ```", "```py\n    tf.print(A)\n    ```", "```py\n    [[[1]\n      [2]\n      [3]\n      [4]]\n     [[5]\n      [6]\n      [7]\n      [8]]\n     [[9]\n      [10]\n      [11]\n      [12]]\n     [[13]\n      [14]\n      [15]\n      [16]]\n     [[17]\n      [18]\n      [19]\n      [20]]]\n    ```", "```py\n[2,0,1]\n```", "```py\n[1,2,0]\n```", "```py\n    import tensorflow as tf\n    X=tf.Variable([[91,12,15], [11,88,21],[90, 87,75]])\n    ```", "```py\n    tf.print(X)\n    ```", "```py\n    [[91 12 15]\n     [11 88 21]\n     [90 87 75]]\n    ```", "```py\n    X.shape\n    ```", "```py\n    TensorShape([3, 3])\n    ```", "```py\n    tf.print(tf.argmax(X,axis=0))\n    ```", "```py\n    [0 1 2]\n    ```", "```py\n    tf.print(tf.argmax(X,axis=1))\n    ```", "```py\n    [0 1 0]\n    ```", "```py\nY = mX + b\n```", "```py\ntf.optimizers.Adam()\n```", "```py\noptimizer.minimize(loss,[m,b])\n```", "```py\n    import tensorflow as tf\n    w=tf.Variable(0.0)\n    b=tf.Variable(0.0)\n    ```", "```py\n    def regression(x):\n        model=w*x+b\n        return model\n    ```", "```py\n    x=[1,2,3,4]\n    y=[0,-1,-2,-3]\n    ```", "```py\n    loss=lambda:abs(regression(x)-y)\n    ```", "```py\n    optimizer=tf.optimizers.Adam(.01)\n    ```", "```py\n    for i in range(1000):\n        optimizer.minimize(loss,[w,b])\n    ```", "```py\n    tf.print(w,b)\n    ```", "```py\n    -1.00371706 0.999803364\n    ```", "```py\n    tf.print(regression([1,2,3,4]))\n    ```", "```py\n    [-0.00391370058 -1.00763083 -2.01134801 -3.01506495]\n    ```", "```py\n4.99919891\n```"]