["```py\n    def step_function(x):\n        if x > 0:\n            return 1\n        else:\n            return 0\n```", "```py\n    def step_function(x):\n        y = x > 0\n        return y.astype(np.int)\n```", "```py\n>>> import numpy as np\n>>> x = np.array([-1.0, 1.0, 2.0])\n>>> x\narray([-1., 1., 2.])\n>>> y = x > 0\n>>> y\narray([False, True, True], dtype=bool)\n```", "```py\n>>> y = y.astype(np.int)\n>>> y\narray([0, 1, 1])\n```", "```py\nimport numpy as np\nimport matplotlib.pylab as plt\ndef step_function(x):\n    return np.array(x > 0, dtype=np.int)\nx = np.arange(-5.0, 5.0, 0.1)\ny = step_function(x)\nplt.plot(x, y)\nplt.ylim(-0.1, 1.1) # Specify the range of the y-axis\nplt.show()\n```", "```py\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```", "```py\n>>> x = np.array([-1.0, 1.0, 2.0])\n>>> sigmoid(x)\narray([0.26894142,  0.73105858,  0.88079708])\n```", "```py\n>>> t = np.array([1.0, 2.0, 3.0])\n>>> 1.0 + t\narray([2., 3., 4.])\n>>> 1.0 / t\narray([1\\.  ,  0.5  ,   0.33333333])\n```", "```py\nx = np.arange(-5.0, 5.0, 0.1)\ny = sigmoid(x)\nplt.plot(x, y)\nplt.ylim(-0.1, 1.1) # Specify the range of the y-axis\nplt.show()\n```", "```py\ndef relu(x):\n    return np.maximum(0, x)\n```", "```py\n>>> import numpy as np\n>>> A = np.array([1, 2, 3, 4])\n>>> print(A)\n[1 2 3 4]\n>>> np.ndim(A)\n1\n>>> A.shape\n(4,)\n>>> A.shape[0]\n4\n```", "```py\n>>> B = np.array([[1,2], [3,4], [5,6]])\n>>> print(B)\n[[1 2]\n[3 4]\n[5 6]]\n>>> np.ndim(B)\n2\n>>> B.shape\n(3, 2)\n```", "```py\n>>> A = np.array([[1,2], [3,4]])\n>>> A.shape\n(2, 2)\n>>> B = np.array([[5,6], [7,8]])\n>>> B.shape\n(2, 2)\n>>> np.dot(A, B)\narray([[19, 22],\n    [43, 50]])\n```", "```py\n>>> A = np.array([[1,2,3], [4,5,6]])\n>>> A.shape\n(2, 3)\n>>> B = np.array([[1,2], [3,4], [5,6]])\n>>> B.shape\n(3, 2)\n>>> np.dot(A, B)\narray([[22, 28],\n    [49, 64]])\n```", "```py\n>>> C = np.array([[1,2],  [3,4]])\n>>> C.shape\n(2, 2)\n>>> A.shape\n(2, 3)\n>>> np.dot(A, C)\n```", "```py\n    File \"<stdin>\", line 1, in <module>\nValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)\n```", "```py\n>>> A = np.array([[1,2], [3, 4], [5,6]])\n>>> A.shape\n(3, 2)\n>>> B = np.array([7,8])\n>>> B.shape\n(2,)\n>>> np.dot(A,  B)\narray([23, 53, 83])\n```", "```py\n>>> X = np.array([1, 2])\n>>> X.shape\n(2,)\n>>> W = np.array([[1, 3, 5], [2, 4, 6]])\n>>> print(W)\n[[1 3 5]\n[2 4 6]]\n>>> W.shape\n(2, 3)\n>>> Y = np.dot(X, W)\n>>> print(Y)\n[ 5  11  17]\n```", "```py\nX = np.array([1.0, 0.5])\nW1 = np.array([[0.1, 0.3, 0.5], [0.2, 0.4, 0.6]])\nB1 = np.array([0.1, 0.2, 0.3])\nprint(W1.shape) # (2, 3)\nprint(X.shape)  # (2,)\nprint(B1.shape) # (3,)\nA1 = np.dot(X, W1) + B1\n```", "```py\nZ1 = sigmoid(A1)\nprint(A1) # [0.3, 0.7, 1.1]\nprint(Z1) # [0.57444252, 0.66818777, 0.75026011]\n```", "```py\nW2 = np.array([[0.1, 0.4], [0.2, 0.5], [0.3, 0.6]])\nB2 = np.array([0.1, 0.2])\nprint(Z1.shape) # (3,)\nprint(W2.shape) # (3, 2)\nprint(B2.shape) # (2,)\nA2 = np.dot(Z1, W2) + B2\nZ2 = sigmoid(A2)\n```", "```py\ndef identity_function(x): \n    return x\nW3 = np.array([[0.1, 0.3], [0.2, 0.4]])\nB3 = np.array([0.1, 0.2])\nA3 = np.dot(Z2, W3) + B3\nY = identity_function(A3) # or Y = A3\n```", "```py\ndef init_network(): \n    network = {}\n    network['W1'] = np.array([[0.1,  0.3,  0.5],  [0.2,  0.4,  0.6]])\n    network['b1'] = np.array([0.1,  0.2,  0.3])\n    network['W2'] = np.array([[0.1,  0.4],  [0.2,  0.5],  [0.3,  0.6]])\n    network['b2'] = np.array([0.1,  0.2])\n    network['W3'] = np.array([[0.1,  0.3],  [0.2,  0.4]]) \n    network['b3'] = np.array([0.1,  0.2])\n    return network\ndef forward(network, x):\n    W1, W2, W3 = network['W1'], network['W2'], network['W3']\n    b1, b2, b3 = network['b1'], network['b2'], network['b3']\n    a1 = np.dot(x, W1) + b1\n    z1 = sigmoid(a1)\n    a2 = np.dot(z1, W2)  +  b2 \n    z2 = sigmoid(a2)\n    a3 = np.dot(z2,  W3)  +  b3\n    y = identity_function(a3)\n    return y\nnetwork = init_network() \nx =  np.array([1.0,  0.5]) \ny = forward(network, x)\nprint(y) # [ 0.31682708 0.69627909]\n```", "```py\n>>> a = np.array([0.3, 2.9, 4.0])\n>>>\n>>> exp_a = np.exp(a) # Exponential function\n>>> print(exp_a)\n[ 1.34985881 18.17414537 54.59815003]\n>>>\n>>> sum_exp_a = np.sum(exp_a) # Sum of exponential functions\n>>> print(sum_exp_a)\n74.1221542102\n>>>\n>>> y = exp_a / sum_exp_a\n>>> print(y)\n[ 0.01821127 0.24519181 0.73659691]\n```", "```py\ndef softmax(a):\n    exp_a = np.exp(a) \n    sum_exp_a = np.sum(exp_a)\n    y = exp_a / sum_exp_a\n    return y\n```", "```py\n>>> a = np.array([1010, 1000, 990])\n>>> np.exp(a) / np.sum(np.exp(a)) # Calculating the softmax function\narray([  nan,   nan,   nan]) # Not calculated correctly\n>>>\n>>> c = np.max(a) # 1010\n>>> a - c\narray([ 0, -10, -20])\n>>>\n>>> np.exp(a - c) / np.sum(np.exp(a - c))\narray([   9.99954600e-01,\t4.53978686e-05,\t2.06106005e-09])\n```", "```py\ndef softmax(a):\n    c = np.max(a)\n    exp_a = np.exp(a - c) # Prevent an overflow\n    sum_exp_a = np.sum(exp_a)\n    y = exp_a / sum_exp_a \n    return y\n```", "```py\n>>> a = np.array([0.3, 2.9, 4.0])\n>>> y = softmax(a)\n>>> print(y)\n[ 0.01821127 0.24519181 0.73659691]\n>>> np.sum(y)\n1.0\n```", "```py\nimport sys, os\nsys.path.append(os.pardir) # Configure to import the files in the parent directory\nfrom dataset.mnist import load_mnist\n# Waits for a few minutes for the first call ... \n(x_train, t_train), (x_test, t_test) = ∖\n    load_mnist(flatten=True, normalize=False)\n# Output the shape of each data\nprint(x_train.shape) # (60000, 784)\nprint(t_train.shape) # (60000,)\nprint(x_test.shape) # (10000, 784)\nprint(t_test.shape) # (10000,)\n```", "```py\nimport sys, os\nsys.path.append(os.pardir)\nimport numpy as np\nfrom dataset.mnist import load_mnist\nfrom PIL import Image\ndef img_show(img):\n    pil_img = Image.fromarray(np.uint8(img)) \n    pil_img.show()\n(x_train, t_train), (x_test, t_test) = /\n    load_mnist(flatten=True, normalize=False)\n    img = x_train[0] \n    label = t_train[0] \n    print(label) # 5\n    print(img.shape)\t# (784,)\n    img = img.reshape(28, 28) # Reshape the image based on the original size\n    print(img.shape)\t# (28, 28) \n    img_show(img)\n```", "```py\ndef get_data():\n    (x_train, t_train), (x_test, t_test) = /\n        load_mnist(normalize=True, flatten=True, one_hot_label=False)\n    return x_test, t_test\ndef init_network():\n    with open(\"sample_weight.pkl\", 'rb') as f: \n        network = pickle.load(f)\n    return network\ndef predict(network, x):\n    W1, W2, W3 = network['W1'], network['W2'], network['W3']\n    b1, b2, b3 = network['b1'], network['b2'], network['b3']\n    a1 = np.dot(x, W1) + b1\n    z1 = sigmoid(a1)\n    a2 = np.dot(z1, W2) + b2\n    z2 = sigmoid(a2)\n    a3 = np.dot(z2, W3) + b3\n    y = softmax(a3)\n    return y\n```", "```py\nx, t = get_data() \nnetwork = init_network()\naccuracy_cnt = 0\nfor i in range(len(x)):\n    y = predict(network, x[i])\n    p = np.argmax(y) # Obtain the index of the most probable element\n    if p == t[i]:\n        accuracy_cnt += 1\nprint(\"Accuracy:\" + str(float(accuracy_cnt) / len(x)))\n```", "```py\n>>> x, _ = get_data( )\n>>> network = init_network( )\n>>> W1, W2, W3 = network['W1'], network['W2'], network['W3']\n>>>\n>>> x.shape\n(10000, 784)\n>>> x[0].shape\n(784,)\n>>> W1.shape\n(784, 50)\n>>> W2.shape\n(50, 100)\n>>> W3.shape\n(100, 10)\n```", "```py\nx, t = get_data( ) \nnetwork = init_network( )\nbatch_size = 100 # Number of batches\naccuracy_cnt = 0\nfor i in range(0, len(x), batch_size):\n    x_batch = x[i:i+batch_size]\n    y_batch = predict(network, x_batch)\n    p = np.argmax(y_batch, axis=1)\n    accuracy_cnt += np.sum(p == t[i:i+batch_size])\nprint(\"Accuracy:\" + str(float(accuracy_cnt) / len(x)))\n```", "```py\n>>> list( range(0, 10) )\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> list( range(0, 10, 3) )\n[0, 3, 6, 9]\n```", "```py\n>>> x = np.array([[0.1, 0.8, 0.1], [0.3, 0.1, 0.6],\n... [0.2, 0.5, 0.3], [0.8, 0.1, 0.1]])\n>>> y = np.argmax(x, axis=1)\n>>> print(y)\n[1 2 1 0]\n```", "```py\n>>> y = np.array([1, 2, 1, 0])\n>>> t = np.array([1, 2, 0, 0])\n>>> print(y==t)\n[True True False True]\n>>> np.sum(y==t)\n3\n```"]