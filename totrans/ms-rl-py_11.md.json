["```py\nEnvironment-ID: Short description\n{'HeteNcomIndePOIntrxMATLS1B2C1PTWN3-v0': \n'Heterogeneous, Non-communicating, '\n'Independent,Partially-Observable '\n'Intersection Multi-Agent scenario '\n'with Traffic-Light Signal, 1-Bike, '\n'2-Car,1-Pedestrian in Town3, '\n'version 0'}\n```", "```py\n> env.reset()\n{\"agent_1\": [[...]], \"agent_2\":[[...]], \"agent_4\":[[...]],...\n```", "```py\n... = env.step(actions={\"agent_1\": ..., \"agent_2\":..., \"agent_4\":..., ...\n```", "```py\nclass TicTacToe(MultiAgentEnv):\n    def __init__(self, config=None):\n        self.s = 9\n        self.action_space = Discrete(self.s)\n        self.observation_space = MultiDiscrete([3] * self.s)\n        self.agents = [\"X\", \"O\"]\n        self.empty = \" \"\n        self.t, self.state, self.rewards_to_send = \\\n                                    self._reset()\n```", "```py\n    def _next_agent(self, t):\n        return self.agents[int(t % len(self.agents))]\n    def _reset(self):\n        t = 0\n        agent = self._next_agent(t)\n        state = {\"turn\": agent, \n                 \"board\": [self.empty] * self.s}\n        rews = {a: 0 for a in self.agents}\n        return t, state, rews\n```", "```py\n    def _agent_observation(self, agent):\n        obs = np.array([0] * self.s)\n        for i, e in enumerate(self.state[\"board\"]):\n            if e == agent:\n                obs[i] = 1\n            elif e == self.empty:\n                pass\n            else:\n                obs[i] = 2\n        return obs\n```", "```py\n    def reset(self):\n        self.t, self.state, self.rewards_to_send =\\\n                            self._reset()\n        obs = {self.state[\"turn\"]: \\\n               self._agent_observation(self.state[\"turn\"])}\n        return obs\n```", "```py\n    env = TicTacToe()\n    num_policies = 4\n    policies = {\n        \"policy_{}\".format(i): (None, \n                                env.observation_space, \n                                env.action_space, {})\n        for i in range(num_policies)}\n```", "```py\n    policy_ids = list(policies.keys())\n    config = {\n        \"multiagent\": {\n            \"policies\": policies,\n            \"policy_mapping_fn\": (lambda agent_id: \\\n                           random.choice(policy_ids)),\n        },\n...\n```", "```py\n    trainer = PPOTrainer(env=TicTacToe, config=config)\n    best_eps_len = 0\n    mean_reward_thold = -1\n    while True:\n        results = trainer.train()\n        if results[\"episode_reward_mean\"] > mean_reward_thold\\\n           and results[\"episode_len_mean\"] > best_eps_len:\n            trainer.save(\"ttt_model\")\n            best_eps_len = results[\"episode_len_mean\"]\n        if results.get(\"timesteps_total\") > 10 ** 7:\n            break\n```"]