["```py\nimport numpy as np\ndata = np.loadtxt(filename, delimiter=\",\", skiprows=1)\n```", "```py\nimport pandas as pd\ndata = pd.read_csv(filename, delimiter=\",\")\n```", "```py\nimport pandas as pd\ndata = pd.read_json(filename)\n```", "```py\nimport pandas as pd\ndata = pd.read_sql(con, \"SELECT * FROM table\")\n```", "```py\n    import pandas as pd\n    data = pd.read_csv('../data/online_shoppers_intention.csv')\n    ```", "```py\n    data.head(20)\n    ```", "```py\n    data.shape\n    ```", "```py\n    (12330, 18)\n    ```", "```py\n    feats = data.drop('Revenue', axis=1)\n    target = data['Revenue']\n    ```", "```py\n    print(f'Features table has {feats.shape[0]} \\\n    rows and {feats.shape[1]} columns')\n    print(f'Target table has {target.shape[0]} rows')\n    ```", "```py\n    Features table has 12330 rows and 17 columns\n    Target table has 12330 rows\n    ```", "```py\n    feats.to_csv('../data/OSI_feats.csv', index=False)\n    target.to_csv('../data/OSI_target.csv', \\\n                  header='Revenue', index=False)\n    ```", "```py\n    %matplotlib inline\n    import pandas as pd\n    data = pd.read_csv('../data/OSI_feats.csv')\n    ```", "```py\n    data.head(20)\n    ```", "```py\n    data.describe()\n    ```", "```py\n    data['Weekend'].value_counts()\n    ```", "```py\n    data['Weekend'].value_counts().plot(kind='bar')\n    ```", "```py\n    data['is_weekend'] = data['Weekend'].apply(lambda \\\n                         row: 1 if row == True else 0)\n    ```", "```py\n    data[['Weekend','is_weekend']].tail()\n    ```", "```py\n    data.drop('Weekend', axis=1, inplace=True)\n    ```", "```py\n    help(pd.get_dummies)\n    ```", "```py\n    data['VisitorType'].value_counts()\n    data['VisitorType'].value_counts().plot(kind='bar')\n    ```", "```py\n    colname = 'VisitorType'\n    visitor_type_dummies = pd.get_dummies(data[colname], \\\n                                          prefix=colname)\n    pd.concat([data[colname], \\\n               visitor_type_dummies], axis=1).tail(n=10)\n    ```", "```py\n    visitor_type_dummies.drop('VisitorType_Other', \\\n                              axis=1, inplace=True)\n    visitor_type_dummies.head()\n    ```", "```py\n    data = pd.concat([data, visitor_type_dummies], axis=1)\n    data.drop('VisitorType', axis=1, inplace=True) \n    ```", "```py\n    colname = 'Month'\n    month_dummies = pd.get_dummies(data[colname], prefix=colname)\n    month_dummies.drop(colname+'_Feb', axis=1, inplace=True)\n    data = pd.concat([data, month_dummies], axis=1)\n    data.drop('Month', axis=1, inplace=True) \n    ```", "```py\n    data.dtypes\n    ```", "```py\n    data.to_csv('../data/OSI_feats_e2.csv', index=False)\n    ```", "```py\n    target = pd.read_csv('../data/OSI_target.csv')\n    target.head(n=10)\n    ```", "```py\n    target['Revenue'] = target['Revenue'].apply(lambda row: 1 \\\n                        if row==True else 0)\n    target.head(n=10)\n    ```", "```py\n    target.to_csv('../data/OSI_target_e2.csv', index=False)\n    ```", "```py\n    import pandas as pd\n    data = pd.read_csv('../data/OSI_feats_e2.csv')\n    ```", "```py\n    data['OperatingSystems'].value_counts()\n    ```", "```py\n    colname = 'OperatingSystems'\n    operation_system_dummies = pd.get_dummies(data[colname], \\\n                               prefix=colname)\n    ```", "```py\n    operation_system_dummies.drop(colname+'_5', axis=1, \\\n                                  inplace=True)\n    data = pd.concat([data, operation_system_dummies], axis=1)\n    ```", "```py\n    data['Browser'].value_counts()\n    ```", "```py\n    colname = 'Browser'\n    browser_dummies = pd.get_dummies(data[colname], \\\n                      prefix=colname)\n    browser_dummies.drop(colname+'_9', axis=1, inplace=True)\n    data = pd.concat([data, browser_dummies], axis=1)\n    ```", "```py\n    colname = 'TrafficType'\n    data[colname].value_counts()\n    traffic_dummies = pd.get_dummies(data[colname], prefix=colname)\n    # value 17 occurs with lowest frequency\n    traffic_dummies.drop(colname+'_17', axis=1, inplace=True)\n    data = pd.concat([data, traffic_dummies], axis=1)\n    colname = 'Region'\n    data[colname].value_counts()\n    region_dummies = pd.get_dummies(data[colname], \\\n                     prefix=colname)\n    # value 5 occurs with lowest frequency\n    region_dummies.drop(colname+'_5', axis=1, inplace=True)\n    data = pd.concat([data, region_dummies], axis=1)\n    ```", "```py\n    data.dtypes\n    ```", "```py\n    data.to_csv('../data/OSI_feats_e3.csv', index=False)\n    ```", "```py\n    import pandas as pd\n    feats = pd.read_csv('../data/OSI_feats_e3.csv')\n    target = pd.read_csv('../data/OSI_target_e2.csv')\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    test_size = 0.2\n    random_state = 42\n    X_train, X_test, \\\n    y_train, y_test = train_test_split(feats, target, \\\n                                       test_size=test_size, \\\n                                       random_state=random_state)\n    ```", "```py\n    print(f'Shape of X_train: {X_train.shape}')\n    print(f'Shape of y_train: {y_train.shape}')\n    print(f'Shape of X_test: {X_test.shape}')\n    print(f'Shape of y_test: {y_test.shape}')\n    ```", "```py\n    Shape of X_train: (9864, 68)\n    Shape of y_train: (9864, 1)\n    Shape of X_test: (2466, 68)\n    Shape of y_test: (2466, 1)\n    ```", "```py\n    from sklearn.linear_model import LogisticRegression\n    model = LogisticRegression(random_state=42)\n    ```", "```py\n    model.fit(X_train, y_train['Revenue'])\n    ```", "```py\n    y_pred = model.predict(X_test)\n    ```", "```py\n    from sklearn import metrics\n    accuracy = metrics.accuracy_score(y_pred=y_pred, \\\n                                      y_true=y_test)\n    print(f'Accuracy of the model is {accuracy*100:.4f}%')\n    ```", "```py\n    Accuracy of the model is 87.0641%\n    ```", "```py\n    precision, recall, fscore, _ = \\\n    metrics.precision_recall_fscore_support(y_pred=y_pred, \\\n                                            y_true=y_test, \\\n                                            average='binary')\n    print(f'Precision: {precision:.4f}\\nRecall: \\\n    {recall:.4f}\\nfscore: {fscore:.4f}')\n    Precision: 0.7347\n    Recall: 0.3504\n    fscore: 0.4745\n    ```", "```py\n    coef_list = [f'{feature}: {coef}' for coef, \\\n                 feature in sorted(zip(model.coef_[0], \\\n                 X_train.columns.values.tolist()))]\n    for item in coef_list:\n        print(item)\n    ```", "```py\n    import pandas as pd\n    target = pd.read_csv('../data/OSI_target_e2.csv')\n    ```", "```py\n    target['Revenue'].value_counts()/target.shape[0]*100\n    ```", "```py\n    from sklearn import metrics\n    y_baseline = pd.Series(data=[0]*target.shape[0])\n    precision, recall, \\\n    fscore, _ = metrics.precision_recall_fscore_support\\\n                (y_pred=y_baseline, \\\n                 y_true=target['Revenue'], average='macro')\n    ```", "```py\n    print(f'Precision: {precision:.4f}\\nRecall:\\\n    {recall:.4f}\\nfscore: {fscore:.4f}')\n    ```", "```py\n    Precision: 0.9226\n    Recall: 0.5000\n    Fscore: 0.4581\n    ```", "```py\nmodel_l1 = LogisticRegressionCV(Cs=Cs, penalty='l1', \\\n                                cv=10, solver='liblinear', \\\n                                random_state=42)\nmodel_l2 = LogisticRegressionCV(Cs=Cs, penalty='l2', \\\n                                cv=10, random_state=42)\n```", "```py\nmodel_l1.fit(X_train, y_train['Revenue'])\nmodel_l2.fit(X_train, y_train['Revenue'])\n```", "```py\nl1\nPrecision: 0.7300\nRecall: 0.4078\nfscore: 0.5233\nl2\nPrecision: 0.7350\nRecall: 0.4106\nfscore: 0.5269\n```"]