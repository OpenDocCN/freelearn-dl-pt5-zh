["```py\n    import sagemaker\n    from sagemaker import get_execution_role\n    ```", "```py\n    role = get_execution_role() \n    sess = sagemaker.Session() \n    ```", "```py\n    training_image = sagemaker.image_uris.retrieve('image-classification', sess.boto_region_name)\n    ```", "```py\n    num_instances = 2\n    ```", "```py\n    instance_type = \"ml.p2.xlarge\"\n    ```", "```py\n    data_channels = {\n        'train': f\"s3://{sess.default_bucket()}/data/train\", \n        'validation': f\"s3://{sess.default_bucket()}/data/validation\", \n        'train_lst': f\"s3://{sess.default_bucket()}/data/train.lst\",\n        'vadidation_lst': f\"s3://{sess.default_bucket()}/data/validation.lst\",\n    }\n    ```", "```py\n    hyperparameters=dict(\n        use_pretrained_model=1,\n        image_shape='3,224,224',\n        num_classes=10,\n        num_training_samples=40000, # TODO: update it\n        learning_rate=0.001,\n        mini_batch_size= 8    \n    )\n    ```", "```py\n    image_classifier = sagemaker.estimator.Estimator(\n        training_image,\n        role, \n        train_instance_count= num_instances, \n        train_instance_type= instance_type,\n        sagemaker_session=sess,\n        hyperparameters=hyperparameters,\n    )\n    ```", "```py\n    image_classifier.fit(inputs=data_channels, job_name=\"sample-train\")\n    ```", "```py\ndocker run [TrainingImage] train\n```", "```py\n    import sagemaker\n    from sagemaker import get_execution_role\n    role = get_execution_role()\n    sess = sagemaker.Session()\n    ```", "```py\n    image_uri = sagemaker.image_uris.retrieve('image-classification', sess.boto_region_name)\n    ```", "```py\n    model_data = f\"s3://{sess.default_bucket}/model_location\"\n    ```", "```py\n    model = Model(\n    image_uri=image_uri, \n    model_data=model_data,\n    name=\"image-classification-endpoint\",\n    sagemaker_session=sess,\n    role=role\n    )\n    ```", "```py\n    endpoint_name = \"image-classification-endpoint\"\n    instance_type = \"ml.g4dn.xlarge\"\n    instance_count = 1\n    ```", "```py\n    predictor = model.deploy(\n    instance_type=instance_type, \n    initial_instance_count=instance_count,\n    endpoint_name=endpoint_name,\n    )\n    ```", "```py\ndocker run image serve\n```"]