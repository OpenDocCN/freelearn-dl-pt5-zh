["```py\n    import open3d\n    import os\n    import sys\n    import torch\n    import matplotlib.pyplot as plt\n    from pytorch3d.io import load_objs_as_meshes\n    from pytorch3d.renderer import (\n        look_at_view_transform,\n        PerspectiveCameras,\n        PerspectiveCameras,\n        PointLights,\n        Materials,\n        RasterizationSettings,\n        MeshRenderer,\n        MeshRasterizer\n    )\n    from pytorch3d.renderer.mesh.shader import HardPhongShader\n    sys.path.append(os.path.abspath(''))\n    ```", "```py\n    DATA_DIR = \"./data\"\n    obj_filename = os.path.join(DATA_DIR, \"cow_mesh/cow.obj\")\n    device = torch.device('cuda')\n    mesh = load_objs_as_meshes([obj_filename], device=device)\n    ```", "```py\n    R, T = look_at_view_transform(2.7, 0, 180)\n    cameras = PerspectiveCameras(device=device, R=R, T=T)\n    lights = PointLights(device=device, location=[[0.0, 0.0, -3.0]])\n    ```", "```py\n    raster_settings = RasterizationSettings(\n        image_size=512,\n        blur_radius=0.0,\n        faces_per_pixel=1,\n    )\n    renderer = MeshRenderer(\n        rasterizer=MeshRasterizer(\n            cameras=cameras,\n            raster_settings=raster_settings\n        ),\n        shader = HardPhongShader(\n            device = device,\n            cameras = cameras,\n            lights = lights\n        )\n    )\n    ```", "```py\n    images = renderer(mesh)\n    plt.figure(figsize=(10, 10))\n    plt.imshow(images[0, ..., :3].cpu().numpy())\n    plt.axis(\"off\")\n    plt.savefig('light_at_front.png')\n    plt.show()\n    ```", "```py\n    lights.location = torch.tensor([0.0, 0.0, +1.0], device=device)[None]\n    images = renderer(mesh, lights=lights, )\n    plt.figure(figsize=(10, 10))\n    plt.imshow(images[0, ..., :3].cpu().numpy())\n    plt.axis(\"off\")\n    plt.savefig('light_at_back.png')\n    plt.show()\n    ```", "```py\n    materials = Materials(\n        device=device,\n        specular_color=[[0.0, 1.0, 0.0]],\n        shininess=10.0,\n        ambient_color=((0.01, 0.01, 0.01),),\n    )\n    images = renderer(mesh, lights=lights, materials = materials)\n    plt.figure(figsize=(10, 10))\n    plt.imshow(images[0, ..., :3].cpu().numpy())\n    plt.axis(\"off\")\n    plt.savefig('dark.png')\n    plt.show()\n    ```", "```py\n    R, T = look_at_view_transform(dist=2.7, elev=10, azim=-150)\n    cameras = PerspectiveCameras(device=device, R=R, T=T)\n    lights.location = torch.tensor([[2.0, 2.0, -2.0]], device=device)\n    materials = Materials(\n        device=device,\n        specular_color=[[0.0, 1.0, 0.0]],\n        shininess=10.0\n    )\n    images = renderer(mesh, lights=lights, materials=materials, cameras=cameras)\n    plt.figure(figsize=(10, 10))\n    plt.imshow(images[0, ..., :3].cpu().numpy())\n    plt.axis(\"off\")\n    plt.savefig('green.png')\n    plt.show()\n    ```", "```py\n    materials = Materials(\n        device=device,\n        specular_color=[[1.0, 0.0, 0.0]],\n        shininess=20.0\n    )\n    images = renderer(mesh, lights=lights, materials=materials, cameras=cameras)\n    plt.figure(figsize=(10, 10))\n    plt.imshow(images[0, ..., :3].cpu().numpy())\n    plt.savefig('red.png')\n    plt.axis(\"off\")\n    plt.show()\n    ```", "```py\n    materials = Materials(\n        device=device,\n        specular_color=[[0.0, 0.0, 0.0]],\n        shininess=0.0\n    )\n    images = renderer(mesh, lights=lights, materials=materials, cameras=cameras)\n    plt.figure(figsize=(10, 10))\n    plt.imshow(images[0, ..., :3].cpu().numpy())\n    plt.savefig('blue.png')\n    plt.axis(\"off\")\n    plt.show()\n    ```", "```py\n    import open3d\n    import os\n    import torch\n    from pytorch3d.io import load_objs_as_meshes\n    from pytorch3d.structures.meshes import join_meshes_as_batch\n    from pytorch3d.ops import sample_points_from_meshes\n    from pytorch3d.loss import chamfer_distance\n    import numpy as np\n    ```", "```py\n    if torch.cuda.is_available():\n        device = torch.device(\"cuda:0\")\n    else:\n        device = torch.device(\"cpu\")\n        print(\"WARNING: CPU only, this will be slow!\")\n    ```", "```py\n    mesh_names = ['cube.obj', 'diamond.obj', 'dodecahedron.obj']\n    data_path = './data'\n    for mesh_name in mesh_names:\n        mesh = open3d.io.read_triangle_mesh(os.path.join(data_path, mesh_name))\n        open3d.visualization.draw_geometries([mesh],\n                                      mesh_show_wireframe = True,\n                                      mesh_show_back_face = True,\n                                         )\n    ```", "```py\n    mesh_list = list()\n    device = torch.device('cuda')\n    for mesh_name in mesh_names:\n        mesh = load_objs_as_meshes([os.path.join(data_path, mesh_name)], device=device)\n        mesh_list.append(mesh)\n    ```", "```py\n    mesh_batch = join_meshes_as_batch(mesh_list, include_textures = False)\n    ```", "```py\n    vertex_list = mesh_batch.verts_list()\n    print('vertex_list = ', vertex_list)\n    face_list = mesh_batch.faces_list()\n    print('face_list = ', face_list)\n    ```", "```py\n    vertex_padded = mesh_batch.verts_padded()\n    print('vertex_padded = ', vertex_padded)\n    face_padded = mesh_batch.faces_padded()\n    print('face_padded = ', face_padded)\n    ```", "```py\n    vertex_packed = mesh_batch.verts_packed()\n    print('vertex_packed = ', vertex_packed)\n    face_packed = mesh_batch.faces_packed()\n    print('face_packed = ', face_packed)\n    num_vertices = vertex_packed.shape[0]\n    print('num_vertices = ', num_vertices)\n    ```", "```py\n    mesh_batch_noisy = mesh_batch.clone()\n    ```", "```py\n    motion_gt = np.array([3, 4, 5])\n    motion_gt = torch.as_tensor(motion_gt)\n    print('motion ground truth = ', motion_gt)\n    motion_gt = motion_gt[None, :]\n    motion_gt = motion_gt.to(device)\n    ```", "```py\n    noise = (0.1**0.5)*torch.randn(mesh_batch_noisy.verts_packed().shape).to(device)\n    motion_gt = np.array([3, 4, 5])\n    motion_gt = torch.as_tensor(motion_gt)\n    noise = noise + motion_gt\n    mesh_batch_noisy = mesh_batch_noisy.offset_verts(noise).detach()\n    ```", "```py\n    motion_estimate = torch.zeros(motion_gt.shape, device = device, requires_grad=True)\n    ```", "```py\n    optimizer = torch.optim.SGD([motion_estimate], lr=0.1, momentum=0.9)\n    ```", "```py\nfor i in range(0, 200):\n```", "```py\n    optimizer.zero_grad()\n```", "```py\n    current_mesh_batch = mesh_batch.offset_verts(motion_estimate.repeat(num_vertices,1))\n```", "```py\n    sample_trg = sample_points_from_meshes(current_mesh_batch, 5000)\n```", "```py\n    sample_src = sample_points_from_meshes(mesh_batch_noisy, 5000)\n```", "```py\n    loss, _ = chamfer_distance(sample_trg, sample_src)\n```", "```py\n    loss.backward()\n```", "```py\n    optimizer.step()\n```", "```py\n    print('i = ', i, ', motion_estimation = ', motion_estimate)\n```", "```py\n    import torch\n    from pytorch3d.transforms.so3 import so3_exp_map, so3_log_map, hat_inv, hat\n    ```", "```py\n    if torch.cuda.is_available():\n        device = torch.device(\"cuda:0\")\n    else:\n        device = torch.device(\"cpu\")\n        print(\"WARNING: CPU only, this will be slow!\")\n    ```", "```py\n    log_rot = torch.zeros([4, 3], device = device)\n    log_rot[0, 0] = 0.001\n    log_rot[0, 1] = 0.0001\n    log_rot[0, 2] = 0.0002\n    log_rot[1, 0] = 0.0001\n    log_rot[1, 1] = 0.001\n    log_rot[1, 2] = 0.0002\n    log_rot[2, 0] = 0.0001\n    log_rot[2, 1] = 0.0002\n    log_rot[2, 2] = 0.001\n    log_rot[3, 0] = 0.001\n    log_rot[3, 1] = 0.002\n    log_rot[3, 2] = 0.003\n    ```", "```py\n    log_rot_hat = hat(log_rot)\n    print('log_rot_hat shape = ', log_rot_hat.shape)\n    print('log_rot_hat = ', log_rot_hat)\n    ```", "```py\n    log_rot_copy = hat_inv(log_rot_hat)\n    print('log_rot_copy shape = ', log_rot_copy.shape)\n    print('log_rot_copy = ', log_rot_copy)\n    ```", "```py\n    rotation_matrices = so3_exp_map(log_rot)\n    print('rotation_matrices = ', rotation_matrices)\n    ```", "```py\n    log_rot_again = so3_log_map(rotation_matrices)\n    print('log_rot_again = ', log_rot_again)\n    ```"]