["```py\npip install nengo \n```", "```py\npip install nengo-gui \n```", "```py\n    import nengo\n    model = nengo.Network()\n    with model:\n        #<your code here> \n    ```", "```py\nnengo.Ensemble \n```", "```py\nensemblex = nengo.Ensemble(n_neurons=5, dimensions=1) \n```", "```py\nens = nengo.Ensemble(n_neurons=50... \n```", "```py\nens = nengo.Ensemble(..., dimensions=1) \n```", "```py\nnode_number = nengo.Node(output=0.5) \n```", "```py\nnode_function = nengo.Node(output=np.sin) \n```", "```py\nnengo.Connection(node_function, ens) \n```", "```py\nimport matplotlib.pyplot as plt\nfrom nengo.utils.matplotlib import rasterplot\nfrom nengo.dists import Uniform \n```", "```py\nmodel = nengo.Network(\"Probing\")\nwith model:\n    ens = nengo.Ensemble(n_neurons=50, dimensions=1)\n    #node_number = nengo.Node(output=0.5)\n    node_function=nengo.Node(output=np.sin)\n    nengo.Connection(node_function, ens)\n    print(ens.probeable)\nwith model:\n    # Connect the input signal to the neuron\n    nengo.Connection(node_function, ens) \n```", "```py\n # The original input\n    function_probe = nengo.Probe(node_function)\n    # The raw spikes from the neuron\n    spikes = nengo.Probe(ens.neurons)\n    # Subthreshold soma voltage of the neuron\n    voltage = nengo.Probe(ens.neurons, 'voltage')\n    # Spikes filtered by a 10ms post-synaptic filter\n    filtered = nengo.Probe(ens, synapse=0.01) \n```", "```py\nwith nengo.Simulator(model) as sim:  # Create the simulator\n    sim.run(5) \n```", "```py\n    print(\"Decoded output of the ensemble\")\n    print(sim.trange(), sim.data[filtered]) \n    ```", "```py\n    [1.000e-03 2.000e-03 3.000e-03 ... 4.998e+00 4.999e+00 5.000e+00] [[ 0\\.        ]\n     [ 0\\.        ]\n     [-0.03324582]\n     ...\n     [-1.26366121]\n     [-1.22083471]\n     [-1.18750863]] \n    ```", "```py\n    # Plot the decoded output of the ensemble\n    plt.figure()\n    plt.plot(sim.trange(), sim.data[filtered])\n    #plt.plot(sim.trange(), sim.data[node_function])\n    plt.xlim(0, 1)\n    plt.suptitle('Filter decoded output', fontsize=16) \n    ```", "```py\n    print(\"Spikes\")\n    print(sim.trange(),sim.data[spikes]) \n    ```", "```py\n    [1.000e-03 2.000e-03 3.000e-03 ... 4.998e+00 4.999e+00 5.000e+00] [[   0\\.    0\\.    0\\. ...    0\\.    0\\.    0.]\n     [   0\\.    0\\.    0\\. ...    0\\.    0\\.    0.]\n     [   0\\.    0\\.    0\\. ... 1000\\.    0\\.    0.]\n     ...\n     [   0\\.    0\\. 1000\\. ...    0\\.    0\\.    0.]\n     [   0\\.    0\\.    0\\. ...    0\\.    0\\.    0.] \n    ```", "```py\n    print(\"Voltage\")\n    print((sim.trange(), sim.data[voltage][:, 0])) \n    ```", "```py\n    (array([1.000e-03, 2.000e-03, 3.000e-03, ..., 4.998e+00, 4.999e+00,\n           5.000e+00]), array([0., 0., 0., ..., 0., 0., 0.])) \n    ```"]