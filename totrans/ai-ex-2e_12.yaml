- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AI and the Internet of Things (IoT)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some people say the **Internet of things** (**IoT**) will turn out to become
    the fourth Industrial Revolution. Let's wait a few years until the smoke clears
    and then let historians figure out what sort of revolution we went through.
  prefs: []
  type: TYPE_NORMAL
- en: In any case, **connected objects** have been changing our lives for at least
    the past two decades. Given all that we have seen in recent years, we can safely
    say that IoT has become disruptive.
  prefs: []
  type: TYPE_NORMAL
- en: Artificial intelligence has *just* begun its long journey through human intellect.
    New, incredible innovations await us. Understand cutting-edge machine learning
    and deep learning theory is only the beginning of your adventure. Take everything
    you see seriously and see how it can be incorporated into your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Your mind must remain open to accept the many innovations that are yet to come.
    For example, conceptual representation learning (see previous chapters) adds the
    power of human concepts to neural networks.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter takes the technology of the previous chapter and applies it to
    the example of a self-driving car. The previous chapter used a webcam and a program
    and sent instructions to the conveyor belt. It was in the family of IoT. Let's
    add a **support vector machine** (**SVM**) to the program and take it out on the
    streets of a city to see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter is divided into three main sections: a public service project,
    the configuration of the model, and running the model.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A self-driving solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing a safe route parameter to trip planners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying CNNs to parking lots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying SVMs to safety on trip planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Teaching an MDP to find the safest route (not necessarily the shortest way)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started by outlining the problem and the goal of the project we'll
    be undertaking.
  prefs: []
  type: TYPE_NORMAL
- en: The public service project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The overall project in this example is to implement a self-driving, home-to-homeless-shelter
    delivery service:'
  prefs: []
  type: TYPE_NORMAL
- en: Families at homes have clothing and food they would like to give to others that
    need them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The self-driving car can be started at a distance and goes to homes and takes
    the goods to the shelters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The self-driving car does not need to have a base. It can park anywhere, go
    anywhere, and refuel at service stations with automatic electric recharging.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will focus on the self-driving car when it has finished
    a delivery and is looking for a parking lot with a parking space. We will need
    the information to make decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Some IoT projects plan to put sensors on every parking space and send the information
    to control centers. The city council finds that too expensive. Instead, the city
    council has decided to use a more cost-effective solution. A webcam will be installed
    on all the possible parking lots in the project's grid. This smart grid is for
    transporting products from homes to shelters.
  prefs: []
  type: TYPE_NORMAL
- en: We'll address this by first setting up an RL-DL-CRLMM model.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the RL-DL-CRLMM model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section describes how to set up the previous chapter's model for this project
    and add a few functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Chapter 11*, *Combining Reinforcement Learning and Deep Learning*, the
    RL-DL-CRLMM model analyzed webcam images of pieces of cut cloth to be sewed in
    real-time on a conveyor belt. The goal was to determine if they contained a gap
    (not too many pieces to sew) or not (a lot of pieces to sew). Then the model selected
    the best sewing station. A sewing station with a lot of work to do is best optimized
    with a small number of pieces to sew. A sewing station with little work to do
    will be best optimized with a large number of pieces to sew. By doing this, the
    RL-DL-CRLMM optimized the load on each sewing station, as shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: Apparel production flow'
  prefs: []
  type: TYPE_NORMAL
- en: 'This leads to the following circular optimizing model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: Circular RL-DL-CRLMM'
  prefs: []
  type: TYPE_NORMAL
- en: 'This RL-DL-CRLMM model that we explored in *Chapter 11*, *Combining Reinforcement
    Learning and Deep Learning*, contains the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: A CRL-CNN to see if there is a gap in the image. In this chapter, we will use
    the same model to see if there is a gap in a parking lot that represents an available
    parking space.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optimizer will rely on an SVM to add the concept of safety to the choice
    of an itinerary. It will then use optimization rules to make decisions, as in
    *Chapter 11, Combining Reinforcement Learning and Deep Learning*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An MDP for the itinerary as described in *Chapter 1*, *Getting Started with
    Next-Generation Artificial Intelligence through Reinforcement Learning*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The RL-DL-CRLMM model of this chapter, which focuses on finding a parking lot
    with available parking space and go there will thus become:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: Circular RL-DL-CRLMM'
  prefs: []
  type: TYPE_NORMAL
- en: The CRL-CNN in this model looks for spaces in a parking lot instead of gaps
    on a conveyor belt.
  prefs: []
  type: TYPE_NORMAL
- en: The RL-DL-CRLMM model contains a **convolutional neural network** (**CNN**)
    and a **Markov decision process** (**MDP**) linked together by an optimizer. The
    optimizer contains an SVM (safety evaluations) and a set of rules.
  prefs: []
  type: TYPE_NORMAL
- en: This system will now be referred to as a CRLMM.
  prefs: []
  type: TYPE_NORMAL
- en: Applying the model of the CRLMM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Chapter 9*, *Abstract Image Classification with Convolutional Neural Networks
    (CNNs)*, the CRLMM program, `CNN_STRATEGY_MODEL.py`, was trained to identify ![](img/B15483_11_028.png)
    (gamma concept) in outputs on the conveyor belt of a food processing factory.
    The end of the previous chapter brought ![](img/B15438_10_022.png) up to a higher
    abstraction level.
  prefs: []
  type: TYPE_NORMAL
- en: As long as a member of ![](img/B15438_12_003.png) (gamma) of the ![](img/B15438_10_005.png)
    dataset is in an undetermined state, its generalization encompasses ambivalent
    but similar concepts. Up to this chapter, these are the concepts ![](img/B15438_12_005.png)
    (uppercase gamma) has learned (conceptual representation learning).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_006.png) = {a gap, no gap, a load, no-load, not enough load,
    enough load, too much load, a space on a lane for a car, a distance between a
    high load of products and missing products on a conveyor belt, weights on sewing
    stations … *n*}'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step in the chapter is to use the CRLMM built in the previous chapters
    to recognize a parking space in a parking lot and send a signal to the self-driving
    vehicle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_006.png) will now perceive gaps as space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B15438_12_006.png) will now perceive space as a distance (gap) between
    two objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B15438_12_006.png) will need a context to establish whether this space
    between two objects is a positive or negative distance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at the dataset that we'll use to accomplish our goals.
  prefs: []
  type: TYPE_NORMAL
- en: The dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The datasets used in *Chapter 9*, *Abstract Image Classification with Convolutional
    Neural Networks (CNNs)*, to this chapter are sample datasets. In real-life projects,
    it will take some work to obtain the right real-time frames from a webcam. There
    will be lighting constraints, prerequisites, and more. However, the philosophy
    remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'As in the previous chapters, the `dataset` directory of this chapter on GitHub
    contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The training set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The test set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The model trained by `CNN_CONCEPT_STRATEGY.py`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `classify` directory used by `CNN_CONCEPT_STRATEGY.py`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As explained in the previous chapters, a full stream of frames from a well-configured
    webcam would take weeks, if not months, to prepare. They are projects in themselves.
  prefs: []
  type: TYPE_NORMAL
- en: The project would first start by deciding to use a camera webcam or an IP camera
    that can send images to the CNN that is embedded in the RL-DL-CRLMM program. The
    CNN will classify each image sent by the video feed either as containing a gap
    or an available parking space or not.
  prefs: []
  type: TYPE_NORMAL
- en: A webcam is usually connected to a computer, which will, in turn, send information
    to a distant server. An IP camera can send information directly to distant machines.
    Both solutions are connected IoT objects. An IP camera can be more expensive.
    To prove that the solution is a good one, an implementation team might start with
    a webcam first. Once the project has been accepted, then an IP camera might prove
    to be better in the long run. In this chapter, we will refer to webcams as in
    a research project with limited funds to begin with. We will thus consider that
    the images come from a webcam.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, ![](img/B15438_12_006.png) has evolved into space (gap detection
    between (distance)) cars to find a parking space.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a simulated frozen frame with no ![](img/B15438_12_006.png)-space
    taken by a webcam located on a building, pointing down to a parking lot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: Simulated frozen frame'
  prefs: []
  type: TYPE_NORMAL
- en: 'I transformed the image to simulate some computer vision techniques that could
    have been used to simplify the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: Parking lot with a little to no gaps (not enough available parking
    spaces)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following frame represents a small but sufficient parking space on the
    right of the screen. The images in these examples were designed to explain how
    the system is built. I created the image for this example to show whether ![](img/B15438_12_006.png)-space
    is available or not. Once again, I simulated an image after a computer vision
    process, which is easy to do but beyond the scope of this book. It shows something
    like several available parking spaces in a higher-level representation of the
    parking lot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.6: Parking lot with a little to no gaps (not enough available parking
    spaces)'
  prefs: []
  type: TYPE_NORMAL
- en: Using the trained model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The model was trained by using the same `CNN_STRATEGY_MODEL.py` program as in
    *Chapter 9*, *Abstract Image Classification with Convolutional Neural Networks
    (CNNs)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just make sure that the directory in the header of the following program is
    pointing to `dataset/`, which is scenario number 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The model is stored in `/dataset/model`. To test the model, `CNN_CONCEPT_STRATEGY.py`,
    improved in the previous chapter, was used. Just change the messages and limit
    the frame classification loop to `2`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following loaded image was already resized before applying the CNN model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.7: Resized image'
  prefs: []
  type: TYPE_NORMAL
- en: Classifying the parking lots
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We showed that the model works. However, in the following sections, we will
    simulate the images that are sent with a random function, not with the actual
    images.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the CRLMM has been trained to distinguish a full parking lot from a
    parking lot with available space, once an available parking lot has been found,
    an SVM takes over as an intermediate step, as we'll see in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an SVM function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The self-driving car has delivered its packages to the shelters. Now it has
    to find a parking lot and park there. Instead of having a base like many other
    systems, this saves the city the cost of many useless trips.
  prefs: []
  type: TYPE_NORMAL
- en: Motivation – using an SVM to increase safety levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The support vector system adds a new function to itinerary calculations—**safety**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most systems, such as Google Maps, focus on:'
  prefs: []
  type: TYPE_NORMAL
- en: The shortest trip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fastest trip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, self-driving cars have to take extra precautions. Many humans do not
    feel secure on some roads. Safety comes first, no matter what. Once a suitable
    parking lot has been found, the SVM has to avoid traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The goal is to find a path through traffic, even if the distance is longer.
    A *p* parameter allows for a *p*% variance in the distance. For example, 10% allows
    a 10% longer distance and will provide safe passage, as shown in the following
    SVM result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.8: Traffic path'
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that the datapoints are **not** the actual coordinates
    but a representation in a higher dimension, as explained in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Definition of a support vector machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An SVM classifies data by transforming it into higher dimensions. It will then
    classify data into two classes, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, the SVM will be used to separate risky driving locations from
    safer driving locations:'
  prefs: []
  type: TYPE_NORMAL
- en: The example in the code is random (as in real-life traffic), but the model can
    be developed much further.
  prefs: []
  type: TYPE_NORMAL
- en: 'Safety is the key to this model, so each driving location (road, crossing)
    possesses features related to this goal:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of accidents at that location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traffic at that location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experience of driving through that location (near misses and no problems)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of this data can be fed into an SVM program. The program will transform
    the data to make it linearly separable (see *Chapter 8, Solving the XOR Problem
    with a Feedforward Neural Network*).
  prefs: []
  type: TYPE_NORMAL
- en: The blue dots on the left will be the good locations, and the brown ones on
    the right will be the risky ones. A function will read the latitude and longitude
    features of the datapoint in another table to convert them back into GPS format.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a blue dot on the left might be:'
  prefs: []
  type: TYPE_NORMAL
- en: Location A
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One accident in the past ten years
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zero problems driving through that point in 1 year
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A brown dot might be:'
  prefs: []
  type: TYPE_NORMAL
- en: Location D (a few blocks from A)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seventy-four accidents in 10 years
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fifteen problems driving through that point in one year
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The blue dots and brown dots thus have nothing to do with the real location
    on the preceding graph. The locations are **labels**. Their features have been
    separated as expected.
  prefs: []
  type: TYPE_NORMAL
- en: To send the data to a GPS guiding system, all that needs to be done is to find
    the GPS coordinates of the locations that are part of the initial dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Location A will be chosen, for example, instead of location D. Hence, the program
    looks into the dataset and finds its GPS location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s put some words to the following SVM graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.10: SVM graph'
  prefs: []
  type: TYPE_NORMAL
- en: The space between the dotted vertical lines is the **margin**. It's somewhat
    like the margin between two lines of a rugby or football team. When the players
    (datapoints) are lined up, an invisible space or margin separates them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dots that touch those margins are critical because they are the ones that
    decide where the margin will be in the first place. As the rugby or football players
    line up in clusters, the SVM will calculate this (refer to the following Python
    function). These special datapoints are called **support points**. They are also
    referred to as **support vectors**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The vertical line running in the middle of the margin is the **decision line**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since a line separates the dots, the dataset is linearly separable. This means
    that a line can be drawn between the datapoints and can separate them into classes.
    In this case, the system wants to obtain safe locations (blue dots) and avoid
    unsafe locations (brown dots).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we defined what an SVM is, let's implement it in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Python function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `sklearn` packages provide the following `svm` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `make_blobs` function generates uniform data for this example in all directions.
    It is thus an **isotropic** distribution (*iso* = equal, *tropy* = way) of random
    data. A **blob** contains points of data. The points of data represent the concentration
    of cars in given areas, which were calculated using their longitude and latitude.
  prefs: []
  type: TYPE_NORMAL
- en: scikit-learn contains a Gaussian factor for the generation function. A Gaussian
    kernel applies standard deviations from a mean. Imagine you are playing in a sandbox,
    and you make a little hill. Then, with your hand, you cut the pile in two. The
    mean is where you cut the sand pile; the standard deviation is shown by the slopes
    going down on both sides.
  prefs: []
  type: TYPE_NORMAL
- en: 'It might take days, and sometimes weeks, to put a good dataset together. But
    with scikit-learn, you can do it in one line, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This function offers many parameters. The ones used are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`n_samples`, which represents the number of points spread out between the clusters.
    In this example, `100` already represents sub-clusters of car concentrations in
    an area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Centers` is the number of centers from which to generate data. In this example,
    `2` represents areas close to the present location of the self-driving car and
    its future destination.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`random_state` is the seed by the random number generator. This is where the
    sequence of random numbers will start. This is because what we think is random
    is pseudo-random, so it has a deterministic basis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this example, a linear kernel is used to fit the model, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: scikit-learn's SVM contains a parameter penalty, which explains the `C` in `svm.SVC`.
    There are many more options, but the key option is the kernel. A linear kernel
    will produce a linear separation, as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'An RBF kernel would produce a different result. The structure looks more regularized.
    As shown in the following screenshot, an RBF kernel acts as an efficient structural
    regularizing function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.11: Regularized structure path'
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that the SVM can be used for image recognition on the MNIST and
    CIFAR datasets, for example. Artificial intelligence provides more than one way
    to solve a given problem. It is up to you to choose the right tools by having
    a flexible trial-and-error approach where necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'The plotting line instructions start at line 300\. The main line of code to
    take into account is the function that will find and use the decision line (refer
    to the preceding definition) and scatter the datapoints on both sides of the margin.
    This is achieved by using the following `decision_function`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The result will be displayed, as shown previously. The SVM is now a component
    of the CRLMM in this self-driving car (SDC) model. We are ready the run the CRLMM
    to find an available parking space for the SDC.
  prefs: []
  type: TYPE_NORMAL
- en: Running the CRLMM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The self-driving car''s mission is a circular (no beginning, no end) one like
    the CRLMM described in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: If it is in a parking lot, it can be activated by a home or a shelter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it is at a given home, it will go to a shelter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it is at a shelter, it can go to a home or a parking space.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it needs recharging, this can be done at a recharging space (or more probably
    at a parking space), which is already the case in some cities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At one point, the self-driving car has to go from a specific home to a parking
    space. This part of its itinerary is the subject of the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Finding a parking space
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`CRL-MM-IoT_SVM.py` uses a fine-tuned version of `RL_DL.py` described in the
    previous chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: A no-![](img/B15438_12_006.png) (no gamma, no gap, no space) result is not acceptable.
    The result we are looking for is an image with a gap.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the `crlmm` function, which classifies parking lot images into full or available
    space, returns a `0`, the program detects it and displays a message. The code
    samples contain the line number of the following code excerpt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The program displays the following full sign and closes it after a few seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.12: Parking lot status'
  prefs: []
  type: TYPE_NORMAL
- en: 'The program must find a parking space. It will thus try searches of good parking
    lots as shown in this code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: A thousand searches looks like a lot, but it isn't difficult for a machine learning
    program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, looking for available parking spaces in a large city can be excruciating.
    More often than not, it will not be suitable: there will not be sufficient available
    parking spaces to be certain of finding one in the time it will take to get there.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this prototype, the number of optimal searches is limited to `2`. Beyond
    that value, the following `CRLMM` function is activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After two fruitless searches, the program activates `a`, a flag for the `CRLMM`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `CRLMM` function now contains a random search function, which simulates
    the choice of a parking lot and provides a first-level status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The status represents a probabilistic estimate of the availability of the parking
    lot. The `a` flag simulates a program yet to be added that will scan all the parking
    lots and run this function to find an available space.
  prefs: []
  type: TYPE_NORMAL
- en: To present a prototype at an initial meeting, you will always need enough to
    convince, but if you go too far, the cost of doing this becomes a risk if your
    idea is rejected.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if `a` is activated, the system simulates a scan (to be developed) and
    forces the status to `1`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The program then continues and runs the CNN trained to identify an available
    parking lot (refer to the screenshot that follows), as explained in the preceding
    configuration section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.13: Webcam freezes a frame of a parking lot'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that a parking lot with available space has been found (the empty spaces
    on the top left of the frame), the search function stops, and the following `break`
    instruction is activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `break` instruction is reached once a parking space has been found. Once
    an available parking space has been detected, we can decide how to get to the
    parking lot.
  prefs: []
  type: TYPE_NORMAL
- en: Deciding how to get to the parking lot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The CRLMM program has found a suitable parking lot, as shown in the following
    code, when `crlmm==1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'It displays the following message and a sign:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.14: Parking lot status'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we found an available parking space, we need to find a safe route for
    the SDC. This means the SDC will avoid traffic to make it easier for the autonomous
    machine learning program. Now it is time to activate the function.
  prefs: []
  type: TYPE_NORMAL
- en: Support vector machine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CRLMM now demands a safe route, even if it means taking longer (time or
    distance). Self-driving vehicles require a strict safety-comes-first policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The program reaches the following SVM function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The SVM described in the configuration section provides a safe path through
    traffic, as shown in this screenshot of the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.15: Traffic graph'
  prefs: []
  type: TYPE_NORMAL
- en: For example, in this random case (traffic will be random most of the time),
    the blue dots on the left represent sparser traffic, and the brown dots represent
    areas with denser traffic. The goal, in real-life implementation, is to provide
    information to the MDP in the program so that it will find paths through sparser
    traffic for safety reasons to limit the errors an SDC can make in denser traffic.
    The weights of the statistics of past accidents and the car's experience can also
    be added to create a deeper vision of this safety model trip planner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose the self-driving car has to go to a point in the brown area. The SVM
    will:'
  prefs: []
  type: TYPE_NORMAL
- en: Suggest an itinerary that goes through blue dot areas as much as possible and
    only then in brown areas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send the information to Google Maps. This will require an additional script
    that will read a dataset that contains GPS coordinates for each datapoint in the
    SVM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many drivers feel unsafe on loaded freeways or in dense cities. Adding the safest
    route function to mapping software would help.
  prefs: []
  type: TYPE_NORMAL
- en: The SVM brought the datapoints to a higher level (refer to the explanation in
    the configuration section of the chapter).
  prefs: []
  type: TYPE_NORMAL
- en: The points represented in an SVM function are **not** the actual locations but
    an abstract representation. The dividing line needs to go through a function that
    will transform that information into a real location datapoint.
  prefs: []
  type: TYPE_NORMAL
- en: Once the SVM boundaries have been converted into location datapoints, the itinerary
    or trip graph is activated.
  prefs: []
  type: TYPE_NORMAL
- en: The itinerary graph
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The prototype shows a simulation of an itinerary graph based on the SVM recommendations
    and its weight vector through the following function call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following graph displays the safest itinerary in red, even if it takes
    longer (time or distance):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_12_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.16: The optimizer chose the safest itinerary'
  prefs: []
  type: TYPE_NORMAL
- en: For the purpose of the prototype, the SVM was not directly connected to the
    graph, which would require costly hours.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, the following `random.randint` function was inserted, which simulates
    the random availability of parking space in any case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Bear in mind that it would be useless to execute further development for a prototype
    as regards the initial presentation to a prospect or manager.
  prefs: []
  type: TYPE_NORMAL
- en: This type of prototype is more powerful than a slideshow because it proves your
    legitimacy. Slideshows are static and don't prove your abilities on this particular
    subject. A prototype will show your expertise. Once we have the safest locations,
    we can update the weight vector for the MDP, as in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The weight vector
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The weight vector is displayed. In this model, the weights represent the locations,
    just like in the previous chapter. However, in this chapter, the weights are a
    rating:'
  prefs: []
  type: TYPE_NORMAL
- en: Each weight has a high safety rank when a few accidents have occurred around
    that area in the past *n* years. This is a **safety rank**. This ranking should
    be part of our itinerary software. We should be informed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The self-driving car's experience will customize each weight. It is its own
    driving record. Near misses because of its faulty software will bring the weight
    down. Good track records will take the weights up. What seems easy for a human
    might be difficult for software, and vice versa.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The system now displays the weights used with an internal update program to
    be developed if the prototype is accepted. The following code calls the function
    that manages the weights of the safest routes for the self-driving vehicle and
    displays a histogram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/B15438_12_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.17: Histogram of the updated weights vertex (safest routes)'
  prefs: []
  type: TYPE_NORMAL
- en: We detected an available parking space, asked an SVM to provide the safest areas
    to go through to get to that parking space, updated the weight of each area, and
    sent the information to the MDP to calculate a safe route.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter, like the previous chapter, described a connected IoT process with
    no humans involved. This trend will expand into every field in the years to come.
  prefs: []
  type: TYPE_NORMAL
- en: This also shows that knowing how to use a tool requires hard work, especially
    when learning artificial intelligence. Imagining a solution for a given market
    requires more than hard work. Creativity does not come with work. It develops
    by freeing your mind from any form of constraint.
  prefs: []
  type: TYPE_NORMAL
- en: Once the solution has been imagined, then comes the fine line between developing
    too much for a presentation and not showing enough. A CRLMM provides the kind
    of framework that helps build a technical solution (CNN, MDP, SVM, and optimizers)
    while keeping everyday concepts that others understand in mind.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter also shows that an artificial intelligence model can contain an
    ensemble of algorithms, RL, DL, SVM, and CRL cognitive approaches, and more.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will take us deeper under the hood of neural networks and TensorFlow
    2 by peeking inside the ANN's processes.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Driving quickly to a location is better than safety in any situation. (Yes |
    No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Self-driving cars will never really replace human drivers. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Will a self-driving fire truck with robots be able to put out a fire one day?
    (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do major cities need to invest in self-driving cars or avoid them? (Invest |
    Avoid)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Would you trust a self-driving bus to take children to school and back? (Yes
    | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Would you be able to sleep in a self-driving car on a highway? (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Would you like to develop a self-driving program for a project for a city? (Yes
    | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information on SVMs, refer these links: [http://scikit-learn.org/stable/modules/svm.html](http://scikit-learn.org/stable/modules/svm.html),
    [http://scikit-learn.org/stable/auto_examples/svm/plot_separating_hyperplane.html#sphx-glr-auto-examples-svm-plot-separating-hyperplane-py](http://scikit-learn.org/stable/auto_examples/svm/plot_separating_hyperplane.html#sphx-glr-auto-examp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
