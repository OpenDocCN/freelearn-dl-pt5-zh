["```py\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import movie_reviews\nexample_sentences = movie_reviews.sents()\nexample_sentence = example_sentences[0]\nnltk.pos_tag(example_sentence)\n```", "```py\n[('plot', 'NN'),\n (':', ':'),\n ('two', 'CD'),\n ('teen', 'NN'),\n ('couples', 'NNS'),\n ('go', 'VBP'),\n ('to', 'TO'),\n ('a', 'DT'),\n ('church', 'NN'),\n ('party', 'NN'),\n (',', ','),\n ('drink', 'NN'),\n ('and', 'CC'),\n ('then', 'RB'),\n ('drive', 'NN'),\n ('.', '.')]\n```", "```py\nimport spacy\ntext = \"plot: two teen couples go to a church party, drink and then drive.\"\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = nlp(text)\nfor token in doc:\n    print (token.text, token.tag_, token.head.text, token.dep_)\nplot NN plot ROOT\n: : plot punct\ntwo CD couples nummod\nteen NN couples compound\ncouples NNS go nsubj\ngo VBP plot acl\nto IN go prep\na DT party det\nchurch NN party compound\nparty NN to pobj\n, , go punct\ndrink VBP go conj\nand CC drink cc\nthen RB drive advmod\ndrive VB drink conj\n. . go punct\n```", "```py\ndef document_features(document):\n    features = {}\n    for word in word_features:\n        features[word] = 0\n        for doc_word in document:\n            if word == doc_word:\n                features[word] += 1\n    return features\n```", "```py\nfrom numpy import array\nfrom numpy import argmax\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n#import the movie reviews\nfrom nltk.corpus import movie_reviews\n# make a list of movie review documents\ndocuments = [(list(movie_reviews.words(fileid)))\n             for category in movie_reviews.categories()\n             for fileid in movie_reviews.fileids(category)]\n# for this example, we'll just look at the first document, and\n# the first 50 words\ndata = documents[0]\nvalues = array(data)\nshort_values = (values[:50])\n# first encode words as integers\n# every word in the vocabulary gets a unique number\nlabel_encoder = LabelEncoder()\ninteger_encoded = label_encoder.fit_transform(short_values)\n# look at the first 50 encodings\nprint(integer_encoded)\n[32  3 40 35 12 19 39  5 10 31  1 15  8 37 16  2 38 17 26  7  6  2 30 29\n 36 20 14  1  9 24 18 11 39 34 23 25 22 27  1  8 21 28  2 42  0 33 36 13\n  4 41]\n```", "```py\n# convert the integer encoding to onehot encoding\nonehot_encoder = OneHotEncoder(sparse=False)\ninteger_encoded = integer_encoded.reshape(\n    len(integer_encoded), 1)\nonehot_encoded = onehot_encoder.fit_transform(\n    integer_encoded)\nprint(onehot_encoded)\n# invert the first vector so that we can see the original word it encodes\ninverted = label_encoder.inverse_transform(\n    [argmax(onehot_encoded[0, :])])\nprint(inverted)\n[[0\\. 0\\. 0\\. ... 0\\. 0\\. 0.]\n [0\\. 0\\. 0\\. ... 0\\. 0\\. 0.]\n [0\\. 0\\. 0\\. ... 1\\. 0\\. 0.]\n ...\n [0\\. 0\\. 0\\. ... 0\\. 0\\. 0.]\n [0\\. 0\\. 0\\. ... 0\\. 0\\. 0.]\n [0\\. 0\\. 0\\. ... 0\\. 1\\. 0.]]\n['plot']\n```", "```py\nimport gensim\nimport nltk\nfrom nltk.corpus import movie_reviews\nfrom gensim.models import Word2Vec\n# make a list of movie review documents\ndocuments = [(list(movie_reviews.words(fileid)))\n             for category in movie_reviews.categories()\n             for fileid in movie_reviews.fileids(category)]\nall_words = movie_reviews.words()\nmodel = Word2Vec(documents, min_count=5)\nmodel.wv.most_similar(positive = ['movie'],topn = 25)\n[('film', 0.9275647401809692),\n ('picture', 0.8604983687400818),\n ('sequel', 0.7637531757354736),\n ('flick', 0.7089548110961914),\n ('ending', 0.6734793186187744),\n ('thing', 0.6730892658233643),\n ('experience', 0.6683703064918518),\n ('premise', 0.6510635018348694),\n ('comedy', 0.6485130786895752),\n ('genre', 0.6462267637252808),\n ('case', 0.6455731391906738),\n ('it', 0.6344209313392639),\n ('story', 0.6279274821281433),\n ('mess', 0.6165297627449036),\n ('plot', 0.6162343621253967),\n ('message', 0.6131927371025085),\n ('word', 0.6131172776222229),\n ('movies', 0.6125075221061707),\n ('entertainment', 0.6109789609909058),\n ('trailer', 0.6068858504295349),\n ('script', 0.6000528335571289),\n ('audience', 0.5993804931640625),\n ('idea', 0.5915037989616394),\n ('watching', 0.5902948379516602),\n ('review', 0.5817495584487915)]\n```"]