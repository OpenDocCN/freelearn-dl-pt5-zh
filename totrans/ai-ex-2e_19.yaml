- en: '19'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quantum Computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IBM has begun to build quantum computers for research and business purposes.
    In a few years, quantum computing will become disruptive and will provide exponential
    computing power. Google, Xanadu, D-Wave, Rigetti, and others devote research budgets
    to quantum computing.
  prefs: []
  type: TYPE_NORMAL
- en: This unique computer capacity in the history of humanity opens the doors to
    obtaining results that would be impossible to obtain with classical computers.
    In 1994, Peter Shor showed that a quantum algorithm could perform better than
    a classical one for prime factors of an integer and the discrete logarithm problem.
    Then in 1995, Lov Grover added the unstructured search problem. With the rise
    of quantum computers, research can go much further.
  prefs: []
  type: TYPE_NORMAL
- en: Quantum computers in themselves will not provide revolutionary algorithms. Any algorithm
    can be broken down into components that run basic classical machines. Supercomputers
    can still run artificial intelligence algorithms much easier than implementing
    them with quantum computers. Quantum computers have no memory, for example, so
    they rely heavily on classical computers for the input and interpreting the output.
  prefs: []
  type: TYPE_NORMAL
- en: Though quantum computers have limits, in time, quantum computing power will
    take present-day algorithms beyond the limits of our imagination. Many corporations
    have invested in quantum computing research in the fields of banking, healthcare,
    cybersecurity and more.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter explains why quantum computers are superior to classical computers,
    what a quantum bit is, how to use it, and how the quantum mind experiment could
    lead to a quantum thinking machine. The example provided is simply a recreative
    way to approach quantum computing.
  prefs: []
  type: TYPE_NORMAL
- en: We will be taking results from a classical machine, feed the results to quantum
    computer and then interpret the results provided by the quantum computing algorithm.
    Some go further with hybrid quantum-classical algorithms, which is beyond the
    scope of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 18*, *Neuromorphic Computing*, we explored how to use our brain
    to create neuromorphic models. In this chapter, we will create a higher level
    of representation with a research project to create a mind. Quantum mind is based
    on CRLMM, which I have been successfully applying to many corporate sites. In
    this research project, a quantum mind named MindX represents the mind of a random
    person. We will explore MindX in an exciting experiment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Why quantum computers are more powerful than other classical computers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a quantum bit is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Bloch sphere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantum computing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build MindX, a thinking quantum computer research project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, let's discuss some basics behind quantum computers, and what makes them
    so powerful.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: This chapter is self-contained with screenshots of quantum circuits
    for those who do not wish to install anything before reading the chapter. IBM
    Q and Quirk can be used online without installing anything locally.'
  prefs: []
  type: TYPE_NORMAL
- en: The rising power of quantum computers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin discussing MindX, an exciting research project to create a
    thinking quantum computer, we should start with the fundamentals. This section
    describes:'
  prefs: []
  type: TYPE_NORMAL
- en: Why quantum computers are faster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a qubit is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How a qubit is measured (its position)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a quantum score (program) with quantum gates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to run a quantum score and use its results for a cognitive NLP chatbot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The goal of this chapter is not to go too deeply into the details of quantum
    computing, but rather to teach you enough to know how to build a thinking quantum
    computer. This chapter is simply meant to show how a quantum computer works and
    open ourselves to new ways to use computers.
  prefs: []
  type: TYPE_NORMAL
- en: Quantum computer speed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A standard computer bit has a 0 or a 1 state. A classical computer will manage
    0 or 1, as the system chooses, but it remains limited to choosing 1 or (XOR) 0\.
    It cannot manage both states at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: A quantum computer is not constrained by an XOR state. It is an AND state. It
    can manage values between 0 and 1 at the same time until it is measured! A quantum
    state is unknown until it's observed, which means that a quantum program can use
    values between 0 and 1 at the same time. Once observed, the qubit will take a
    value of 0 or 1 because of the physical instability of a quantum state.
  prefs: []
  type: TYPE_NORMAL
- en: Just observing a quantum state makes the state break down. In quantum computing,
    this is called **decoherence**. It is not magic. Qubits are unstable. When observed,
    the quantum state breaks down.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means quantum computing is memoryless once it is measured. Storage does
    not exist in a quantum computer. The input is made by a classical computer, and
    the output goes back to a classical computer, to be stored through the following
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: A classical computer provides an input
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A quantum computer processes the input and produces an output
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A classical computer interprets the output
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That being said, the computing power of a quantum computer fully justifies this
    architectural constraint.
  prefs: []
  type: TYPE_NORMAL
- en: Until a qubit is observed, it can have a 0 or 1 state or a probability in between,
    such as 0.1, 0.7, or 0.9.
  prefs: []
  type: TYPE_NORMAL
- en: Observing the situation is called measuring the state. When measured, only 0
    or (XOR) 1 will become the result.
  prefs: []
  type: TYPE_NORMAL
- en: Until the state is measured, a large number of probabilities are possible. If
    a qubit is added to the system, we now have two qubits and four elementary combinations
    all at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike standard computer logic, all four of the states can be used to compute
    algorithms at the same time in a parallel process. The volume of the possible
    states of a given algorithm will thus expand with the number of qubits involved.
    An estimation of the volume of the states can be made with the following number,
    in which *q* is the number of qubits:'
  prefs: []
  type: TYPE_NORMAL
- en: 2^q
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at this tiny equation does not seem awesome at all. Now, let''s see
    what it looks like in a loop that runs up to 100 qubits with the number, `nb`,
    of possible states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The program does not appear fearsome either. However, the following output
    is awesome:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Presently, big data is often calculated in petabytes. A petabyte=10^(15) or
    about 2^(50) bytes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Facebook stores data for over 2 billion accounts. Imagine Facebook managing
    500 petabytes on a given day. Let''s see what 500 petabytes approximately add
    up to in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is quite surprising because it is about the size of data a 100-qubit
    quantum computer can compute in one run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This means that a single quantum computer with 100 qubits can run a calculation
    of the size of all the data that over 2,000,000,000 Facebook accounts might represent
    in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: A quantum computer would not actually contain that volume of data at all, but
    it shows that one could produce a calculation with that volume of computation
    information.
  prefs: []
  type: TYPE_NORMAL
- en: More importantly, this also means that a single quantum computer can run a mind-dataset
    of a single mind (see the next section) and calculate associations. This thinking
    process can generate an exponential volume of connections.
  prefs: []
  type: TYPE_NORMAL
- en: A classical *n*-bit computer manages *n* bits whereas a quantum computer will
    manage 2^n bits or 2^q bits.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to quantum computers' 2^q exponential power, soon, classical computers
    will seem like relics of the past for scientific calculations. Classical computers
    will still be in use, but quantum computers will be the tools with which to explore
    the world beyond the present limits of artificial intelligence.
  prefs: []
  type: TYPE_NORMAL
- en: Visualize all the AI solutions you have seen in this book. They will already
    seem to have some dust of the past on them once you get your hands on quantum
    computing.
  prefs: []
  type: TYPE_NORMAL
- en: Quantum computers will beat any other computer in many fields in the years to
    come. In one parallel computation, a quantum computer will do in one run something
    that it would take a classical computer years to calculate.
  prefs: []
  type: TYPE_NORMAL
- en: Now think about what a network of many quantum computers could do!
  prefs: []
  type: TYPE_NORMAL
- en: Often, we try to compare large volumes with the number of stars in the universe
    and we say, "That's more than the number of stars in our universe." We must now
    look in the opposite direction, at very small numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The lesson is clear: the future lies in nano models. Quantum computing represents
    both a challenge and an opportunity.'
  prefs: []
  type: TYPE_NORMAL
- en: Defining a qubit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A qubit, a quantum bit, has a physical counterpart. For example, a quantum state
    can be encoded in oscillating currents with superconductor loops. Google and IBM
    have experimented with this approach. Another way is to encode a qubit in an ion
    trapped in an electromagnetic field in a vacuum trap.
  prefs: []
  type: TYPE_NORMAL
- en: Photons, electrons, the state of light, and other technologies have emerged.
    Whatever the approach, calculations done by over 50-qubit quantum computers will outrun
    classical supercomputers.
  prefs: []
  type: TYPE_NORMAL
- en: The competition is fierce because the market will rapidly become huge. Get ready
    now to face the disruption that's coming!
  prefs: []
  type: TYPE_NORMAL
- en: Representing a qubit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The mathematical representation of a qubit is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_001.png) for a 0 value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B15438_19_002.png) for a 1 value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B15438_19_003.png) where alpha is a probability parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B15438_19_004.png) where beta is a probability parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These brackets are called bracket or bra-ket notation.
  prefs: []
  type: TYPE_NORMAL
- en: This linear representation is called superposition. In itself, it explains most
    of the power of quantum computing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The superposition of 0 and 1 in a quantum state can thus be expressed as follows
    in kets such as ![](img/B15438_19_005.png) and not bras such as in ![](img/B15438_19_006.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_007.png)'
  prefs: []
  type: TYPE_IMG
- en: The alpha and beta probabilities look like weights, and the total probabilities
    of those probable states of qubit must add up to 1\. We use partition functions,
    softmax, and other techniques to make sure to keep the sum of probabilities equal
    to 1\. This is no surprise since computer geeks like us designed the way to program
    quantum computers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Translated into mathematics, this means that the probabilities of ![](img/B15438_19_008.png)
    and ![](img/B15438_19_009.png) must add up to 1\. In the case of qubit probabilities,
    the values are squared, leading to the following constraint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To describe the probable state of a qubit, we thus need three numbers: the
    0 and 1 possible states and a number to determine the value of the probabilities
    (the other is implicit since the total must add up to 1).'
  prefs: []
  type: TYPE_NORMAL
- en: Since qubits interact in their respective states, an interaction is described
    as an entanglement. An entanglement designates at least two interacting qubits.
    They cannot be described without taking all the states of all the qubits into
    account.
  prefs: []
  type: TYPE_NORMAL
- en: This has been reproduced physically, which means that this entanglement seems
    strange because their quantum entanglement (relation) can occur at a distance.
    One qubit can influence a qubit that is physically far away.
  prefs: []
  type: TYPE_NORMAL
- en: It's an odd way to think, and one that was not readily accepted at first. Albert
    Einstein is oft-quoted as referring to entanglement derisively as "spooky action
    at a distance."
  prefs: []
  type: TYPE_NORMAL
- en: The position of a qubit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the main ways to represent the state of a qubit is by using the Bloch
    sphere. It shows how a qubit spins and can be used to describe qubit states. To
    properly grasp this, the following section will first provide a refresher on some
    properties of a circle.
  prefs: []
  type: TYPE_NORMAL
- en: Radians, degrees, and rotations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The radius is the distance between the center of a circle and its circumference,
    as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.1: Radius of a circle'
  prefs: []
  type: TYPE_NORMAL
- en: 'The radius of a circle is half of the circle''s diameter. The relation between
    the radius *r* and the circumference *C* is (where ![](img/B15438_19_011.png)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_012.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the length of the radius is wrapped around the circumference of a circle,
    that arc forms a radian, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.2: A radian'
  prefs: []
  type: TYPE_NORMAL
- en: The angle formed by a radian is equal to about 57.29° (degrees).
  prefs: []
  type: TYPE_NORMAL
- en: 'The properties of the radian can be used for rotations:'
  prefs: []
  type: TYPE_NORMAL
- en: 3.14 × 57.29° = about 180°
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus ![](img/B15438_19_013.png) radians = 180°
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rotations are often described by radians expressed in ![](img/B15438_19_013.png),
    as displayed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Degrees** | **Radians** |'
  prefs: []
  type: TYPE_TB
- en: '| 30° | ![](img/B15438_19_015.png) |'
  prefs: []
  type: TYPE_TB
- en: '| 45° | ![](img/B15438_19_016.png) |'
  prefs: []
  type: TYPE_TB
- en: '| 60° | ![](img/B15438_19_017.png) |'
  prefs: []
  type: TYPE_TB
- en: '| 90° | ![](img/B15438_19_018.png) |'
  prefs: []
  type: TYPE_TB
- en: '| 180° | ![](img/B15438_19_013.png) |'
  prefs: []
  type: TYPE_TB
- en: '| 270° | ![](img/B15438_19_020.png) |'
  prefs: []
  type: TYPE_TB
- en: '| 360° | ![](img/B15438_19_021.png) |'
  prefs: []
  type: TYPE_TB
- en: Now that we've had that recap, let's explore the Bloch sphere.
  prefs: []
  type: TYPE_NORMAL
- en: The Bloch sphere
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The radian table shown just now is a practical way to describe rotations. The
    Bloch sphere, shown in the following figure, provides a visual representation
    of the position and rotation of a qubit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.3: Bloch sphere'
  prefs: []
  type: TYPE_NORMAL
- en: 'The North and South Pole (polar coordinates) represent the basic states of
    a qubit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_022.png)'
  prefs: []
  type: TYPE_IMG
- en: A qubit can take any value on the sphere.
  prefs: []
  type: TYPE_NORMAL
- en: Composing a quantum score
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Composing a quantum score consists of positioning gates on a stave (or circuit)
    and adding a measurement. The input comes from a classical computer. After the
    measurement phase, the output goes back to a classical computer. The reason is
    that quantum computers have no memory and thus cannot store their intermediate
    states because of their instability.
  prefs: []
  type: TYPE_NORMAL
- en: This section uses Quirk, a very educative quantum circuit simulator, to present
    quantum gates and a quantum composer.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access Quirk online at this link: [https://algassert.com/quirk](https://algassert.com/quirk).'
  prefs: []
  type: TYPE_NORMAL
- en: Quantum gates with Quirk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Qubits are represented by lines, and they start on the left, as shown in the
    following quantum gate programming interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.4: Quantum gate programming interface'
  prefs: []
  type: TYPE_NORMAL
- en: The gates are logic gates that will transform the state of the qubits.
  prefs: []
  type: TYPE_NORMAL
- en: NOT gate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A NOT gate will transform a ket-zero ![](img/B15438_19_023.png) into a ket-one
    ![](img/B15438_19_024.png). It will transform a ket-one ![](img/B15438_19_025.png)
    into a ket-zero ![](img/B15438_19_026.png).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the circuit description, **On** is the ket-one state and **Off** is the
    ket-zero state, as shown in the following quantum score:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.5: Circuit description of a quantum score'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that:'
  prefs: []
  type: TYPE_NORMAL
- en: A NOT gate symbol is a circle with a vertical and horizontal line inside it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **On** status means that the state is ![](img/B15438_19_027.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Bloch sphere representation is at ![](img/B15438_19_028.png) (starting from
    the top of the Bloch sphere, as it should)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: H gate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'An H gate or Hadamard gate will perform the following transformation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.6: Hadamard gate transformation'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following 50% chance will be displayed in a rectangle and the position
    on the Bloch sphere will be displayed as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.7: 50% chance in a rectangle and on the Bloch sphere'
  prefs: []
  type: TYPE_NORMAL
- en: 'The fundamental role of a gate is to rotate the qubits on a Bloch sphere and
    produce a probable condition if measured. There are many possible gates to be
    explored and used, as shown in this design menu diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.8: Gates design menu'
  prefs: []
  type: TYPE_NORMAL
- en: These gates are more than enough to build many algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: A quantum computer score with Quirk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The goal here is to play around with the interface to intuitively see how circuits
    run.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building a quantum score (or circuit) with Quirk means the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Dragging and dropping gates that will make a qubit turn in a specific direction
    and produce probable outcomes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding another qubit, doing the same, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being able to perform an intermediate measurement, although this is impossible
    for a real physical quantum computer (the observations make the system collapse)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A score is represented as follows, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.9: Quantum computer score representation'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two qubits with a gate on each line to start. Then the intermediate
    result is shown, making the simulator very educational. Then two more gates are
    added. Finally, the following measurement probe is added at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.10: Measurement probe'
  prefs: []
  type: TYPE_NORMAL
- en: Once the measurement is made, the final result is displayed on the right of
    the measurement symbols.
  prefs: []
  type: TYPE_NORMAL
- en: A quantum computer score with IBM Q
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IBM Q provides a cloud platform to run a real physical quantum computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a free account and access the IBM quantum computing composer. Just as
    with Quirk, quantum gates are dragged on the following score, as shown in this
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.11: Quantum gates dragged'
  prefs: []
  type: TYPE_NORMAL
- en: 'The score can be run on a simulator like Quirk or a real quantum computer,
    as shown in this interface diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.12: Score interface'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Simulate**, which will run a simulator.
  prefs: []
  type: TYPE_NORMAL
- en: '**Run** launches a calculation on IBM''s physical quantum computer. It is an
    exhilarating experience! The future is at the tip of your fingers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following output is interesting. It is a bit different from Quirk for the
    same score, but the probabilities add up to 1 as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.13: Quantum computer score output'
  prefs: []
  type: TYPE_NORMAL
- en: 'IBM also possesses a source code version (QASM) of the score, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This language is an Open Quantum Assembly Language. It can be written in an
    editor like any other language on IBM's Q platform. A development kit can also
    be downloaded, and the APIs are functional. IBM provides extensive and detailed
    documentation on all the aspects of this approach.
  prefs: []
  type: TYPE_NORMAL
- en: All of this being said, let's find out how quantum computing can boost an AI
    project. It is now time to define the thinking quantum computer project.
  prefs: []
  type: TYPE_NORMAL
- en: A thinking quantum computer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A thinking quantum computer is not a reproduction of brain function, but rather
    a representation of the mind of a person. Neuromorphic computing is one approach
    that represents our neurons and how brain uses spiking neurons to think. Quantum
    computing can provide an exciting way to imitate our mind's capacity with mathematical
    algorithms that work with qubits, not neurons. We've just begun to explore the
    potential of these approaches, which in fact will most probably merge into an
    ensemble of hybrid software and hardware solutions.
  prefs: []
  type: TYPE_NORMAL
- en: The endeavor of the quantum MindX experiment is to build a personal mind named
    MindX, with memories of past events, conversations, chats, and photographs stored
    on a classical computer. The program will then transform subsets of the data into
    quantum circuits to see what happens, how our quantum circuit behaves when left
    to produce millions of possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: This section describes how to build MindX, a thinking computer that is just
    a research project. It must be noted that this approach is experimental. It could
    be viewed as an advanced mind experiment. I've been doing research on this subject
    for many years. The power of quantum computation will no doubt boost research
    in this field.
  prefs: []
  type: TYPE_NORMAL
- en: Representing our mind's concepts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The input consists of encoding a state of mind of a PCA CRLMM representation,
    as we built in *Chapter 14*, *Preparing the Input of Chatbots with Restricted
    Boltzmann Machines (RBMs) and Principal Component Analysis (PCA)*. The CRLMM representation
    is not a general dictionary or encyclopedia dataset but a mind-dataset of actual
    personal data that is collected, classified, and transformed into a PCA.
  prefs: []
  type: TYPE_NORMAL
- en: Expanding MindX's conceptual representations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MindX's mind dataset will grow continuously if implemented beyond this research
    experiment. It will have sensors to process body temperature for emotion classification,
    facial recognition for expression detection, body language detectors, and more.
    All of this technology is already available. The New York Stock Exchange already
    has artificial intelligence IoT agents that gather information from outer sources
    to make decisions. These AI agents have replaced a large amount of human decision-making.
    Imagine what is going to happen when quantum computing becomes disruptive!
  prefs: []
  type: TYPE_NORMAL
- en: The MindX experiment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The aim of the quantum MindX experiment is to build a mind and let it think
    with the power of a quantum computer. This section will show how to run a 16-qubit
    mind.
  prefs: []
  type: TYPE_NORMAL
- en: The size of the numbers needed to describe a 16-qubit quantum simulation is
    65,536.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section first describes how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and run a quantum score
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get on with preparing the data.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To prepare data for higher-dimension calculations, I have been using a concept
    encoding method for corporate projects for over 30 years to provide embedded data
    to the algorithms I have developed. This guarantees high-level abstraction to
    solve problems. It is a very profitable way to implement transfer learning and
    domain learning. This way, you can apply the same model to many different fields.
  prefs: []
  type: TYPE_NORMAL
- en: The method consists of embedding data with the methods described in this book.
    The goal always remains the same—to transform the data points into higher dimensions
    to visualize features.
  prefs: []
  type: TYPE_NORMAL
- en: For quantum computing, the method remains the same for the MindX experiment.
  prefs: []
  type: TYPE_NORMAL
- en: Transformation functions – the situation function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Two functions need to be applied before creating and running a score: a state
    of mind function and a quantum transformation function.'
  prefs: []
  type: TYPE_NORMAL
- en: The situation function consists of building a vector of features in PCA dimensions.
    We accomplished this in *Chapter 14*, *Preparing the Input of Chatbots with Restricted
    Boltzmann Machines (RBMs) and Principal Component Analysis (PCA),* and applied
    it to a chatbot in *Chapter 15*, *Setting Up a Cognitive NLP UI/CUI Chatbot*.
    The chatbot was able to use person X's mind-dataset to build a meaningful dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, the quantum dimensions will provide the chatbot with a nascent
    personal mind, not a general mind that can recognize, classify, and predict like
    a machine.
  prefs: []
  type: TYPE_NORMAL
- en: MindX has a mind that is biased by its way of thinking like humans. MindX has
    an exceptionally open mind to adapt to everyone, which gives it empathy.
  prefs: []
  type: TYPE_NORMAL
- en: MindX can doubt. Thus it can learn better than dogmatic machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'A situation function will create a situation matrix for a movie suggestion
    by the MindX bot, which will communicate with consumers. In a situation where
    a movie suggestion is made by the MindX bot, for example, it could be something
    as follows for 16 qubits:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Qubit** | **Concept** | **Image** | **Initial polarity** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | cities | parking | 0.146 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | darkness | dark forest | 0.5 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | nostalgia | autumn leaves | 0.5 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | worrying | dark background | 0.146 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | job | sad face | 0.5 |'
  prefs: []
  type: TYPE_TB
- en: '|  | … | .. | .. |'
  prefs: []
  type: TYPE_TB
- en: '| 15 | consider movie "Lost" |  | 0.38 |'
  prefs: []
  type: TYPE_TB
- en: '| 16 | decision to suggest "Lost" |  | 0.0 |'
  prefs: []
  type: TYPE_TB
- en: MindX is not analyzing person X anymore. It has now loaded an empathy matrix
    from its mind-dataset, which contains data and sentiment analysis *polarity*.
    Values close to 1 are positive. Values close to 0 or negative are negative. MindX
    loads its mind plus the mind of another person.
  prefs: []
  type: TYPE_NORMAL
- en: Empathy colors your thoughts and feelings with the thoughts and feelings of
    another person.
  prefs: []
  type: TYPE_NORMAL
- en: 'The 16-qubit matrix shown just now contains four columns, as shown in the preceding
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Qubit**: The line for this qubit on the quantum composer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Concepts and mental representation**: The concept loaded in MindX''s situation
    dataset derived through the process described in *Chapter 14*, *Preparing the
    Input Chatbots with Restricted Boltzmann Machines (RBM) and Principal Component
    Analysis (PCA)*, in which we ran an RBM to generate features we represented through
    a PCA.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The mental representation appears as shown in the following PCA:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.14: PCA representation of a "mind"'
  prefs: []
  type: TYPE_NORMAL
- en: These features, drawn from the RBM on the movie preferences of a particular
    age segment, can now be used as input in a quantum circuit to generate random
    mental activity with information and noise.
  prefs: []
  type: TYPE_NORMAL
- en: This movie example is for explaining how to create a thinking, empathetic chatbot.
    This approach can be applied to other commercial market segments or any situation
    in which a chatbot is required to think beyond preset answers. Many fields, such
    as healthcare, pharmaceutical research, and security, will benefit from mind-opening
    quantum algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Transformation functions – the quantum function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The algorithms have produced a qubit line number with labels (concepts and images).
    Each line also possesses a sentiment analysis polarity expressed in normalized
    values from 0 to 1 in probabilistic format. We will consider negative and positive
    views of the mind reacting to an object. Keep in mind that "negative" is close
    to 0, "positive" is close to 1, and the intermediate values give a more detailed approximation.
    0.4 to 0.6 is a turning point.
  prefs: []
  type: TYPE_NORMAL
- en: This first transformation into another dimension is the first step to initialize
    the quantum transformation function. The quantum transformation function consists
    of initializing the first column of all 16 qubits with a quantum gate.
  prefs: []
  type: TYPE_NORMAL
- en: Just like datasets were transformed into principal component features, the polarity
    transformation function enables the quantum transformation function to bring the
    dataset into a quantum universe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function will automatically find the quantum gates that represent the normalized
    sentiment analysis polarity of the data points of the following situation matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Initial polarity** | **Quantum gate** |'
  prefs: []
  type: TYPE_TB
- en: '| 0.146 | X^(1/4) |'
  prefs: []
  type: TYPE_TB
- en: '| 0.5 | X^(1/2) |'
  prefs: []
  type: TYPE_TB
- en: '| 0.5 | X^(1/2) |'
  prefs: []
  type: TYPE_TB
- en: '| 0.146 | X^(1/4) |'
  prefs: []
  type: TYPE_TB
- en: '| 0.5 | X^(1/2) |'
  prefs: []
  type: TYPE_TB
- en: '| .. |  |'
  prefs: []
  type: TYPE_TB
- en: '| 0.38 | X^(1/8) |'
  prefs: []
  type: TYPE_TB
- en: '| 0.0 | Z^(1/8) |'
  prefs: []
  type: TYPE_TB
- en: The state of mind of MindX, a random person, is now in a matrix, and its concepts
    have now been transformed into a quantum dimension, in which the data status can be
    traced throughout the creation of the quantum score.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and running the score
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A thought process of MindX is described in a quantum score. There are two ways
    to build this score:'
  prefs: []
  type: TYPE_NORMAL
- en: Manually, just like a musician writing a music score. This requires thinking
    about the previous logic gate and the effect of the next one, taking a decision
    process into account. It is like writing any artificial intelligence program.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically, by building a function that reads a rule base of MindX's way
    of thinking and applies the quantum gates through that rule base. You can apply
    this to machine learning and deep learning as well to test the performance of
    a quantum computer versus a classical one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In any case, it requires writing an algorithm. This algorithm is a decision-making
    algorithm that takes emotions into account. Doubt, for example, is what keeps
    many humans from making bad decisions. Too much doubt, for example, will make a
    person back out of a situation.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the quantum transcription of an algorithm that takes MindX's concepts
    into account and represents how they interact. This requires very precise thinking
    and cognitive science programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an experimental quantum score I built with Quirk:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_19_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.15: Quantum score built with Quirk'
  prefs: []
  type: TYPE_NORMAL
- en: Once the quantum score has been run and the measurement has been done, the green
    rectangles on the right provide the output.
  prefs: []
  type: TYPE_NORMAL
- en: Using the output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The output of the quantum score is now added as a column to the situation matrix.
    If you want to implement such solutions, just bear in mind that it will take some
    time to write the functions with some sweat and tea to make it through the nights.
    MindX could be used to enhance a chatbot with unplanned responses. MindX has proven
    it has imagination potential.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Qubit** | **Concept** | **Image** | **Initial normalized polarity expressed
    in quantum gate form** | **Quantum output directly interpreted as sentiment analysis
    polarity** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | cities | parking | 0.146 | 0.677 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | darkness | dark forest | 0.5 | 0.691 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | nostalgia | autumn leaves | 0.5 | 0.5 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | worrying | dark background | 0.146 | 0.48 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | job | sad face | 0.5 | 0.36 |'
  prefs: []
  type: TYPE_TB
- en: '|  | … | .. | .. |  |'
  prefs: []
  type: TYPE_TB
- en: '| 15 | consider movie "Lost" |  | 0.38 | 0.82 |'
  prefs: []
  type: TYPE_TB
- en: '| 16 | decision to suggest "Lost" |  | 0.0 | 0.75 |'
  prefs: []
  type: TYPE_TB
- en: MindX has given a 65,536 quantum state description of its thoughts about suggesting a
    given movie to person X. Lines 15 and 16 show that the normalized polarity value
    has risen over 0.5 to a positive feeling about the movie.
  prefs: []
  type: TYPE_NORMAL
- en: 'The reasoning is that the first lines show that MindX feels person X''s doubts
    about life at that moment:'
  prefs: []
  type: TYPE_NORMAL
- en: That person X will identify with the "Lost" movie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The movie has a happy ending (MindX knows that through the features of the movie)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That person X's spirits will be most probably lifted after watching the movie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can experiment with building quantum scores. You can use Quirk without
    installing anything and exploring the list of circuits available in many areas:
    Grover''s search, Shor''s period-finding, quantum Fourier transform, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quantum computers have opened the door to scientific experiments that could
    never have been carried out with classical computers. Within a few years, quantum
    computers will have become mainstream, unavoidable, and a key asset for businesses
    and research labs. The race has begun to conquer the market.
  prefs: []
  type: TYPE_NORMAL
- en: CRLMM applied to quantum computers could make MindX one of the most powerful
    thinking minds on earth—human or machine.
  prefs: []
  type: TYPE_NORMAL
- en: With an unlimited mind-dataset and a 2^q quantum computer starting at 250, a
    50-qubit machine, MindX could gain the thinking power and experience of a human
    who has lived for 1,000 years. MindX's thinking power and an exponential amount
    of real-time memory of past experiences, loaded through transformation functions,
    could help solve many medical, logistic, and other decision-making problems.
  prefs: []
  type: TYPE_NORMAL
- en: Quantum thinking has just begun to change the perception of the world. Conceptual AI
    models such as CRLMM will no doubt be the starting point for the next generation
    of AI solutions. These CRLMM models will be much more powerful because they will
    be gifted with empathy and complex minds.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, this overview of quantum computing will open the doors of your imagination
    to the new world awaiting you!
  prefs: []
  type: TYPE_NORMAL
- en: Artificial intelligence has only just begun its long journey into our lives.
    Always trust innovations. Never trust a solution that solves a problem without
    opening the door to a universe of questions and ideas!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beyond the hype, no quantum computer exists. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A quantum computer can store data. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The effect of quantum gates on qubits can be viewed with the Bloch sphere. (Yes
    | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A mind that thinks with past experiences, images, words, and other bits of everyday
    information, like stored memories, will find deeper solutions to problems that
    mathematics alone cannot solve. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A quantum computer will solve medical research problems that cannot be solved
    today. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A quantum computer can solve mathematical problems exponentially faster than
    classical computers. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Classical computers will soon disappear and smartphone processors too. (Yes |
    No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A quantum score cannot be written in source code format but only with a visual
    interface. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Quantum simulators can run as fast as quantum computers. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Quantum computers produce intermediate results when they are running calculations.
    (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Theory**: *Quantum Computation and Quantum Information: 10th Anniversary
    Edition*, *Michael Nielson*, *Isaac L. Chuang*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Explore IBM Q and discover how you can implement quantum scores: [https://www.ibm.com/quantum-computing/](https://www.ibm.com/quantum-computing/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use Quirk, an intuitive quantum score designing tool: [http://algassert.com/2016/05/22/quirk.html](http://algassert.com/2016/05/22/quirk.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
