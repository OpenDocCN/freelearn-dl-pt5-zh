["```py\n    recall_instance = Recall()\n    precision_instance = Precision()\n    learn = tabular_learner(dls,layers=[200,100], metrics=[accuracy,recall_instance,precision_instance])\n    learn.fit_one_cycle(3)\n    ```", "```py\nTypeError: unsupported operand type(s) for *: 'AccumMetric' and 'int'\n```", "```py\n    model_path = '/notebooks/temp'\n    ```", "```py\n    db = DataBlock(blocks = (ImageBlock, CategoryBlock),\n                     get_items=get_image_files,\n                     splitter=RandomSplitter(seed=42),\n                     get_y=parent_label)\n    ```", "```py\n    dls = db.dataloaders(path/'train',bs=32)\n    ```", "```py\n    db.summary(path/\"train\")\n    ```", "```py\n    db_test = DataBlock(blocks = (ImageBlock, CategoryBlock),\n                     get_items=get_image_files,\n                     splitter=RandomSplitter(valid_pct=0.99,seed=42),\n                     get_y=parent_label)\n    ```", "```py\n    learn = cnn_learner(dls, resnet18, \n                        loss_func=LabelSmoothingCrossEntropy(), \n                        metrics=accuracy)\n    ```", "```py\n    learn.fine_tune(2,cbs=ShowGraphCallback())\n    ```", "```py\n    save_path = learn.path\n    learn.path = Path(model_path)\n    learn.save('cifar_save_'+modifier)\n    learn.path = save_path\n    ```", "```py\n    learn.validate()\n    ```", "```py\n    interp = ClassificationInterpretation.from_learner(learn)\n    interp.plot_top_losses(9, figsize=(15,11))\n    ```", "```py\n    interp.plot_confusion_matrix()\n    ```", "```py\n    dls_test = db_test.dataloaders(path/'test',bs=32)\n    ```", "```py\n    learn_test = cnn_learner(dls_test, resnet18, \n                        loss_func=LabelSmoothingCrossEntropy(), \n                        metrics=accuracy)\n    ```", "```py\n    learn_test.path = Path(model_path)\n    learn_test.load('cifar_save_'+modifier)\n    ```", "```py\n    learn_test.validate()\n    ```", "```py\n    interp_test = ClassificationInterpretation.from_learner(learn_test)\n    interp_test.plot_top_losses(9, figsize=(15,11))\n    ```", "```py\n    interp_test.plot_confusion_matrix()\n    ```", "```py\ndls = ImageDataLoaders.from_folder(path, train='train', valid='test')\n```", "```py\ndls = db.dataloaders(path/'train',bs=32)\n```", "```py\ndb = DataBlock(blocks = (ImageBlock, CategoryBlock),\n                 get_items=get_image_files,\n                 splitter=RandomSplitter(seed=42),\n                 get_y=parent_label)\n```", "```py\n    model_path = '/notebooks/temp'\n    ```", "```py\n    db2 = db.new(batch_tfms=aug_transforms())\n    dls2 = db2.dataloaders(path/'train',bs=32)\n    ```", "```py\n    db2.summary(path/\"train\")\n    ```", "```py\n    dls2.train.show_batch(unique=True, max_n=8, nrows=2)\n    ```", "```py\n    learn2 = cnn_learner(dls2, resnet18, \n                        loss_func=LabelSmoothingCrossEntropy(), \n                        metrics=accuracy)\n    ```", "```py\n    learn2.fine_tune(2)\n    ```", "```py\n    save_path = learn2.path\n    learn2.path = Path(model_path)\n    learn2.save('cifar_augmented_save_'+modifier)\n    learn2.path = save_path\n    ```", "```py\n    dls_test = db_test.dataloaders(path/'test',bs=32)\n    ```", "```py\n    learn_augment_test = cnn_learner(dls_test, resnet18, \n                        loss_func=LabelSmoothingCrossEntropy(), \n                        metrics=accuracy)\n    ```", "```py\n    learn_augment_test.path = Path(model_path)\n    learn_augment_test.load('cifar_augmented_save_'+modifier)\n    ```", "```py\n    learn_augment_test.validate()\n    ```", "```py\n    interp_augment_test = ClassificationInterpretation.from_learner(learn_augment_test)\n    interp_augment_test.plot_top_losses(9, figsize=(15,11))\n    ```", "```py\n    interp_augment_test.plot_confusion_matrix()\n    ```", "```py\n    model_path = '/notebooks/temp'\n    ```", "```py\n    %%time\n    set_seed(dls,x=42)\n    learn = tabular_learner(dls,layers=[200,100], metrics=accuracy)\n    learn.fit_one_cycle(10)\n    ```", "```py\n    learn.validate()\n    ```", "```py\n    %%time\n    set_seed(dls,x=42)\n    learn_es = tabular_learner(dls,layers=[200,100], metrics=accuracy)\n    learn_es.fit_one_cycle(10,cbs=EarlyStoppingCallback(monitor='accuracy', min_delta=0.01, patience=3))\n    ```", "```py\n    learn_es.validate()\n    ```", "```py\n    %%time\n    set_seed(dls,x=42)\n    learn_es_sm = tabular_learner(dls,layers=[200,100], metrics=accuracy)\n    keep_path = learn_es_sm.path\n    # set the model path to a writeable directory. If you don't do this, the code will produce an error on Gradient\n    #learn_es_sm.path = Path('/notebooks/temp/models')\n    learn_es_sm.path = Path(model_path)\n    learn_es_sm.fit_one_cycle(10,cbs=[EarlyStoppingCallback(monitor='accuracy', min_delta=0.01, patience=3),SaveModelCallback(monitor='accuracy', min_delta=0.01)])\n    # reset the model path\n    learn_es_sm.path = keep_path\n    ```", "```py\n    learn_es.validate()\n    ```", "```py\ndef set_seed(dls,x=42): \n    random.seed(x)\n    dls.rng.seed(x) \n    np.random.seed(x)\n    torch.manual_seed(x)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(x)\n```", "```py\n    https Forwarding URL:![Figure 8.39 – Output of ngrok\n    ](img/B16216_8_039.jpg)Figure 8.39 – Output of ngrok\n    ```", "```py\n    python web_flask_deploy.py\n    ```", "```py\n.\\ngrok http 5000\n```", "```py\n    cd templates\n    ```", "```py\n      <input type=\"file\" \n           id=\"image_field\" name=\"image_field\"\n           accept=\"image/png, image/jpeg\"\n         onchange=\"getFile();\">\n    ```", "```py\n      <script>\n      function getFile() {\n        file_list = document.getElementById(\"image_field\").files;\n        img_f = document.createElement(\"img\");\n        img_f.setAttribute(\"id\",\"displayImage\");\n        img_f.setAttribute(\"style\",\"width:50px\");\n        img_f.setAttribute(\"alt\",\"image to display here\");\n        document.body.appendChild(img_f);\n        document.getElementById(\"displayImage\").src = \\\n    URL.createObjectURL(file_list[0]);\n      }\n      </script>\n    ```", "```py\n    cd ..\n    ```", "```py\n    python web_flask_deploy_image_model.py\n    ```", "```py\n    cp -r deploy_image_test deploy_image_multi_test\n    ```", "```py\n    <input type=\"file\" multiple\n           id=\"image_field\" name=\"image_field\"\n           accept=\"image/png, image/jpeg\"\n         onchange=\"getFile();\">\n    ```", "```py\n    function getFile() {\n      img_f = [];\n      var i = 0;\n      var di_string = \"displayImage\"\n      file_list = \\\n    document.getElementById(\"image_field\").files;\n      for (file_item of file_list) {\n        img_f[i] = document.createElement(\"img\");\n        var di_1 = di_string.concat(i)\n        img_f[i].setAttribute(\"id\",di_1);\n        img_f[i].setAttribute(\"style\",\"width:50px\");\n        img_f[i].setAttribute(\"alt\",\"image to display here\");\n        document.body.appendChild(img_f[i]);\n        document.getElementById(di_1).src =\\\n    URL.createObjectURL(file_item);\n        i =  i+1\n      }\n      }\n    ```", "```py\n    python web_flask_deploy_image_model.py\n    ```"]