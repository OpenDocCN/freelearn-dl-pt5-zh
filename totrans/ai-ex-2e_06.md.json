["```py\nfrom googleapiclient.discovery import build \n```", "```py\n# -*- coding: utf-8 -*- \n```", "```py\nimport html \n```", "```py\nprint(\"result:\", html.unescape(result)) \n```", "```py\ndef g_translate(source,targetl):\n    service = build('translate', 'v2',developerKey='your Key')\n    request = service.translations().list(q=source,\n        target=targetl)\n    response = request.execute()\n    return response['translations'][0]['translatedText'] \n```", "```py\nsource=\"your text\"\ntargetl=\"abbreviation of the target language\"\nresult = g_translate(source,targetl)\nprint(result) \n```", "```py\nfrom googleapiclient.discovery import build\nimport html\ndef g_translate(source,targetl):\n    service = build('translate', 'v2',developerKey='your key')\n    request = service.translations().list(q=source,\n        target=targetl)\n    response = request.execute()\n    return response['translations'][0]['translatedText']\nsource='Google Translate is great!'\ntargetl=\"fr\"\nresult = g_translate(source,targetl)\nprint(\"result:\", html.unescape(result)) \n```", "```py\nGoogle Translate est génial! \n```", "```py\nsource='Hello. My name is Usty!'\n >>>result:Bonjour. Je m'appelle Usty!\nsource='The weather is nice today'\n >>>result: Le temps est beau aujourd'hui\nsource='Ce professor me chercher des poux.'\n >>>result: This professor is looking for lice! \n```", "```py\nsource='chercher des poux'\n>>result: look for lice \n```", "```py\nsource='Chercher des limites est intéressant.'\n>>>result:Looking for boundaries is interesting. \n```", "```py\nsource='Une SAS ne dispense pas de suivre les recommandations en vigueur autour des pratiques commerciales.'\n>>>result:An SAS does not exempt from following the recommendations in force around commercial practices. \n```", "```py\nThe project team is all ears \n```", "```py\nsource:\"The project team is all ears\".\n>>>result: L'équipe de projet est tout ouïe. \n```", "```py\nsource='The coach stopped and everybody was complaining.' \n```", "```py\nresult: L'entraîneur s'est arrêté et tout le monde se plaignait.. \n```", "```py\nsource='The coach broke down and stopped and everybody was complaining.' \n```", "```py\nresult: L'entraîneur est tombé en panne et s'est arrêté et tout le monde se plaignait. \n```", "```py\nX=['Eating fatty food can be unhealthy.',\n   'This was a catch-22 situation.',\n   'She would not lend me her tote bag',\n   'He had a chip on his shoulder',\n   'The market was bearish yesterday',\n   'That was definitely wrong',\n   'The project was compromised but he pulled a rabit out of his hat',\n   'So just let the chips fall where they may',\n   'She went the extra mile to satisfy the customer',\n   'She bailed out when it became unbearable',\n   'The term person includes one or more individuals, labor unions, partnerships, associations, corporations, legal representatives, mutual companies, joint-stock companies, trusts, unincorporated organizations, trustees, trustees in bankruptcy, or receivers.',\n   'The coach broke down, stopped and everybody was complaining'] \n```", "```py\nX1=['grasse',\n    'insoluble',\n    'sac',\n    'aggressif',\n    'marché',\n    'certainement',\n    'chapeau',\n    'advienne',\n    'supplémentaire',\n    'parti',\n    'personne',\n    'bus'] \n```", "```py\nX2=[0,0,0,1,0,0,0,0,0,0,0,1] \n```", "```py\nphrase_translation=['','','','Il est agressif','','','','','','','',''] \n```", "```py\nbroke,road,stopped,shouted,class\n1,3.5,6.4,9,trainer\n1,3.0,5.4,9,trainer\n1,3.2,6.3,9,trainer\n...\n6.4,6.2,9.5,1.5,bus\n2,3.2,9,1,bus\n6.4,6.2,9.5,1.5,bus\n...\n3.3,7.3,3.0,2.5,coach\n4.7,5.7,3.1,3.7,coach\n2.0,6.0,2.7,3.1,coach \n```", "```py\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\n# Import data\ndf = pd.read_csv('V1.csv')\nprint (df.head())\n# KNN Classification labels\nX = df.loc[:,'broke':'shouted']\nY = df.loc[:,'class'] \n```", "```py\n# Trains the model\nknn = KNeighborsClassifier()\nknn.fit(X,Y) \n```", "```py\n# Requesting a prediction\n#broke and stopped are\n#activated to see the best choice of words to fit these features.\n# brock and stopped were found in the sentence to be interpreted.\n# In X_DL as in X, the labels are : broke, road, stopped,shouted.\nX_DL = [[9,0,9,0]]\nprediction = knn.predict(X_DL)\nprint (\"The prediction is:\",str(prediction).strip('[]')) \n```", "```py\nThe prediction is: 'bus' \n```", "```py\n#Uses the same V1.csv because the parsing has\n# been checked and is reliable as \"dataset lexical rule base\".\ndf = pd.read_csv('V1.csv')\n# Plotting the relation of each feature with each class\nfigure,(sub1,sub2,sub3,sub4) = plt.subplots(\n    4,sharex=True,sharey=True)\nplt.suptitle('k-nearest neighbors')\nplt.xlabel('Feature')\nplt.ylabel('Class')\nX = df.loc[:,'broke']\nY = df.loc[:,'class']\nsub1.scatter(X, Y,color='blue',label='broke')\nsub1.legend(loc=4, prop={'size': 5})\nsub1.set_title('Polysemy')\nX = df.loc[:,'road']\nY = df.loc[:,'class']\nsub2.scatter(X, Y,color='green',label='road')\nsub2.legend(loc=4, prop={'size': 5})\nX = df.loc[:,'stopped']\nY = df.loc[:,'class']\nsub3.scatter(X, Y,color='red',label='stopped')\nsub3.legend(loc=4, prop={'size': 5})\nX = df.loc[:,'shouted']\nY = df.loc[:,'class']\nsub4.scatter(X, Y,color='black',label='shouted')\nsub4.legend(loc=4, prop={'size': 5})\nfigure.subplots_adjust(hspace=0)\nplt.show() \n```", "```py\ndef knn(polysemy,vpolysemy,begin,end):\n    df = pd.read_csv(polysemy+'.csv')\n    X = df.loc[:,'broke':'shouted']\n    Y = df.loc[:,'class']\n    knn = KNeighborsClassifier()\n    knn.fit(X,Y)\n    prediction = knn.predict(vpolysemy)\n    return prediction \n```", "```py\n#print('Phrase-Based Machine Translation(PBMT)model:base'): #m='base'\nprint('Neural Machine Translation model:nmt') \n```", "```py\nfor xi in range(len(X)):\n    source=X[xi]\n    targetl=\"fr\";m='nmt'\n    result = g_translate(source,targetl,m) \n```", "```py\n back_translate=result\n    back_translate = g_translate(back_translate,targetl,m)\n    print(\"source:\",source,\":\",len(source))\n    print(\"result:\",result)\n    print(\"target:\",back_translate,\":\",len(back_translate)) \n```", "```py\n if(source == back_translate):\n        print(\"true\")\n        if((term not in words)and (xi!=4)):\n            t+=1\n    else:\n    f+=1;print(\"false\") \n```", "```py\nsource: Eating fatty food can be unhealthy. : 35\nresult: Manger de la nourriture grasse peut être malsain.\ntarget: Eating fat food can be unhealthy. : 33\nfalse \n```", "```py\nX=['Eating fatty food can be unhealthy.',\n   'This was a catch-22 situation.',\n   'She would not lend me her tote bag',\n   'He had a chip on his shoulder',\n....] \n```", "```py\n else:\n        f+=1;print(\"false\")\n    if(X2[xi]>0):\n        DT=deeper_translate(source,xi)\n        dt+=1 \n```", "```py\nsource: He had a chip on his shoulder : 29\nresult: Il avait une puce sur son épaule\ntarget: He had a chip on his shoulder : 29\nfalse \n```", "```py\ndef deeper_translate(source,index):\n    dt=source\n    deeper_response=phrase_translation[index]\n    if(len(deeper_response)<=0):\n        print(\"deeper translation program result:\",\n            deeper_response,\":Now true\") \n```", "```py\nphrase_translation=['','','','Il est agressif','','','','','','','',''] \n```", "```py\nInitial sentence:\nsource: He had a chip on his shoulder : 29\nWrong answer:\nresult: Il avait une puce sur son épaule\nThe back-translation works:\ntarget: He had a chip on his shoulder : 29\nterm: aggressif\nfalse\ndeeper translation program result: Il est agressif \n```", "```py\n if(source == back_translate):\n        print(\"true\")\n        if((term not in words) and (xi!=4)):\n            t+=1\n    else:\n        f+=1;print(\"false\")\n        if(X2[xi]>0):\n            DT=deeper_translate(source,xi)\n            dt+=1 \n```", "```py\n if(len(deeper_response)<=0):\n        v1=0\n        for i in range(4):\n            ngram=V1[i]\n            if(ngram in source):\n                vpolysemy[0][i]=9\n                v1=1 \n```", "```py\nV1=['broke','road','stopped','shouted','coach','bus','car',\n    'truck','break','broke','roads','stop'] \n```", "```py\nvpolysemy=[[0,0,0,0]] \n```", "```py\n if(v1>0):\n        polysemy='V1'\n        begin=str(V1[0]).strip('[]');end=str(V1[3]).strip('[]')\n        sememe=knn(polysemy,vpolysemy,begin,end) \n```", "```py\ndef knn(polysemy,vpolysemy,begin,end):\n    df = pd.read_csv(polysemy+'.csv')\n    X = df.loc[:,begin:end]\n    Y = df.loc[:,'class']\n    knn = KNeighborsClassifier()\n    knn.fit(X,Y)\n    prediction = knn.predict(vpolysemy)\n    return prediction \n```", "```py\nSource: The coach broke down, stopped and everybody was complaining : 59\nresult: L'entraîneur est tombé en panne, s'est arrêté et tout le monde se plaignait\ntarget: The coach broke down, stopped, and everyone was complaining : 59\nterm: bus\nfalse \n```", "```py\n sememe=knn(polysemy,vpolysemy,begin,end)\n            for i in range(2):\n                if(V1_class[i] in source):\n                    replace=str(V1_class[i]).strip('[]')\n                    sememe=str(sememe).strip('[]')\n                    dtsource = source.replace(replace,sememe)\n                    targetl=\"fr\";m='base'\n                    result = g_translate(dtsource,targetl,m)\n                    print('polysemy narrowed result:',result,\n                        \":Now true\") \n```", "```py\ndef frequency_p(tnumber,cnumber):\n    ff=cnumber/tnumber #frequentist interpretation and probability\n    return ff \n```", "```py\n if(f>0):\n        B1=frequency_p(xi+1,f) #error detection probability before deep translation\n        B2=frequency_p(xi+1,f-dt) #error detection probability after deep translation\n    if(f>0):\n        print(\"ETP before DT\",round(B1,2),\n            \"ETP with DT\",round(B2,2))\n    else:\n        print('Insufficient data in probability distribution') \n```", "```py\nprint(\"------Summary------\")\nprint('Neural Machine Translation model:nmt')\nprint('Google Translate:',\"True:\",t,\"False:\",f,'ETP',round(f/len(X),2))\nprint('Customized Google Translate:',\"True:\",t,\"False:\",f-dt,'ETP',round((f-dt)/len(X),2))\na=2.5;at=t+a;af=f-a #subjective acceptance of an approximate result\nprint('Google Translate acceptable:',\"True:\",at,\"False:\",af,'ETP',round(af/len(X),2))\n#The error rate should decrease and be stabilized as the KNN knowledge base increases\nprint('Customized Google Translate acceptable:',\"True:\",at,\"False:\",af-dt,'ETP',round((af-dt)/len(X),2)) \n```", "```py\n>>------Summary------\n>>Neural Machine Translation model:nmt\n>>Google Translate: True: 2 False: 8 ETP 0.67\n>>Customized Google Translate: True: 2 False: 7 ETP 0.58\n>>Google Translate acceptable: True: 4.5 False: 5.5 ETP 0.46\n>>Customized Google Translate acceptable: True: 4.5 False: 4.5 ETP 0.38 \n```"]