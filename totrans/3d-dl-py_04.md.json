["```py\n    import os\n    import sys\n    import torch\n    from pytorch3d.io import load_ply, save_ply\n    from pytorch3d.io import load_obj, save_obj\n    from pytorch3d.structures import Meshes\n    from pytorch3d.utils import ico_sphere\n    from pytorch3d.ops import sample_points_from_meshes\n    from pytorch3d.loss import (\n        chamfer_distance,\n        mesh_edge_loss,\n        mesh_laplacian_smoothing,\n        mesh_normal_consistency,\n    )\n    import numpy as np\n    ```", "```py\n    if torch.cuda.is_available():\n        device = torch.device(\"cuda:0\")\n    else:\n        device = torch.device(\"cpu\")\n        print(\"WARNING: CPU only, this will be slow!\")\n    ```", "```py\n    verts, faces = load_ply(\"pedestrian.ply\")\n    verts = verts.to(device)\n    faces = faces.to(device)\n    ```", "```py\n    center = verts.mean(0)\n    verts = verts - center\n    scale = max(verts.abs().max(0)[0])\n    verts = verts / scale\n    verts = verts[None, :, :]\n    ```", "```py\n    src_mesh = ico_sphere(4, device)\n    ```", "```py\n    src_vert = src_mesh.verts_list()\n    deform_verts = torch.full(src_vert[0].shape, 0.0, device=device, requires_grad=True)\n    ```", "```py\n    optimizer = torch.optim.SGD([deform_verts], lr=1.0, momentum=0.9)\n    ```", "```py\n    w_chamfer = 1.0\n    w_edge = 1.0\n    w_normal = 0.01\n    w_laplacian = 0.1\n    ```", "```py\nfor i in range(0, 2000):\n    print(\"i = \", i)\n    optimizer.zero_grad()\n    new_src_mesh = src_mesh.offset_verts(deform_verts)\n    sample_trg = verts\n    sample_src = sample_points_from_meshes(new_src_mesh, verts.shape[1])\n    loss_chamfer, _ = chamfer_distance(sample_trg, sample_src)\n    loss_edge = mesh_edge_loss(new_src_mesh)\n    loss_normal = mesh_normal_consistency(new_src_mesh)\n    loss_laplacian = mesh_laplacian_smoothing(new_src_mesh, method=\"uniform\")\n    loss = (\n        loss_chamfer * w_chamfer\n        + loss_edge * w_edge\n        + loss_normal * w_normal\n        + loss_laplacian * w_laplacian\n    )\n    loss.backward()\n    optimizer.step()\n```", "```py\n    final_verts, final_faces = new_src_mesh.get_mesh_verts_faces(0)\n    final_verts = final_verts * scale + center\n    ```", "```py\n    final_obj = os.path.join(\"./\", \"deform1.ply\")\n    save_ply(final_obj, final_verts, final_faces, ascii=True)\n    ```", "```py\nw_chamfer = 1.0\n```", "```py\nw_edge = 0.0\n```", "```py\nw_normal = 0.00\n```", "```py\nw_laplacian = 0.0\n```", "```py\nw_chamfer = 1.0\n```", "```py\nw_edge = 1.0\n```", "```py\nw_normal = 0.00\n```", "```py\nw_laplacian = 0.0\n```"]