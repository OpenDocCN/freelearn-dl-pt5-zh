["```py\nfrom magenta.music import DEFAULT_QUARTERS_PER_MINUTE\nfrom magenta.protobuf.music_pb2 import NoteSequence\n\ndef generate(bundle_name: str,\n             sequence_generator,\n             generator_id: str,\n             primer_filename: str = None,\n             qpm: float = DEFAULT_QUARTERS_PER_MINUTE,\n             total_length_steps: int = 64,\n             temperature: float = 1.0,\n             beam_size: int = 1,\n             branch_factor: int = 1,\n             steps_per_iteration: int = 1) -> NoteSequence:\n```", "```py\nimport magenta.music as mm\n\nif primer_filename:\n  primer_sequence = mm.midi_io.midi_file_to_note_sequence(\n    os.path.join(\"primers\", primer_filename))\nelse:\n  primer_sequence = NoteSequence()\n```", "```py\nif primer_sequence.tempos:\n  if len(primer_sequence.tempos) > 1:\n    raise Exception(\"No support for multiple tempos\")\n  qpm = primer_sequence.tempos[0].qpm\n```", "```py\nprimer_sequence_length_steps = math.ceil(primer_sequence.total_time\n                                         / seconds_per_step)\nprimer_sequence_length_time = (primer_sequence_length_steps \n                               * seconds_per_step)\n```", "```py\ngeneration_length_steps = total_length_steps - primer_sequence_length_steps\ngeneration_length_time = generation_length_steps * seconds_per_step\n```", "```py\ngenerator_options.args['beam_size'].int_value = beam_size\ngenerator_options.args['branch_factor'].int_value = branch_factor\ngenerator_options.args['steps_per_iteration'].int_value = steps_per_iteration\n```", "```py\n# Writes the resulting midi file to the output directory\ndate_and_time = time.strftime('%Y-%m-%d_%H%M%S')\ngenerator_name = str(generator.__class__).split(\".\")[2]\nmidi_filename = \"%s_%s_%s.mid\" % (generator_name,\n                                  generator_id,\n                                  date_and_time)\nmidi_path = os.path.join(\"output\", midi_filename)\nmm.midi_io.note_sequence_to_midi_file(sequence, midi_path)\nprint(\"Generated midi file: \" + str(os.path.abspath(midi_path)))\n\n# Writes the resulting plot file to the output directory\ndate_and_time = time.strftime('%Y-%m-%d_%H%M%S')\ngenerator_name = str(generator.__class__).split(\".\")[2]\nplot_filename = \"%s_%s_%s.html\" % (generator_name,\n                                   generator_id,\n                                   date_and_time)\nplot_path = os.path.join(\"output\", plot_filename)\npretty_midi = mm.midi_io.note_sequence_to_pretty_midi(sequence)\nplotter = Plotter()\nplotter.save(pretty_midi, plot_path)\nprint(\"Generated plot file: \" + str(os.path.abspath(plot_path)))\n```", "```py\nfrom magenta.models.melody_rnn import melody_rnn_sequence_generator\n\ngenerate(\n  \"basic_rnn.mag\",\n  melody_rnn_sequence_generator,\n  \"basic_rnn\",\n  primer_filename=\"Fur_Elisa_Beethoveen_Polyphonic.mid\",\n  total_length_steps=64)\n```", "```py\ngenerator.generate(\n  \"lookback_rnn.mag\",\n  melody_rnn_sequence_generator,\n  \"lookback_rnn\",\n  primer_filename=\"Fur_Elisa_Beethoveen_Monophonic.mid\",\n  total_length_steps=64,\n  temperature=1.1)\n```", "```py\ngenerator.generate(\n  \"attention_rnn.mag\",\n  melody_rnn_sequence_generator,\n  \"attention_rnn\",\n  primer_filename=\"Fur_Elisa_Beethoveen_Monophonic.mid\",\n  total_length_steps=128,\n  temperature=1.1)\n```", "```py\n# Add attention wrapper to first layer.\ncell = tf.contrib.rnn.AttentionCellWrapper(cell, attn_length, \n                                           state_is_tuple=True)\n```", "```py\ngenerate(\n  \"basic_rnn.mag\",\n  melody_rnn_sequence_generator,\n  \"basic_rnn\",\n  primer_filename=\"Fur_Elisa_Beethoveen_Polyphonic.mid\",\n  total_length_steps=32,\n  temperature=0.9)\n```", "```py\nTraceback (most recent call last):\n File \"/home/Packt/hands-on-music-generation-with-magenta/Chapter03/01.py\", line 263, in <module>\n tf.app.run(app)\n ...\n File \"/home/Packt/miniconda3/envs/magenta/lib/python3.5/site-packages/magenta/models/melody_rnn/melody_rnn_sequence_generator.py\", line 91, in _generate\n assert len(extracted_melodies) <= 1\nAssertionError\n```", "```py\nfrom magenta.music import DEFAULT_QUARTERS_PER_MINUTE\nfrom magenta.protobuf.music_pb2 import NoteSequence\n\ndef generate(bundle_name: str,\n             sequence_generator,\n             generator_id: str,\n             qpm: float = DEFAULT_QUARTERS_PER_MINUTE,\n             primer_filename: str = None,\n             condition_on_primer: bool = False,\n             inject_primer_during_generation: bool = False,\n             total_length_steps: int = 64,\n             temperature: float = 1.0,\n             beam_size: int = 1,\n             branch_factor: int = 1,\n            steps_per_iteration: int = 1) -> NoteSequence:\n```", "```py\ngenerator_options.args['condition_on_primer'].bool_value = (\n    condition_on_primer)\ngenerator_options.args['no_inject_primer_during_generation'].bool_value = (\n    not inject_primer_during_generation)\n```", "```py\ngenerate(\n  \"polyphony_rnn.mag\",\n  polyphony_sequence_generator,\n  \"polyphony\",\n  condition_on_primer=True,\n  inject_primer_during_generation=False,\n  temperature=0.9,\n  primer_filename=\"Fur_Elisa_Beethoveen_Polyphonic.mid\")\n\ngenerate(\n  \"polyphony_rnn.mag\",\n  polyphony_sequence_generator,\n  \"polyphony\",\n  condition_on_primer=False,\n  inject_primer_during_generation=True,\n  temperature=0.9,\n  primer_filename=\"Fur_Elisa_Beethoveen_Polyphonic.mid\")\n```", "```py\nSTART\nNEW_NOTE 69\nNEW_NOTE 45\nSTEP_END\nCONTINUED_NOTE 69\nNEW_NOTE 52\nSTEP_END\nNEW_NOTE 57\nSTEP_END\nNEW_NOTE 60\nSTEP_END\nEND\n```", "```py\n[polyphony_sequence_generator.py:171] Need to generate 40 more steps \nfor this sequence, will try asking for 200 RNN steps\n```"]