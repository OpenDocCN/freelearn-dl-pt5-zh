["```py\n    actual_positive = 95\n    total_data = 10000\n    actual_negative = total_data – actual_positive\n    ```", "```py\n    def precision(tp, fp):\n         denominator = tp + fp\n         if denominator == 0:\n               return 0\n         return tp/ denominator\n    def recall(tp, fn):\n         denominator = tp + fn\n         if denominator == 0:\n               return 0\n         return tp/denominator\n    def f1score(tp, fp, fn):\n         prec = precision(tp, fp)\n         rec = recall(tp, fn)\n         denominator = prec+ rec\n         if denominator == 0:\n               return 0\n         return 2 * (prec * rec) / denominator\n    def fbeta(tp, fp, fn, beta=0.5):\n         prec = precision(tp, fp)\n         rec = recall(tp, fn)\n         denominator = beta**2 * prec + rec\n         if denominator == 0:\n               return 0\n         return (1+beta**2) * (prec * rec) / denominator\n    ```", "```py\n    def compute_total_cash(tp, fp, fn, tn):\n         return tp * -50 + fp * -50 + fn * -1050 + tn * 150\n    ```", "```py\n    baseline_cash = compute_total_cash(0, 0, actual_positive, actual_negative)\n    threshold_cash_line = baseline_cash + 30000\n    ```", "```py\n    f1_scores = []\n    f2_scores = []\n    total_cash = []\n    for tp in range(0, 96):\n         fn = 95 - tp\n         for fp in range(0, actual_negative):\n               tn = total_data - tp - fp - fn\n               f1_scores.append(f1score(tp, fp, fn))\n               f2_scores.append(fbeta(tp, fp, fn, beta=2.0))\n               total_cash.append(compute_total_cash(tp, fp, fn, tn)\n    ```", "```py\n    import matplotlib.pyplot as plt\n    fig, axs = plt.subplots(2, figsize=(18, 15))\n    axs[0].scatter(f1_scores, total_cash, alpha=0.01)\n    axs[1].scatter(f2_scores, total_cash, alpha=0.01)\n    for i in range(2):\n         axs[i].axhline(y=baseline_cash, color='r', linestyle='dotted')\n         axs[i].axhline(y=threshold_cash_line, color='y', linestyle='dashdot')\n    ```"]