["```py\n<html>\n<head>\n  <script src=\"img/tf.min.js\"></script>\n  <script>\n    const model = tf.sequential();\n    model.add(tf.layers.dense({units: 1, inputShape: [1]}));\n    model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n  </script>\n</head>\n<body>\n</body>\n</html>\n```", "```py\nimport * as tf from '@tensorflow/tfjs';\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units: 1, inputShape: [1]}));\nmodel.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n```", "```py\ncurl -o \"checkpoint_converter.py\" \"https://raw.githubusercontent.com/tensorflow/magenta-js/master/scripts/checkpoint_converter.py\"\n```", "```py\n# While in your Magenta conda environment\npip install tensorflowjs\n```", "```py\npython checkpoint_converter.py \"PATH_TO_TRAINING_DIR/drums_rnn_dance_drums/logdir/run1_small/train/model.ckpt-20000\" \"checkpoints/drums_rnn_dance_small\"\n```", "```py\n{\n  \"type\": \"MusicRNN\",\n  \"dataConverter\": {\n    \"type\": \"DrumsConverter\",\n    \"args\": {}\n  }\n}\n```", "```py\n<html lang=\"en\">\n<body>\n<script src=\"img/magentamusic.js\"></script>\n<script>\n  // Initialize a locally trained DrumsRNN model from the local directory\n  // at: checkpoints/drums_rnn_dance_small\n  async function startLocalModel() {\n    const musicRnn = new mm.MusicRNN(\"http://0.0.0.0:8000/\" +\n \"checkpoints/drums_rnn_dance_small\");\n    await musicRnn.initialize();\n  }\n\n  // Calls the initialization of the local model\n  try {\n    Promise.all([startLocalModel()]);\n  } catch (error) {\n    console.error(error);\n  }\n</script>\n</body>\n</html>\n```", "```py\npython -m http.server\n```", "```py\n* Tone.js v13.8.25 * \nMusicRNN  Initialized model in 0.695s\n```", "```py\ncurl -o \"checkpoint_downloader.py\" \"https://raw.githubusercontent.com/tensorflow/magenta-js/master/scripts/checkpoint_downloader.py\"\n```", "```py\npython checkpoint_downloader.py \"https://storage.googleapis.com/magentadata/js/checkpoints/music_vae/mel_16bar_small_q2\" \"checkpoints/music_vae_mel_16bar_small_q2\"\n```", "```py\n<html lang=\"en\">\n<body>\n<div>\n  <button disabled id=\"button-sample-gansynth-note\">\n    Sample GANSynth note\n  </button>\n  <div id=\"container-plots\"></div>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/@magenta/music@1.12.0/dist/magentamusic.min.js\"></script>\n<script>\n  // GANSynth code\n</script>\n</body>\n</html>\n```", "```py\n<script src=\"img/Tone.min.js\"></script>\n<script src=\"img/tf.min.js\"></script>\n<script src=\"img/core.js\"></script>\n<script src=\"img/gansynth.js\"></script>\n```", "```py\n// Get DOM elements\nconst buttonSampleGanSynthNote = document\n    .getElementById(\"button-sample-gansynth-note\");\nconst containerPlots = document\n    .getElementById(\"container-plots\");\n\n// Starts the GANSynth model and initializes it. When finished, enables\n// the button to start the sampling\nasync function startGanSynth() {\n  const ganSynth = new mm.GANSynth(\"https://storage.googleapis.com/\" +\n \"magentadata/js/checkpoints/gansynth/acoustic_only\");\n  await ganSynth.initialize();\n  window.ganSynth = gansynth;\n  buttonSampleGanSynthNote.disabled = false;\n}\n```", "```py\nconst ganSynth = new gansynth.GANSynth(\"https://storage.googleapis.com/\" +\n    \"magentadata/js/checkpoints/gansynth/acoustic_only\");\n```", "```py\n// Plots the spectrogram of the given channel\n// see music/demos/gansynth.ts:28 in magenta.js source code\nasync function plotSpectra(spectra, channel) {\n  const spectraPlot = mm.tf.tidy(() => {\n    // Slice a single example.\n    let spectraPlot = mm.tf.slice(spectra, [0, 0, 0, channel], [1, -1, -1, 1])\n        .reshape([128, 1024]);\n    // Scale to [0, 1].\n    spectraPlot = mm.tf.sub(spectraPlot, mm.tf.min(spectraPlot));\n    spectraPlot = mm.tf.div(spectraPlot, mm.tf.max(spectraPlot));\n    return spectraPlot;\n  });\n  // Plot on canvas.\n  const canvas = document.createElement(\"canvas\");\n  containerPlots.appendChild(canvas);\n  await mm.tf.browser.toPixels(spectraPlot, canvas);\n  spectraPlot.dispose();\n}\n```", "```py\n// Samples a single note of 4 seconds from GANSynth and plays it repeatedly\nasync function sampleGanNote() {\n  const lengthInSeconds = 4.0;\n  const sampleRate = 16000;\n  const length = lengthInSeconds * sampleRate;\n\n  // The sampling returns a spectrogram, convert that to audio in\n  // a tone.js buffer\n  const specgrams = await ganSynth.randomSample(60);\n  const audio = await ganSynth.specgramsToAudio(specgrams);\n  const audioBuffer = mm.Player.tone.context.createBuffer(\n      1, length, sampleRate);\n  audioBuffer.copyToChannel(audio, 0, 0);\n\n  // Play the sample audio using tone.js and loop it\n  const playerOptions = {\"url\": audioBuffer, \"loop\": true, \"volume\": -25};\n  const player = new mm.Player.tone.Player(playerOptions).toMaster();\n  player.start();\n\n  // Plots the resulting spectrograms\n  await plotSpectra(specgrams, 0);\n  await plotSpectra(specgrams, 1);\n}\n```", "```py\nconst player = new Tone.Player(playerOptions).toMaster();\n```", "```py\n// Add on click handler to call the GANSynth sampling\nbuttonSampleGanSynthNote.addEventListener(\"click\", () => {\n  sampleGanNote();\n});\n\n// Calls the initialization of GANSynth\ntry {\n  Promise.all([startGanSynth()]);\n} catch (error) {\n  console.error(error);\n}\n```", "```py\n<html lang=\"en\">\n<body>\n<div>\n  <button disabled id=\"button-sample-musicae-trio\">\n    Sample MusicVAE trio\n </button>\n  <canvas id=\"canvas-musicvae-plot\"></canvas>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/@magenta/music@1.12.0/dist/magentamusic.min.js\"></script>\n<script>\n  // MusicVAE code\n</script>\n</body>\n</html>\n```", "```py\n// Get DOM elements\nconst buttonSampleMusicVaeTrio = document\n    .getElementById(\"button-sample-musicae-trio\");\nconst canvasMusicVaePlot = document\n    .getElementById(\"canvas-musicvae-plot\");\n\n// Starts the MusicVAE model and initializes it. When finished, enables\n// the button to start the sampling\nasync function startMusicVae() {\n  const musicvae = new mm.MusicVAE(\"https://storage.googleapis.com/\" +\n \"magentadata/js/checkpoints/music_vae/trio_4bar\");\n  await musicvae.initialize();\n  window.musicvae = musicvae;\n  buttonSampleMusicVaeTrio.disabled = false;\n}\n```", "```py\n// Declares a new player that have 3 synths for the drum kit (only the\n// bass drum), the bass and the lead.\nclass Player extends mm.BasePlayer {\n\n  bassDrumSynth = new mm.Player.tone.MembraneSynth().toMaster();\n\n  bassSynth = new mm.Player.tone.Synth({\n volume: 5,\n oscillator: {type: \"triangle\"}\n }).toMaster();\n\n  leadSynth = new mm.Player.tone.PolySynth(5).toMaster();\n\n  // Plays the note at the proper time using tone.js\n  playNote(time, note) {\n    let frequency, duration, synth;\n    if (note.isDrum) {\n      if (note.pitch === 35 || note.pitch === 36) {\n        // If this is a bass drum, we use the kick pitch for\n        // an eight note and the bass drum synth\n        frequency = \"C2\";\n        duration = \"8n\";\n        synth = this.bassDrumSynth;\n      }\n    } else {\n      // If this is a bass note or lead note, we convert the\n      // frequency and the duration for tone.js and fetch\n      // the proper synth\n      frequency = new mm.Player.tone.Frequency(note.pitch, \"midi\");\n      duration = note.endTime - note.startTime;\n      if (note.program >= 32 && note.program <= 39) {\n        synth = this.bassSynth;\n      } else {\n        synth = this.leadSynth;\n      }\n    }\n    if (synth) {\n      synth.triggerAttackRelease(frequency, duration, time, 1);\n    }\n  }\n}\n```", "```py\n// Samples a trio of drum kit, bass and lead from MusicVAE and\n// plays it repeatedly at 120 QPM\nasync function sampleMusicVaeTrio() {\n  const samples = await musicvae.sample(1);\n  const sample = samples[0];\n  new mm.PianoRollCanvasVisualizer(sample, canvasMusicVaePlot,\n      {\"pixelsPerTimeStep\": 50});\n\n  const player = new Player();\n  mm.Player.tone.Transport.loop = true;\n  mm.Player.tone.Transport.loopStart = 0;\n  mm.Player.tone.Transport.loopEnd = 8;\n  player.start(sample, 120);\n}\n```", "```py\n// Add on click handler to call the MusicVAE sampling\nbuttonSampleMusicVaeTrio.addEventListener(\"click\", (event) => {\n  sampleMusicVaeTrio();\n  event.target.disabled = true;\n});\n\n// Calls the initialization of MusicVAE\ntry {\n  Promise.all([startMusicVae()]);\n} catch (error) {\n  console.error(error);\n}\n```", "```py\nconst player = new mm.SoundFontPlayer(\"https://storage.googleapis.com/\" +\n    \"magentadata/js/soundfonts/salamander\"));\nplayer.start(sequence, 120)\n```", "```py\n<html lang=\"en\">\n<body>\n<div>\n  <button disabled id=\"button-sample-musicae-trio\">\n    Sample MusicVAE trio\n  </button>\n  <button disabled id=\"button-sample-gansynth-note\">\n    Sample GANSynth note for the lead synth\n  </button>\n  <canvas id=\"canvas-musicvae-plot\"></canvas>\n  <div id=\"container-plots\"></div>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/@magenta/music@1.12.0/dist/magentamusic.min.js\"></script>\n<script>\n  // MusicVAE + GANSynth code\n</script>\n</body>\n</html>\n```", "```py\n// Get DOM elements\nconst buttonSampleGanSynthNote = document\n    .getElementById(\"button-sample-gansynth-note\");\nconst buttonSampleMusicVaeTrio = document\n    .getElementById(\"button-sample-musicae-trio\");\nconst containerPlots = document\n    .getElementById(\"container-plots\");\nconst canvasMusicVaePlot = document\n    .getElementById(\"canvas-musicvae-plot\");\n\n// Starts the MusicVAE model and initializes it. When finished, enables\n// the button to start the sampling\nasync function startMusicVae() {\n  const musicvae = new mm.MusicVAE(\"https://storage.googleapis.com/\" +\n \"magentadata/js/checkpoints/music_vae/trio_4bar\");\n  await musicvae.initialize();\n  window.musicvae = musicvae;\n  buttonSampleMusicVaeTrio.disabled = false;\n}\n\n// Starts the GANSynth model and initializes it\nasync function startGanSynth() {\n  const ganSynth = new mm.GANSynth(\"https://storage.googleapis.com/\" +\n \"magentadata/js/checkpoints/gansynth/acoustic_only\");\n  await ganSynth.initialize();\n  window.ganSynth = ganSynth\n}\n```", "```py\n// Samples a single note of 4 seconds from GANSynth and plays it repeatedly\nasync function sampleGanNote() {\n  const lengthInSeconds = 4.0;\n  const sampleRate = 16000;\n  const length = lengthInSeconds * sampleRate;\n\n  // The sampling returns a spectrogram, convert that to audio in\n  // a tone.js buffer\n  const specgrams = await ganSynth.randomSample(60);\n  const audio = await ganSynth.specgramsToAudio(specgrams);\n  const audioBuffer = mm.Player.tone.context.createBuffer(\n      1, length, sampleRate);\n  audioBuffer.copyToChannel(audio, 0, 0);\n\n  // Plays the sample using tone.js by using C4 as a base note,\n  // since this is what we asked the model for (MIDI pitch 60).\n  // If the sequence contains other notes, the pitch will be\n  // changed automatically\n  const volume = new mm.Player.tone.Volume(-10);\n  const instrument = new mm.Player.tone.Sampler({\"C4\": audioBuffer});\n  instrument.chain(volume, mm.Player.tone.Master);\n  window.player.leadSynth = instrument;\n\n  // Plots the resulting spectrograms\n  await plotSpectra(specgrams, 0);\n  await plotSpectra(specgrams, 1);\n}\n```", "```py\n// Add on click handler to call the MusicVAE sampling\nbuttonSampleMusicVaeTrio.addEventListener(\"click\", (event) => {\n  sampleMusicVaeTrio();\n  event.target.disabled = true;\n  buttonSampleGanSynthNote.disabled = false;\n});\n\n// Add on click handler to call the GANSynth sampling\nbuttonSampleGanSynthNote.addEventListener(\"click\", () => {\n  sampleGanNote();\n});\n\n// Calls the initialization of MusicVAE and GanSynth\ntry {\n  Promise.all([startMusicVae(), startGanSynth()]);\n} catch (error) {\n  console.error(error);\n}\n```", "```py\n  // Starts a new worker that will load the MusicVAE model\n  const worker = new Worker(\"chapter_09_example_05.js\");\n  worker.onmessage = function (event) {\n    const message = event.data[0];\n    if (message === \"initialized\") {\n      // When the worker sends the \"initialized\" message,\n      // we enable the button to sample the model\n      buttonSampleMusicVaeTrio.disabled = false;\n    }\n    if (message === \"sample\") {\n      // When the worked sends the \"sample\" message,\n      // we take the data (the note sequence sample)\n      // from the event, create and start a new player\n      // using the sequence\n const data = event.data[1];\n const sample = data[0];\n      const player = new mm.Player();\n      mm.Player.tone.Transport.loop = true;\n      mm.Player.tone.Transport.loopStart = 0;\n      mm.Player.tone.Transport.loopEnd = 8;\n      player.start(sample, 120);\n    }\n  };\n  // Add click handler to call the MusicVAE sampling,\n  // by posting a message to the web worker which\n  // sample and return the sequence using a message\n  const buttonSampleMusicVaeTrio = document\n      .getElementById(\"button-sample-musicae-trio\");\n  buttonSampleMusicVaeTrio.addEventListener(\"click\", (event) => {\n    worker.postMessage([]);\n    event.target.disabled = true;\n  });\n```", "```py\nimportScripts(\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.4.0/dist/tf.min.js\");\nimportScripts(\"https://cdn.jsdelivr.net/npm/@magenta/music@^1.12.0/es6/core.js\");\nimportScripts(\"https://cdn.jsdelivr.net/npm/@magenta/music@^1.12.0/es6/music_vae.js\");\n\nasync function initialize() {\n  musicvae = new music_vae.MusicVAE(\"https://storage.googleapis.com/\" +\n      \"magentadata/js/checkpoints/music_vae/trio_4bar\");\n  await musicvae.initialize();\n  postMessage([\"initialized\"]);\n}\n\nonmessage = function (event) {\n  Promise.all([musicvae.sample(1)])\n      .then(samples => postMessage([\"sample\", samples[0]]));\n};\n\ntry {\n  Promise.all([initialize()]);\n} catch (error) {\n  console.error(error);\n}\n```", "```py\n<label for=\"select-midi-output\">Select MIDI output:</label>\n<select disabled id=\"select-midi-output\">\n</select>\n```", "```py\n// Starts a MIDI player, and for each available MIDI outputs,\n// adds an option to the select drop down.\nconst player = new mm.MIDIPlayer();\nplayer.requestMIDIAccess()\n    .then((outputs) => {\n        if (outputs && outputs.length) {\n            const option = document.createElement(\"option\");\n            selectMidiOutput.appendChild(option);\n            outputs.forEach(output => {\n                const option = document.createElement(\"option\");\n                option.innerHTML = output.name;\n                selectMidiOutput.appendChild(option);\n            });\n            selectMidiOutput.disabled = false;\n        } else {\n            selectMidiOutput.disabled = true;\n        }\n    });\nwindow.player = player;\n```", "```py\n// Gets the selected MIDI output (if any) and uses the\n// output in the MIDI player\nconst midiOutputIndex = selectMidiOutput.selectedIndex;\nif (midiOutputIndex) {\n    player.outputs = [player.availableOutputs[midiOutputIndex - 1]];\n    mm.Player.tone.Transport.loop = true;\n    mm.Player.tone.Transport.loopStart = 0;\n    mm.Player.tone.Transport.loopEnd = 8;\n    player.start(sample, 120);\n}\nselectMidiOutput.disabled = true;\n```", "```py\nnpm install --save @magenta/music\n```", "```py\nconst music_vae = require(\"@magenta/music/node/music_vae\");\n\n// These hacks below are needed because the library uses performance\n// and fetch which exist in browsers but not in node.\nconst globalAny = global;\nglobalAny.performance = Date;\nglobalAny.fetch = require(\"node-fetch\");\n\nconst model = new music_vae.MusicVAE(\n    \"https://storage.googleapis.com/magentadata/js/checkpoints/\" +\n    \"music_vae/drums_2bar_lokl_small\");\nmodel\n    .initialize()\n    .then(() => model.sample(1))\n    .then(samples => {\n        console.log(samples[0])\n   });\n```", "```py\nnode PATH_TO_JAVASCRIPT_FILE\n```", "```py\nThis browser does not support Tone.js\nHi there. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n```"]