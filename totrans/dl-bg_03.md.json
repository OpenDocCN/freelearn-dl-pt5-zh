["```py\n%tensorflow_version 2.x\n!pip install tensorflow\n```", "```py\nimport tensorflow as tf\nprint(tf.__version__)\n```", "```py\n2.1.0\n```", "```py\n!pip install tensorflow==2.1.0\n```", "```py\n$ pip install tensorflow-gpu\n```", "```py\n!pip install keras\n```", "```py\nimport keras\nprint(keras.__version__)\n```", "```py\nUsing TensorFlow backend.\n2.2.4\n```", "```py\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\nmodel = Sequential([\n    Dense(10, input_shape=(10,)),\n    Activation('relu'),\n    Dense(8),\n    Activation('relu'),\n    Dense(4),\n    Activation('softmax'),\n])\n```", "```py\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\nmodel = Sequential()\nmodel.add(Dense(10, input_dim=10))\nmodel.add(Activation('relu'))\nmodel.add(Dense(8))\nmodel.add(Activation('relu'))\nmodel.add(Dense(4))\nmodel.add(Activation('softmax'))\n```", "```py\nfrom keras.layers import Input, Dense\nfrom keras.models import Model\n\ninputs = Input(shape=(10,))\n\nx = Dense(10, activation='relu')(inputs)\nx = Dense(8, activation='relu')(x)\ny = Dense(4, activation='softmax')(x)\n\nmodel = Model(inputs=inputs, outputs=y)\n```", "```py\nimport torch\n\ndevice = torch.device('cpu')\n\nmodel = torch.nn.Sequential(\n          torch.nn.Linear(10, 10),\n          torch.nn.ReLU(),\n          torch.nn.Linear(10, 8),\n          torch.nn.ReLU(),\n          torch.nn.Linear(8, 2),\n          torch.nn.Softmax(2)\n        ).to(device)\n```", "```py\n!pip install dopamine-rl\n```", "```py\nimport dopamine\n```"]