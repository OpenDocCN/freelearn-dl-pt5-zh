["```py\nlibrary(mxnet)\nlibrary(tidyverse)\nlibrary(caret)\n```", "```py\ntrain <- read.csv(\"adult_processed_train.csv\")\ntrain <- train %>% mutate(dataset = \"train\")\ntest <- read.csv(\"adult_processed_test.csv\")\ntest <- test %>% mutate(dataset = \"test\")\n```", "```py\nall <- rbind(train,test)\n\nall <- all[complete.cases(all),]\n```", "```py\nunique(all$sex)\n\nall <- all %>%\n  mutate_if(~is.factor(.),~trimws(.))\n```", "```py\ntrain <- all %>% filter(dataset == \"train\")\ntrain_target <- as.numeric(factor(train$target))\ntrain <- train %>% select(-target, -dataset)\n```", "```py\ntrain_chars <- train %>%\n  select_if(is.character)\n\ntrain_ints <- train %>%\n select_if(is.integer)\n```", "```py\nohe <- caret::dummyVars(\" ~ .\", data = train_chars)\ntrain_ohe <- data.frame(predict(ohe, newdata = train_chars))\n```", "```py\ntrain <- cbind(train_ints,train_ohe)\n```", "```py\ntrain <- train %>% mutate_all(funs(scales::rescale(.) %>% as.vector))\n```", "```py\ntest <- all %>% filter(dataset == \"test\")\ntest_target <- as.numeric(factor(test$target))\ntest <- test %>% select(-target, -dataset)\n\ntest_chars <- test %>%\n  select_if(is.character)\n\ntest_ints <- test %>%\n  select_if(is.integer)\n\nohe <- caret::dummyVars(\" ~ .\", data = test_chars)\ntest_ohe <- data.frame(predict(ohe, newdata = test_chars))\n\ntest <- cbind(test_ints,test_ohe)\n\ntest <- test %>% mutate_all(funs(scales::rescale(.) %>% as.vector))\n```", "```py\nsetdiff(names(train), names(test))\n\ntrain <- train %>% select(-native.countryHoland.Netherlands)\n```", "```py\ntrain_target <- train_target-1\ntest_target <- test_target-1\n```", "```py\nlength(train)*.66\n```", "```py\npossible_node_values <- c(50,60,70,80,90)\n```", "```py\nmx.set.seed(0)\n```", "```py\nmodel <- mx.mlp(data.matrix(train), train_target, hidden_node=70,out_node=2, out_activation=\"softmax\",num.round=10, array.batch.size=32, learning.rate=0.1, momentum=0.8, eval.metric=mx.metric.accuracy)\n```", "```py\n preds = predict(model, data.matrix(test))\n\n pred.label = max.col(t(preds))-1\n\n acc = sum(pred.label == test_target)/length(test_target)\n\n vals <- tibble(\n nodes = 70,\n accuracy = acc\n )\n\nvals\n```", "```py\nmlp_loop <- function(x) {\n  model <- mx.mlp(data.matrix(train), train_target, hidden_node=x, out_node=2, out_activation=\"softmax\",\nnum.round=10, array.batch.size=32, learning.rate=0.1, momentum=0.8,eval.metric=mx.metric.accuracy)\n\n  preds = predict(model, data.matrix(test))\n\n  pred.label = max.col(t(preds))-1\n\n  acc = sum(pred.label == test_target)/length(test_target)\n\n  vals <- tibble(\n    nodes = x,\n    accuracy = acc\n  )\n}\n```", "```py\nresults <- mlp_loop(70)\n\nresults\n\nall.equal(results$accuracy,acc)\n```", "```py\nresults <- map_df(possible_node_values, mlp_loop)\n\nresults\n```", "```py\ndata <- mx.symbol.Variable(\"data\")\nfc1 <- mx.symbol.FullyConnected(data, num_hidden=90)\nfc2 <- mx.symbol.FullyConnected(fc1, num_hidden=50)\nsmx <- mx.symbol.SoftmaxOutput(fc2)\n\nmodel <- mx.model.FeedForward.create(smx, data.matrix(train), train_target,num.round=10, array.batch.size=32,\nlearning.rate=0.1, momentum=0.8, eval.metric=mx.metric.accuracy)\n\npreds = predict(model, data.matrix(test))\n\npred.label = max.col(t(preds))-1\n\nacc = sum(pred.label == test_target)/length(test_target)\n\nacc\n```", "```py\nmodel <- mx.mlp(data.matrix(train), train_target, hidden_node=90, out_node=2, out_activation=\"softmax\",num.round=200, array.batch.size=32, learning.rate=0.005, momentum=0.8,eval.metric=mx.metric.accuracy)\n\npreds = predict(model, data.matrix(test))\n\npred.label = max.col(t(preds))-1\n\nacc = sum(pred.label == test_target)/length(test_target)\n\nacc\n```"]