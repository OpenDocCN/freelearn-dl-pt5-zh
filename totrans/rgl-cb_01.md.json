["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nnp.random.seed(42)\ndef plot_data(surface: np.array, price: np.array,\n    fit: np.array = None, legend: bool = False):\n    plt.scatter(surface, price, label='data')\n    if fit is not None:\n        plt.plot(surface, fit, label='fit')\n    if legend:\n        plt.legend()\n    plt.ylim(11300, 11550)\n    plt.xlabel('Surface (m$^{2}$)')\n    plt.ylabel('Price (€/m$^{2}$)')\n    plt.grid(True)\n    plt.show()\n```", "```py\n# Define the surfaces and prices\nsurface = np.array([15, 17, 20, 22, 25, 28]).reshape(-1, 1)\nprice = 12000 - surface*50 + np.square(\n    surface) + np.random.normal(0, 30, surface.shape)\n# Plot the data\nplot_data(surface, price)\n```", "```py\n# Perform a linear regression on the data\nlr = LinearRegression()\nlr.fit(surface, price)\n# Compute prediction\ny_pred = lr.predict(surface)\n# Plot data\nplot_data(surface, price, y_pred, True)\n```", "```py\n# Generate data\nupdated_surface = np.array([15, 17, 20, 22, 25, 28, 30, 33,\n    35, 37]).reshape(-1, 1)\nupdated_price = 12000 - updated_surface*50 + np.square(\n    updated_surface) + np.random.normal(0, 30, updated_surface.shape)\n# Plot data\nplot_data(updated_surface, updated_price)\n```", "```py\n# Perform linear regression and plot result\nlr = LinearRegression()\nlr.fit(updated_surface, updated_price)\ny_pred_updated = lr.predict(updated_surface)\nplot_data(updated_surface, updated_price, y_pred_updated, True)\n```", "```py\n# Compute power up to 15\nx_power15 = np.concatenate([np.power(\n    updated_surface, i+1) for i in range(15)], 1)\n# Perform linear regression and plot result\nlr = LinearRegression()\nlr.fit(x_power15, updated_price)\ny_pred_power15 = lr.predict(x_power15)\nplot_data(updated_surface, updated_price, y_pred_power15, True)\n```", "```py\n# Compute power up to 2\nx_power2 = np.concatenate([np.power(\n    updated_surface, i+1) for i in range(2)], 1)\n# Perform linear regression and plot result\nlr = LinearRegression()\nlr.fit(x_power2, updated_price)\ny_pred_power2 = lr.predict(x_power2)\nplot_data(updated_surface, updated_price, y_pred_power2, True)\n```"]