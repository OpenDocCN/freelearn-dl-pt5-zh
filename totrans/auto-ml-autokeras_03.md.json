["```py\n$ apt-get install python3-pip jupyter-notebook\n```", "```py\n    $ apt-get install python3-pip jupyter-notebook\n    ```", "```py\n    $ jupyter-notebook\n    ```", "```py\n    $ docker pull haifengjin/autokeras:latest\n    ```", "```py\n     $ docker run -it --shm-size 2G  haifengjin /autokeras /bin/bash.\n    ```", "```py\n$ docker run -it -v hostDir:/app --shm-size 2G  haifengjin /autokeras python file.py. \n```", "```py\nimport autokeras as ak\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\n```", "```py\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nprint(x_train.shape)\nprint(x_test.shape)\n```", "```py\nDownloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n11493376/11490434 [==============================] - 0s 0us/step\n(60000, 28, 28)\n(10000, 28, 28)\n```", "```py\n%matplotlib inline\nfig = plt.figure()\nax = fig.add_subplot(1, 2, 1)\nplt.imshow(x_train[1234])\nax.set_title('Train sample')\nax = fig.add_subplot(1, 2, 2)\nplt.imshow(x_test[1234])\nax.set_title('Test sample')\nplt.show()\n```", "```py\ntrain_histogram = np.histogram(y_train)\ntest_histogram = np.histogram(y_test)\n_, axs = plt.subplots(1, 2)\naxs[0].set_xticks(range(10))\naxs[0].bar(range(10), train_histogram[0])\naxs[1].set_xticks(range(10))\naxs[1].bar(range(10), test_histogram[0])\nplt.show()\n```", "```py\nclf = ak.ImageClassifier(max_trials=1)\n```", "```py\nclf.fit(x_train, y_train, epochs=10)\n```", "```py\nmetrics = clf.evaluate(x_test, y_test)\nprint(metrics)\n```", "```py\n313/313 [==============================] - 1s 4ms/step - loss: 0.0354 - accuracy: 0.9889\n[0.03537507727742195, 0.9889000058174133]\n```", "```py\nplt.imshow(x_test[1234])\nplt.title('Test sample of number: %s' % y_test[1234])\nplt.show()\n```", "```py\nprint(clf.predict(x_test[1234, None]))\n```", "```py\n[['8']]\n```", "```py\nmodel = clf.export_model()\nmodel.summary()\n```", "```py\ninput_1 (InputLayer)         [(None, 28, 28)]        0       \n```", "```py\ntf_op_layer_Cast (TensorFlow (None, 28, 28)          0      \n____________________________________________________________\ntf_op_layer_ExpandDims (Tens (None, 28, 28, 1)       0      \n_____________________________________________________________\nnormalization (Normalization (None, 28, 28, 1)       3       \n```", "```py\nconv2d (Conv2D)              (None, 26, 26, 32)      320     \n_____________________________________________________________\nconv2d_1 (Conv2D)            (None, 24, 24, 64)      18496   \n_____________________________________________________________\nmax_pooling2d (MaxPooling2D) (None, 12, 12, 64)      0       \n```", "```py\ndropout (Dropout)            (None, 12, 12, 64)      0      \n____________________________________________________________\nflatten (Flatten)            (None, 9216)            0       \n____________________________________________________________\ndropout_1 (Dropout)          (None, 9216)            0       \n```", "```py\ndense (Dense)                (None, 10)              92170   \n```", "```py\nclassification_head_1 (Softm (None, 10)              0  \n```", "```py\nfrom tensorflow.keras.utils import plot_model\nplot_model(clf.export_model())\n```", "```py\nreg = ak.ImageRegressor(\noverwrite=True,\nmax_trials=1)\n```", "```py\nreg.fit(x_train, y_train, epochs=20)\n```", "```py\nreg.evaluate(x_test, y_test)\n```", "```py\npredicted_y = reg.predict(x_test[:10])\nprint(list(y_test[:10]))\nprint([round(float(i)) for i in predicted_y])\n```", "```py\n[7, 2, 1, 0, 4, 1, 4, 8, 5, 9]\n[7, 2, 1, 0, 4, 1, 4, 8, 5, 9]\n```", "```py\nfig = plt.figure()\nfor i, v in enumerate(predicted_y):\n    ax = fig.add_subplot(2, 5, i+1)\n    ax.set_axis_off()\n    ax.set_title(round(float(v)))\n    plt.imshow(x_test[i])\nplt.show()\n```", "```py\nmodel = clf.export_model()\nmodel.summary()\n```", "```py\nfrom tensorflow.keras.utils import plot_model\nplot_model(clf.export_model())\n```"]