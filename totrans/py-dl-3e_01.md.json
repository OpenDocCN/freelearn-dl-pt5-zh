["```py\nInitialize the vector w with some random values\nrepeat:\n  E = 0 # initialize the cost function E with 0\n  for every pair  of the training set:\n       # here  is the real house price\n   # Mean Square Error\n  use gradient descent to update the weights w based on MSE until MSE falls below threshold\n```", "```py\nInitialize the Q table with some arbitrary value\nfor each episode:\n     Observe the initial state s\n     for each step of the episode:\n          Select new action a using Q-table based policy\n          Observe reward r and go to the new state s'\n          Use Bellman eq to update q(s, a) in the Q-table\n     until we reach a terminal state for the episode\n```", "```py\n    import pandas as pd\n    dataset = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data', names=['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species'])\n    dataset['species'] = pd.Categorical(dataset['species']).codes\n    dataset = dataset.sample(frac=1, random_state=1234)\n    train_input = dataset.values[:120, :4]\n    train_target = dataset.values[:120, 4]\n    test_input = dataset.values[120:, :4]\n    test_target = dataset.values[120:, 4]\n    ```", "```py\n    import torch\n    torch.manual_seed(1234)\n    hidden_units = 5\n    net = torch.nn.Sequential(\n        torch.nn.Linear(4, hidden_units),\n        torch.nn.ReLU(),\n        torch.nn.Linear(hidden_units, 3)\n    )\n    ```", "```py\n    criterion = torch.nn.CrossEntropyLoss()\n    ```", "```py\n    optimizer = torch.optim.SGD(net.parameters(), lr=0.1,\n              momentum=0.9)\n    ```", "```py\n    epochs = 50\n    for epoch in range(epochs):\n        inputs = torch.autograd.Variable(\n            torch.Tensor(train_input).float())\n        targets = torch.autograd.Variable(\n            torch.Tensor(train_target).long())\n        optimizer.zero_grad()\n        out = net(inputs)\n        loss = criterion(out, targets)\n        loss.backward()\n        optimizer.step()\n        if epoch == 0 or (epoch + 1) % 10 == 0:\n            print('Epoch %d Loss: %.4f' % (epoch + 1,\n            loss.item()))\n    ```", "```py\n    Epoch 1 Loss: 1.2181\n    Epoch 10 Loss: 0.6745\n    Epoch 20 Loss: 0.2447\n    Epoch 30 Loss: 0.1397\n    Epoch 40 Loss: 0.1001\n    Epoch 50 Loss: 0.0855\n    ```", "```py\n    import numpy as np\n    inputs = torch.autograd.Variable(torch.Tensor(test_input).float())\n    targets = torch.autograd.Variable(torch.Tensor(test_target).long())\n    optimizer.zero_grad()\n    out = net(inputs)\n    _, predicted = torch.max(out.data, 1)\n    error_count = test_target.size - np.count_nonzero((targets == predicted).numpy())\n    print('Errors: %d; Accuracy: %d%%' % (error_count, 100 * torch.sum(targets == predicted) / test_target.size))\n    ```", "```py\n    Errors: 0; Accuracy: 100%\n    ```"]