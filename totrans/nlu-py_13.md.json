["```py\n    raw_train_ds = tf.keras.utils.text_dataset_from_directory(\n    ```", "```py\n         'aclImdb/train',\n    ```", "```py\n         batch_size=batch_size,\n    ```", "```py\n         validation_split=0.2,\n    ```", "```py\n         subset='training',\n    ```", "```py\n         seed=seed)\n    ```", "```py\nmetrics = [tf.metrics.Precision(),tf.metrics.Recall(),tf.metrics.BinaryAccuracy()]\n```", "```py\nhistory_dict = history.history\nprint(history_dict.keys())\nacc = history_dict['binary_accuracy']\nprecision = history_dict['precision_1']\nval_acc = history_dict['val_binary_accuracy']\nloss = history_dict['loss']\nval_recall = history_dict['val_recall_1']\nrecall = history_dict['recall_1']\nval_loss = history_dict['val_loss']\nval_precision = history_dict['val_precision_1']\nprecision = history_dict['precision_1']\nval_recall = history_dict['val_recall_1']\n```", "```py\nepochs = range(1, len(acc) + 1)\nfig = plt.figure(figsize=(10, 6))\nfig.tight_layout()\nplt.subplot(4, 1, 1)\n# r is for \"solid red line\"\nplt.plot(epochs, loss, 'r', label='Training loss')\n# b is for \"solid blue line\"\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\n# plt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\n```", "```py\n# Displaying the confusion matrix\n%matplotlib inline\nfrom sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay,f1_score,classification_report\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'font.size': 12})\ndisp = ConfusionMatrixDisplay(confusion_matrix = conf_matrix,\n                                             display_labels = class_names)\nprint(class_names)\ndisp.plot(xticks_rotation=75,cmap=plt.cm.Blues)\nplt.show()\n```", "```py\nprint(classification_report(y_test, y_pred, target_names=class_names))\n['neg', 'pos']\n```", "```py\n                precision   recall      f1-score  support\nneg             0.82        0.80        0.81      12501\npos             0.80        0.82        0.81      12500\naccuracy                                0.81      25001\nmacro avg       0.81        0.81        0.81      25001\nweighted avg    0.81        0.81        0.81      25001\n```", "```py\n# View the results as a confusion matrix\nfrom sklearn.metrics import confusion_matrix\nconf_matrix = confusion_matrix(labels_test, labels_pred,normalize=None)\nprint(conf_matrix)\n[[9330 3171]\n [3444 9056]]\n```", "```py\n# Displaying the confusion matrix\nfrom sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay,f1_score,classification_report\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'font.size': 12})\ndisp = ConfusionMatrixDisplay(confusion_matrix = conf_matrix, display_labels = class_names)\nprint(class_names)\ndisp.plot(xticks_rotation=75,cmap=plt.cm.Blues)\nplt.show()\n```", "```py\nprint(classification_report(labels_test, labels_pred, target_names=class_names))\n```", "```py\n             precision     recall     f1-score    support\nneg             0.73        0.75        0.74      12501\npos             0.74        0.72        0.73      12500\naccuracy                                0.74      25001\nmacro avg       0.74        0.74        0.74      25001\nweighted avg    0.74        0.74        0.74      25001\n```", "```py\nbert_model_name = 'small_bert/bert_en_uncased_L-4_H-512_A-8'\nmap_name_to_handle = {\n     'small_bert/bert_en_uncased_L-4_H-512_A-8' :\n           'https://tfhub.dev/tensorflow/small_bert/bert_en_uncased_L-4_H-512_A-8/1',\n}\nmap_model_to_preprocess = {\n      'small_bert/bert_en_uncased_L-4_H-512_A-8':\n           'https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3',\n}\n```", "```py\n            precision   recall      f1-score    support\nneg           0.86        0.85        0.85      12501\npos           0.85        0.86        0.86      12500\naccuracy                              0.85      25001\nmacro avg     0.85        0.85        0.85      25001\nweighted avg  0.85        0.85        0.85      25001\n```"]