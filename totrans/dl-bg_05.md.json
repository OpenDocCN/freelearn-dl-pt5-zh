["```py\nif classifierSummer says is Summer: you are done\nelse:\n if classifierFall says is Fall: you are done\n else:\n   if classifierWinter says is Winter: you are done\n   else:\n     it must be Spring and, thus, you are done\n```", "```py\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y, y_pred)\nprint(cm)\n```", "```py\n[[25 0 0 0]\n [ 0 23 1 1]\n [ 1 0 22 1]\n [ 0 1 1 24]]\n```", "```py\nBER = []\nfor i in range(len(cm)):\n BER.append(cm[i,i]/sum(cm[i,:]))\nprint('BER:', 1 - sum(BER)/len(BER))\n```", "```py\nBER: 0.06006410256410266\n```", "```py\nfrom sklearn.metrics import balanced_accuracy_score\nprint('BER', 1- balanced_accuracy_score(y, y_pred))\n```", "```py\nBER: 0.06006410256410266\n```", "```py\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\nr2 = r2_score(y,y_pred)\nmae = mean_absolute_error(y,y_pred)\nmse = mean_squared_error(y,y_pred)\n\nprint('R_2 score:', r2)\nprint('MAE:', mae)\nprint('MSE:', mse)\n```", "```py\nR_2 score: 0.9350586211501963\nMAE: 0.1259473720654865\nMSE: 0.022262066145814736\n```", "```py\nimport numpy as np\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import KFold\n\n# These will be used to save the performance at each split\ncv_r2 = []\ncv_mae = []\ncv_mse = []\n\n# Change this for more splits\nkf = KFold(n_splits=3)\nk = 0\n\n# Assuming we have pre-loaded training data X and targets y\nfor S_D, S_V in kf.split(X):\n  X_train, X_test = X[S_D], X[S_V]\n  y_train, y_test = y[S_D], y[S_V]\n\n  # Train your model here with X_train and y_train and...\n  # ... test your model on X_test saving the output on y_pred\n\n  r2 = r2_score(y_test,y_pred)\n  mae = mean_absolute_error(y_test,y_pred)\n  mse = mean_squared_error(y_test,y_pred)\n\n  cv_r2.append(r2)\n  cv_mae.append(mae)\n  cv_mse.append(mse)\n\nprint(\"R_2: {0:.6}  Std: {1:0.5}\".format(np.mean(cv_r2),np.std(cv_r2)))\nprint(\"MAE: {0:.6}  Std: {1:0.5}\".format(np.mean(cv_mae),np.std(cv_mae)))\nprint(\"MSE: {0:.6}  Std: {1:0.5}\".format(np.mean(cv_mse),np.std(cv_mse)))\n```", "```py\nR_2: 0.935006  Std: 0.054835\nMAE: 0.106212  Std: 0.042851\nMSE: 0.0184534  Std: 0.014333\n```"]