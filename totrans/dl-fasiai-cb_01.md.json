["```py\n    mkdir fastai_cookbook\n    ```", "```py\n    cd fastai_cookbook\n    ```", "```py\n    git init\n    ```", "```py\n    git clone https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook.git\n    ```", "```py\n    print(\"hello world\")\n    ```", "```py\n    from google.colab import drive\n    drive.mount('/content/drive')\n    ```", "```py\n    %cd /content/drive/MyDrive/fastai_cookbook\n    ```", "```py\n    %ls\n    ```", "```py\n    !git clone https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook.git \n    ```", "```py\n    pip install jupyterlab\n    ```", "```py\n    !pip install -Uqq fastbook\n    import fastbook\n    from fastbook import *\n    from fastai.vision.all import *\n    ```", "```py\n    fastbook.setup_book()\n    ```", "```py\n    path = untar_data(URLs.MNIST)\n    ```", "```py\n    dls = ImageDataLoaders.from_folder(path, train='training', valid='testing')\n    ```", "```py\n    learn.fit_one_cycle(1, 0.1)\n    ```", "```py\n    learn.summary()\n    ```", "```py\n    import torch\n    ```", "```py\n    import tensorflow as tf\n    import pydotplus\n    from tensorflow.keras.utils import plot_model\n    ```", "```py\n    import fastbook\n    from fastbook import *\n    from fastai.vision.all import *\n    ```", "```py\n    mnist = tf.keras.datasets.mnist\n    (x_train, y_train), (x_test, y_test) = mnist.load_data()\n    x_train, x_test = x_train / 255.0, x_test / 255.0\n    ```", "```py\n    fastbook.setup_book()\n    path = untar_data(URLs.MNIST)\n    dls = ImageDataLoaders.from_folder(path, train='training', valid='testing')\n    ```", "```py\n    # define layers for the hello world model\n    hello_world_model = tf.keras.models.Sequential([ \n            tf.keras.layers.Flatten(input_shape=(28, 28)), \n            tf.keras.layers.Dense(128, activation='relu'), \n            tf.keras.layers.Dropout(0.15), \n            tf.keras.layers.Dense(10) \n    ])\n    # compile the hello world model, including specifying the \n    loss # function, optimizer, and metrics\n    hello_world_model.compile(optimizer='adam',                                                    \n    sloss=tf.keras.losses.SparseCategoricalCrossentropy(from\n    _logits=True), metrics=['accuracy'])\n    ```", "```py\n    learn = cnn_learner(dls, resnet18, pretrained=False,                                                                            \n    sloss_func=LabelSmoothingCrossEntropy(), metrics=accuracy)\n    ```", "```py\n    history = hello_world_model.fit(x_train, y_train,\n                                               batch_size=64,\n                                               epochs=10,\n                                               validation\n    _split=0.15)\n    ```", "```py\n    learn.fit_one_cycle(1, 0.1)\n    ```", "```py\n    Loss for test dataset: 0.07588852692145155\n    Accuracy for test dataset: 0.9775\n    ```", "```py\n    dls = ImageDataLoaders.from_folder(path, train='training', valid='testing')\n    ```", "```py\n    img_files = get_image_files(path/\"testing\")\n    ```", "```py\n    img = PILImage.create(img_files[7000])\n    img = PILImage.create(img_files[2030])\n    img = PILImage.create(img_files[5800])\n    ```"]