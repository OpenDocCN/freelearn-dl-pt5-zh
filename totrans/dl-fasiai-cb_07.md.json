["```py\npython –version\n```", "```py\n    pip3 install torch==1.8.1+cpu torchvision==0.9.1+cpu torchaudio===0.8.1 -f https://download.pytorch.org/whl/torch_stable.html\n    ```", "```py\n    import fastai\n    fastai.__version__\n    ```", "```py\nlearn = load_learner('/storage/data/adult_sample/adult_sample_model.pkl')\n```", "```py\ntest_sample = df_test.iloc[0]\nlearn.predict(test_sample)\n```", "```py\n    localhost:5000, as shown in the following screenshot:![Figure 7.3 – Output when the Flask server starts\n    ](img/B16216_7_3.jpg)Figure 7.3 – Output when the Flask server starts\n    ```", "```py\n    home.html web page will be loaded in the browser, as shown in *Figure 7.4*:![Figure 7.4 – home.html being server by the Flask server\n    ](img/B16216_7_4.jpg)Figure 7.4 – home.html being server by the Flask server\n    ```", "```py\npath = Path(os.getcwd())\nfull_path = os.path.join(path,'adult_sample_model.pkl')\nlearner = load_learner(full_path)\n```", "```py\n@app.route('/')\ndef home():   \n    title_text = \"fastai deployment\"\n    title = {'titlename':title_text}\n    return render_template('home.html',title=title)  \n```", "```py\n<body onload=\"load_selections()\">\n```", "```py\nvar relationship_list = [\" Wife\" ,\" Not-in-family\" ,\" Unmarried\" ,\" Husband\" ,\" Own-child\" ,\" Other-relative\" ];\n```", "```py\nfor(var i = 0; i < relationship_list.length; i++) {\n      var opt = relationship_list[i];\n      select_relationship.innerHTML += \"<option value=\\\"\" + opt + \"\\\">\" + opt + \"</option>\";\n```", "```py\ndocument.getElementById(\"age\").defaultValue = 40;\n```", "```py\n<button>\n<a onclick=\"link_with_args();\" style=\"font-size : 20px; width: 100%; height: 100px;\">Get prediction</a>\n</button>\n```", "```py\nprefix = \"/show-prediction/?\"\nwindow.output = prefix.concat(\"workclass=\",workclass_string,\"&age=\",age_value,\"&fnlwgt=\",fnlwgt_value,\"&education=\",education_string,\"&education-num=\",education_num_value,\"&marital-status=\",marital_status_string,\"&occupation=\",occupation_string,\"&relationship=\",relationship_string,\"&race=\",race_string,\"&sex=\",sex_string,\"&capital-gain=\",capital_gain_value,\"&capital-loss=\",capital_loss_value,\"&hours-per-week=\",hours_per_week_value,\"&native-country=\",native_country_string);\ndocument.querySelector('.output').textContent = window.output;\n```", "```py\nwindow.location.href = window.output;\n```", "```py\n@app.route('/show-prediction/')\ndef show_prediction():\n     score_df = pd.DataFrame(columns=scoring_columns)\nfor col in scoring_columns:\n        print(\"value for \"+col+\" is: \"+str(request.args.get(col)))    \n        score_df.at[0,col] = request.args.get(col)\n```", "```py\npred_class,pred_idx,outputs = learner.predict(score_df.iloc[0])\nif outputs[0] >= outputs[1]:\n        predict_string = \"Prediction is: individual has income less than 50k\"\n    else:\n        predict_string = \"Prediction is: individual has income greater than 50k\"\n    prediction = {'prediction_key':predict_string}\n    return(render_template('show-prediction.html',prediction=prediction))\n```", "```py\n<div class=\"home\">\n  <h1 style=\"color: green\"> \n    Here is the prediction for the individual's income:\n  </h1> \n  <h1 style=\"color: green\"> \n    {{ prediction.prediction_key }}\n  </h1>\n```", "```py\n    localhost:5000, as shown in *Figure 7.10*:![Figure 7.10 – Output when the Flask server starts\n    ](img/B16216_7_10.jpg)Figure 7.10 – Output when the Flask server starts\n    ```", "```py\n    home.html will be loaded in the browser, as shown in *Figure 7.11*:![Figure 7.11 – home.html for the image model deployment being served by the Flask server\n    ](img/B16216_7_11.jpg)Figure 7.11 – home.html for the image model deployment being served by the Flask server\n    ```", "```py\n      <label for=\"image_field\">Please choose an image:</label>\n      <input type=\"file\"\n           id=\"image_field\" name=\"image_field\"\n           accept=\"image/png, image/jpeg\">  \n    ```", "```py\n    function getOption() { \n          var file_value = [];\n          const input = document.querySelector('input');\n          const curFiles = input.files;\n          if(curFiles.length === 0) {\n            console.log(\"file list empty\");\n\n          } else {\n          for(const file of curFiles) {\n            file_value.push(file.name);\n            }\n          }\n          prefix = \"/show-prediction/?\"\n          window.output = prefix.concat(\"file_name=\",file_value[0])\n        }\n    ```", "```py\n    @app.route('/show-prediction/')\n    def show_prediction():\n        image_file_name = request.args.get(\"file_name\")\n        full_path = os.path.join(path,image_directory,image_file_name)\n        img = PILImage.create(full_path)\n        pred_class, ti1, ti2 = learner.predict(img)\n        predict_string = \"Predicted object is: \"+pred_class\n        prediction = {'prediction_key':predict_string}\n        return(render_template('show-prediction.html',prediction=prediction))\n    ```", "```py\n    cp /storage/data/adult_sample/adult.csv /notebooks/temp/adult.csv\n    ```", "```py\n    var workclass_list = [\" Private\" ,\" Self-emp-inc\" ,\" Self-emp-not-inc\" ,\" State-gov\" ,\" Federal-gov\" ,\" Local-gov\" ];\n    var relationship_list = [\" Wife\" ,\" Not-in-family\" ,\" Unmarried\" ,\" Husband\" ,\" Own-child\" ,\" Other-relative\" ];\n    var native_country_list = [\" United-States\",\" Puerto-Rico\",\" Mexico\",\" Canada\",\" Taiwan\",\" Vietnam\",\" Philippines\"];\n    ```", "```py\n    full_path = os.path.join(path, 'adult_sample_model_new.pkl')\n    ```", "```py\n    var native_country_list = [\" United-States\",\" Puerto-Rico\",\" Mexico\",\" Canada\",\" Taiwan\",\" Vietnam\",\" Philippines\", \"  United-Kingdom\"  ];\n    ```", "```py\n    <p> \n      <label for=\"years-in-job\">years in job (0 - 45):</label>\n      <input type=\"number\" id=\"years-in-job\" name=\"years-in-job\"  min=\"0\" max=\"45\">\n      </p>\n    ```", "```py\n    document.getElementById(\"years-in-job\").defaultValue = 5;\n    ```", "```py\n    years_in_job_value = document.getElementById(\"years-in-job \").value;\n    ```", "```py\n    ,\"&years-in-job=\",years_in_job_value\n    ```", "```py\n      <p>\n        Select work location:\n        <select id=\"work-location\">\n        </select>\n      </p>\n    ```", "```py\n    var select_work_location = document.getElementById(\"work-location\");\n    var work_location_list = [\" remote\",\" on-site\",\" mixed\"];\n    for(var i = 0; i < work_location_list.length; i++) {\n          var opt = work_location_list[i];\n          select_work_location.innerHTML += \"<option value=\\\"\" + opt + \"\\\">\" + opt + \"</option>\";\n        }\n    ```", "```py\n    selectElementworklocation = \\\n    document.querySelector('#work-location'); \n    work_location_string =\\\n    selectElementworklocation.options[selectElementworklocation.selectedIndex].value\n    ```", "```py\n    ,\"&work-location=\",work_location_string\n    ```", "```py\ncp -r deploy_image deploy_image_test\n```", "```py\n      <input type=\"file\" multiple\n           id=\"image_field\" name=\"image_field\"\n           accept=\"image/png, image/jpeg\">\n    ```", "```py\n    function getOption() { \n         var file_value = [];\n      var file_count = 0;\n      const input = document.querySelector('input');\n      var file_path = input.value;\n      const curFiles = input.files;\n      if(curFiles.length === 0) {\n        console.log(\"file list empty\");\n       } else {\n      for(const file of curFiles) {\n        if (file_count == 0) {\n          file_count = 1;\n          file_list_prefix = \"&file_name=\";\n          var file_list = file_list_prefix.concat(file.name);\n        } else {\n          file_list = file_list.concat(\"&file_name=\",file.name);\n        }\n        file_value.push(file.name);\n      }\n      }\n      prefix = \"/show-prediction/?\"\n      window.output = prefix.concat(\"file_path=\",file_path,file_list)\n    }  \n    ```", "```py\n    def package_list(key_name,list_in):\n        i = 0\n        list_out = []\n        for element in list_in:\n            key_value = list_in[i].strip()\n            list_out.append({key_name:key_value})\n            i = i+1\n        return(list_out)\n    ```", "```py\n    image_file_name_list = request.args.getlist('file_name')\n    ```", "```py\n        prediction_list = package_list(\"prediction_key\",prediction_string_list)\n    ```", "```py\n        return(render_template('show-prediction.html',prediction_list=prediction_list))\n    ```", "```py\n      <h1 style=\"color: green\"> \n        Here are the predictions for the images you selected:\n      </h1> \n      <h1 style=\"color: green\">\n      <p> \n      {% for prediction in prediction_list %}\n        {{prediction.prediction_key}}{% if not loop.last %}, {% endif %}\n      {% endfor %}\n      </p>  \n      </h1>\n    ```", "```py\n    python web_flask_deploy_image_model.py\n    ```"]