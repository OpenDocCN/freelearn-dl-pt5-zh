["```py\n$ python --version\nPython 3.4.1 :: Anaconda 2.1.0 (x86_64)\n```", "```py\n$ python\nPython 3.4.1 |Anaconda 2.1.0 (x86_64)| (default, Sep 10 2014, 17:24:09) [GCC 4.2.1 (Apple Inc. build 5577)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```", "```py\n>>> 1 + 2\n3\n```", "```py\n>>> 1 - 2\n-1\n>>> 4 * 5\n20\n>>> 7 / 5\n1.4\n>>> 3 ** 2\n9\n```", "```py\n>>> type(10)\n<class 'int'>\n>>> type(2.718)\n<class 'float'>\n>>> type(\"hello\")\n<class 'str'>\n```", "```py\n>>> x = 10 # Initialize\n>>> print(x) \n10\n>>> x = 100 # Assign\n>>> print(x)\n100\n>>> y = 3.14\n>>> x * y\n314.0\n>>> type(x * y)\n<class 'float'>\n```", "```py\n>>> a = [1, 2, 3, 4, 5] # Create a list\n>>> print(a) # Print the content of the list\n[1, 2, 3, 4, 5]\n>>> len(a) # Get the length of the list\n5\n>>> a[0] # Access the first element\n1\n>>> a[4]\n5\n>>> a[4] = 99 # Assign a value\n>>> print(a)\n[1, 2, 3, 4, 99]\n```", "```py\n>>> print(a)\n[1, 2, 3, 4, 99]\n>>> a[0:2] # Obtain from the zero index to the second index (the second one is not included!) \n[1, 2]\n>>> a[1:] # Obtain from the first index to the last\n[2, 3, 4, 99]\n>>> a[:3] # Obtain from the zero index to the third index (the third one is not included!) \n[1, 2, 3]\n>>> a[:-1] # Obtain from the first element to the second-last element\n[1, 2, 3, 4]\n>>> a[:-2] # Obtain from the first element to the third-last element\n[1, 2, 3]\n```", "```py\n>>> me = {'height':180} # Create a dictionary\n>>> me['height'] # Access an element\n180\n>>> me['weight'] = 70 # Add a new element\n>>> print(me)\n{'height': 180, 'weight': 70}\n```", "```py\n>>> hungry = True # Hungry?\n>>> sleepy = False # Sleepy?\n>>> type(hungry)\n<class 'bool'>\n>>> not hungry\nFalse\n>>> hungry and sleepy \nFalse\n>>> hungry or sleepy \nTrue\n```", "```py\n>>> hungry = True\n>>> if hungry:\n...  print(\"I'm hungry\")\n...\nI'm hungry\n>>> hungry = False\n>>> if hungry:\n...    print(\"I'm hungry\") # Indent with spaces\n... else:\n...     print(\"I'm not hungry\")\n...     print(\"I'm sleepy\")\n...\nI'm not hungry\nI'm sleepy\n```", "```py\n>>> for i in [1, 2, 3]:\n...    print(i)\n...\n1\n2\n3\n```", "```py\n>>> def hello():\n...  print(\"Hello World!\")\n...\n>>> hello()\nHello World!\n```", "```py\n>>> def hello(object):\n...  print(\"Hello \" + object + \"!\")\n...\n>>> hello(\"cat\")\nHello cat!\n```", "```py\nprint(\"I'm hungry!\")\n```", "```py\n$ cd ~/deep-learning-from-zero/ch01 # Move to the directory\n$ python hungry.py\nI'm hungry! \n```", "```py\nclass name:\n    def __init__ (self, argument, …): # Constructor\n        ...\n    def method name 1 (self, argument, …): # Method 1\n        ...\n    def method name 2 (self, argument, …): # Method 2\n        ...\n```", "```py\nclass Man:\n    def __init__(self, name):\n        self.name = name\n        print(\"Initialized!\")\n    def hello(self):\n        print(\"Hello \" + self.name + \"!\")\n    def goodbye(self):\n        print(\"Good-bye \" + self.name + \"!\")\nm = Man(\"David\")\nm.hello()\nm.goodbye()\n```", "```py\n$ python man.py\nInitialized!\nHello David!\nGood-bye David!\n```", "```py\n>>> import numpy as np\n```", "```py\n>>> x = np.array([1.0, 2.0, 3.0])\n>>> print(x)\n[ 1\\. 2\\. 3.]\n>>> type(x)\n<class 'numpy.ndarray'>\n```", "```py\n>>> x = np.array([1.0, 2.0, 3.0])\n>>> y = np.array([2.0, 4.0, 6.0])\n>>> x + y # Add arrays\narray([ 3., 6., 9.])\n>>> x - y\narray([ -1., -2., -3.])\n>>> x * y # element-wise product\narray([ 2.,\t8., 18.])\n>>> x / y\narray([ 0.5, 0.5, 0.5])\n```", "```py\n>>> x = np.array([1.0, 2.0, 3.0])\n>>> x / 2.0\narray([ 0.5, 1\\. , 1.5])\n```", "```py\n>>> A = np.array([[1, 2], [3, 4]])\n>>> print(A)\n[[1 2]\n[3 4]]\n>>> A.shape\n(2, 2)\n>>> A.dtype\ndtype('int64')\n```", "```py\n>>> B = np.array([[3, 0],[0, 6]])\n>>> A + B\narray([[ 4, 2],\n[ 3, 10]])\n>>> A * B\narray([[ 3, 0],\n[ 0, 24]])\n```", "```py\n>>> print(A)\n[[1 2]\n[3 4]]\n>>> A * 10\narray([[ 10, 20],\n[ 30, 40]])\n```", "```py\n>>> A = np.array([[1, 2], [3, 4]])\n>>> B = np.array([10, 20])\n>>> A * B\narray([[ 10, 40],\n[ 30, 80]])\n```", "```py\n>>> X = np.array([[51, 55], [14, 19], [0, 4]])\n>>> print(X)\n[[51 55]\n[14 19]\n[ 0 4]]\n>>> X[0]  # 0th row\narray([51, 55])\n>>> X[0][1] # Element at (0,1)\n55\n```", "```py\n>>> for row in X:\n...    print(row)\n...\n[51 55]\n[14 19]\n[0 4]\n```", "```py\n>>> X = X.flatten( ) # Convert X into a one-dimensional array\n>>> print(X)\n[51 55 14 19 0 4]\n>>> X[np.array([0, 2, 4])] # Obtain the elements of the 0th, 2nd, and 4th indices\narray([51, 14, 0])\n```", "```py\n>>> X > 15\narray([ True, True, False, True, False, False], dtype=bool)\n>>> X[X>15]\narray([51, 55, 19])\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Create data\nx = np.arange(0, 6, 0.1) # Generate from 0 to 6 in increments of 0.1\ny = np.sin(x)\n# Draw a graph\nplt.plot(x, y)\nplt.show()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Create data\nx = np.arange(0, 6, 0.1) # Generate from 0 to 6 in increments of 0.1\ny1 = np.sin(x)\ny2 = np.cos(x)\n# Draw a graph\nplt.plot(x, y1, label=\"sin\")\nplt.plot(x, y2, linestyle = \"--\", label=\"cos\") # Draw with a dashed line\nplt.xlabel(\"x\") # Label of the x axis\nplt.ylabel(\"y\") # Label of the y axis\nplt.title('sin & cos') # Title\nplt.legend()\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt \nfrom matplotlib.image import imread\nimg = imread('lena.png') # Load an image (specify an appropriate path!) \nplt.imshow(img)\nplt.show()\n```"]