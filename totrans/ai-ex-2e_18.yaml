- en: '18'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Neuromorphic Computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our brain activates thousands or even billions of neurons when necessary, getting
    our body battle-ready to face any situation. As we saw in *Chapter 17*, *Genetic
    Algorithms in Hybrid Neural Networks*, evolution has fined-tuned biological capacities
    over thousands of generations and millions of years.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a deeper look into the cognitive power inside
    our bodies. We will go from the chromosomes of the previous chapter to biological
    neurons that make us intelligent creatures. The neurons interact in billions of
    ways producing cognitive patterns leading to mind structures.
  prefs: []
  type: TYPE_NORMAL
- en: Neuromorphic computing taps into the tremendous optimized power of our brain,
    which surprisingly consumes very little energy. On average, we consume a few watts,
    less than a lightbulb, to solve very complex problems. In itself, this shows that
    the neuronal structure of our brain has a unique architecture that we have yet to reproduce
    physically.
  prefs: []
  type: TYPE_NORMAL
- en: To bring neuromorphic computing into the real world requires hardware and software,
    as in all computer science models. In this chapter, we will focus on the software,
    though it is important to mention the hardware associated with the neuromorphic
    research Intel is conducting. That hardware takes the form of a chip named Loihi,
    after the emerging Hawaiian underwater volcano that will hit the surface one day.
    Loihi contains thousands upon thousands of neurons with their synapses, dendrites,
    and axons reproducing our brain activity. IBM and other corporations have been
    conducting research in this area.
  prefs: []
  type: TYPE_NORMAL
- en: We have around 100 billion neurons. These chips are only reaching hundreds of thousands
    of neurons. However, by connecting thousands of those chips in physical networks,
    neuromorphic computing will be an area we all will have to take into account in
    the near future.
  prefs: []
  type: TYPE_NORMAL
- en: We will first define what neuromorphic computing is and then explore Nengo,
    a unique neuromorphic framework with solid tutorials and documentation. Nengo is
    one among many other approaches that go beyond the scope of this book. This chapter
    is not a neuromorphic course but rather an overview, inviting you to tap into
    the wonderful power of our brain structures to solve complex problems. The problems
    we will explore will bring us closer to understanding how our brain works.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What neuromorphic computing is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Nengo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic Nengo concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the Nengo tutorial and interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between Nengo and classical AI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying Nengo's unique **Semantic Pointer Architecture** (**SPA**) model to
    critical research areas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start with the basics—what is neuromorphic computing?
  prefs: []
  type: TYPE_NORMAL
- en: Neuromorphic computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go directly to the core of our thought process to understand neuromorphic
    computing. For AI experts, I would like to summarize the voyage from our classical models
    to cutting-edge neuromorphic models in a single phrase:'
  prefs: []
  type: TYPE_NORMAL
- en: '*from mind to brain*'
  prefs: []
  type: TYPE_NORMAL
- en: If we take this further, *M* is the set of all of our mental representations
    and *B* is the world of physical reactions that lead to thinking patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this sense, *M* is a set of everything we have explored up to this point
    in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '*M* = {rule based systems, machine learning, deep learning, evolutionary algorithms
    … *m*}'
  prefs: []
  type: TYPE_NORMAL
- en: '*m* is any mathematical *mental representation* of the world surrounding us.
    In deep learning, for example, an artificial neural network will try to make sense
    of the chaos of an image by searching the patterns it can find in an image through
    lower dimensions and higher levels of abstraction.'
  prefs: []
  type: TYPE_NORMAL
- en: However, a mental construction, no matter how efficient it seems, remains a
    *representation*, not a physical reality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s observe *B* = *brain constructions*:'
  prefs: []
  type: TYPE_NORMAL
- en: '*B* = phenomena/events (inside us or in the outer world) -> physical stimuli
    -> physical neural activity in the brain -> higher activity in the target zones
    -> physical electric learning reactions -> a human action'
  prefs: []
  type: TYPE_NORMAL
- en: The architecture of *B* takes us much closer to reality! Mental representations
    are minimized, thus reducing the distortion of artificial constructions regardless
    of their efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: Classical AI is about building mental representations of our cognitive activity.
  prefs: []
  type: TYPE_NORMAL
- en: Neuromorphic computing is about building a brain that can encode reality, process
    it like a human brain, and decode the result.
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that corporations such as Intel are providing the chips to accomplish
    wonderful things with neuromorphic computing, as we will discover in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have some idea of what neuromorphic computing is, let's take a look
    at the neuromorphic framework, Nengo.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Nengo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a nutshell, *Nengo builds brains, not mental representations*, as in classical
    machine learning and deep learning.
  prefs: []
  type: TYPE_NORMAL
- en: Nengo stands for *Neural Engineering Object*. It has both scripting capability
    with Nengo and a graphical capacity with Nengo GUI. We will be using NEF, which
    is Nengo's **Neural Engineering Framework** (**NEF**).
  prefs: []
  type: TYPE_NORMAL
- en: Nengo was created by the Centre for Theoretical Neuroscience at the University
    of Waterloo (Ontario, Canada). Chris Eliasmith has played an important role in
    this project.
  prefs: []
  type: TYPE_NORMAL
- en: We have explored many ways to approach cognitive modeling in the previous chapters.
    Nengo uses an NEF to implement an SPA.
  prefs: []
  type: TYPE_NORMAL
- en: A *semantic pointer* is a neural representation in a biological system that
    carries structures that will lead to higher-level cognitive representations.
  prefs: []
  type: TYPE_NORMAL
- en: The term *pointer* refers to pointers as we know in C++, for example, because
    they can access data they do not contain.
  prefs: []
  type: TYPE_NORMAL
- en: The term *semantic* refers to the fact that they are not just mathematical tools
    as in C++ because they contain virtual representations through the distances between
    them.
  prefs: []
  type: TYPE_NORMAL
- en: If we put the two concepts together, this leads to the mind-blowing concept
    of meaning being generated through biological pointer activity located at various
    distances and states from each other in our brain. Let's dive into neuromorphic
    computing by first installing Nengo.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Nengo and Nengo GUI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this chapter, I used the Python interfaces with NumPy and Matplotlib libraries,
    as we have since the beginning of this book. All that is then required is to install
    Nengo with `pip`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can install it using other approaches. For more information, go to [https://github.com/nengo/nengo](https://github.com/nengo/nengo).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install the nice HTML 5 visualizer and interact with Nengo through this
    GUI I installed with `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can install it using other approaches, too. For more information, go to:
    [https://github.com/nengo/nengo-gui/](https://github.com/nengo/nengo-gui/).'
  prefs: []
  type: TYPE_NORMAL
- en: Once both programs are installed, if you encounter any problems then consult
    the links, which contain a lot of information, or Nengo's support team, who provide
    excellent feedback.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to use Nengo. This chapter describes a quick start method
    with Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are all set, open your browser, Chrome, for example, and then type
    `nengo` in a command-line console and it should open the Nengo GUI interface in
    your browser, opening a `default.py` Python program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_18_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.1: Nengo Python code'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the folder icon in the top left and click on `built-in examples`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_18_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.2: Nengo examples'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list will appear. Click on `tutorial`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_18_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3: List of Nengo examples'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of fascinating educational examples will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_18_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.4: Examples in the tutorial section'
  prefs: []
  type: TYPE_NORMAL
- en: The tutorial programs are in the directory the installer wrote them in.
  prefs: []
  type: TYPE_NORMAL
- en: You can see them in the URL of a Python example of the tutorial in the address
    bar of your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Python program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s create a Python program and save the file through a few steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open an empty Python file but do not save it yet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Write the following code to import the `nengo` library and create a model:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, save the Python file in the path of the other programs of the tutorial.
    You can see this path when you open a Nengo example. Just navigate to that path
    to save your program. We will name it `00-myintro.py` to fit in nicely with the
    list of programs in the tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_18_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.5: Saving a Python program'
  prefs: []
  type: TYPE_NORMAL
- en: We will go back to the `tutorial` directory as we did previously, and we will
    open it to add basic Nengo objects.
  prefs: []
  type: TYPE_NORMAL
- en: Nengo objects are the building blocks of a Nengo model to create populations
    of neurons, connecting them to stimulation functions, and managing the outputs.
  prefs: []
  type: TYPE_NORMAL
- en: For our Python program, we will use some key Nengo objects, which are detailed
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: A Nengo ensemble
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Nengo ensemble is a group of neurons. It can be considered as a population
    of neurons that contain real numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'An ensemble is an object created with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'An ensemble can be created in one line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As soon as we add a line to `00-myintro.py`, a representation of the ensemble
    appears on the left-hand pane of the Nengo interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_18_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.6: Neuron ensemble'
  prefs: []
  type: TYPE_NORMAL
- en: While writing your Python code in the code editor on the right, you can visualize
    the visual flow of the model in the visual interface pane.
  prefs: []
  type: TYPE_NORMAL
- en: 'An ensemble can contain a population of one individual, a single neuron. This
    neuron is a representation of our biological neurons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Postsynaptic currents** (**PSCs**) flow through our dendrites'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *current* then reaches the core of the neuron (cell body)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current exceeds a threshold at the axon's initial segment (axon hillock),
    then a *spike* is generated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With ion channels open, the PSCs are produced in the receiving cell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a more detailed look at Nengo's neuron types.
  prefs: []
  type: TYPE_NORMAL
- en: Nengo neuron types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We created 50 neurons in our ensemble:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There are various neuron types. However, in our example, we will be using the
    default neuron, a **leaky integrate-and-fire** (**LIF**) neuron.
  prefs: []
  type: TYPE_NORMAL
- en: Neuronal dynamics are based on a summation process called **integration**. This
    integration is associated with a mechanism that will fire (trigger) up above a
    critical voltage.
  prefs: []
  type: TYPE_NORMAL
- en: A linear differential equation combined with a threshold that will trigger file
    spiking are the final components that make up the default LIF neuron we will be using,
    unless specified otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: For more on Nengo neuron types, see [https://www.nengo.ai/nengo-extras/neurons.html](https://www.nengo.ai/nengo-extras/neurons.html).
  prefs: []
  type: TYPE_NORMAL
- en: Nengo neuron dimensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In our example, `dimensions` is set to `1`; this means that the ensemble is
    represented by one number (or dimension):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A Nengo node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have defined our ensemble of neurons and their output dimension,
    we will define the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The stimulation will be a constant and will be displayed on the slider as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_18_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.7: Nengo slider'
  prefs: []
  type: TYPE_NORMAL
- en: 'An output with a number might not suffice in some cases. This number can be
    replaced by a function importing NumPy. A sine wave function can be used, for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As soon as we enter our node function, it appears on the interface in addition
    to the previous information displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_18_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.8: The node function on the interface'
  prefs: []
  type: TYPE_NORMAL
- en: '`node_function` provides a way to send non-neural inputs to Nengo objects.'
  prefs: []
  type: TYPE_NORMAL
- en: We will explore such an implementation in the `15-lorenz.py` example in this
    chapter that is in the tutorial section Nengo's examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you right-click on the `node_function` image and choose a value, you will
    see a curve representing the real-time value of the sine wave stimulation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_18_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.9: Node function'
  prefs: []
  type: TYPE_NORMAL
- en: For more on Nengo objects, go to [https://www.nengo.ai/nengo/getting_started.html#creating-nengo-objects](https://www.nengo.ai/nengo/getting_started.html#creating-nengo-objects).
  prefs: []
  type: TYPE_NORMAL
- en: Connecting Nengo objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now need to connect the ensemble and the node to make our system work. In this
    manner, the ensemble will have a function.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we have an ensemble and a node function, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_18_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.10: Ensemble and node function'
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect them, we will add a Nengo connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For more Nengo frontend API definitions, see [https://www.nengo.ai/nengo/frontend_api.html](https://www.nengo.ai/nengo/frontend_api.html).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's explore the exciting visual interface.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to click on the play button in the bottom-right corner of
    the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_18_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.11: Play button'
  prefs: []
  type: TYPE_NORMAL
- en: This will set time in motion, simulating our brain activity. Time is one of
    the unique features of neuromorphic computing. We do not pile layer upon layer
    of static mathematics into a mental representation. With Nengo, we simulate brain
    activity step by step, second by second!
  prefs: []
  type: TYPE_NORMAL
- en: Once you click on the play button, it feels like we are looking inside our brain!
  prefs: []
  type: TYPE_NORMAL
- en: We saw how to visualize the slider's activity in the previous section, which
    produces the stimulations. We will focus on our ensemble in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we right-click on the ensemble visualization, several options appear: **Value**,
    **Spikes**, **Voltages**, **Firing pattern**, and **Details...**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_18_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.12: Ensemble options'
  prefs: []
  type: TYPE_NORMAL
- en: '**Value**: The value of our ensemble will be displayed, from –1 to 1, for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B15438_18_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.13: Values of an ensemble'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spikes**: The spiking activity produces nice colors that show how our neurons are
    reacting to sine wave stimulation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B15438_18_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.14: Spiking patterns'
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that each neuron has its own spiking channel. This property
    of ensembles produces a wide variety of responses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Voltages**: The voltages provide interesting information on the current that
    is flowing through our neurons under stimulation from other neurons and, in turn,
    from yet more neurons that are gathering information from the world outside us.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following screenshot, the ensemble contained a population of five neurons
    with color channels providing yet more information:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B15438_18_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.15: Neuron activity with color patterns'
  prefs: []
  type: TYPE_NORMAL
- en: '**Firing pattern**: The firing pattern of the ensemble in the following image
    was generated with 50 neurons. The firing pattern is necessarily directly linked
    to the stimulations and connections:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B15438_18_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.16: Firing pattern'
  prefs: []
  type: TYPE_NORMAL
- en: I have been observing many patterns through the experiments I carried out. One
    of the areas of research I'm doing is to feed the thousands of frames of firing
    patterns of a given function to an ANN and a stochastic Church-Turing algorithm
    and generate "thought" patterns. For example, running the channels of the frames
    could produce sequences of new data. It's worth experimenting with.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image represents the pattern of 500 neurons bringing complexity
    to the potential of running deep learning on thousands of frames of these patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15438_18_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.17: Firing patterns'
  prefs: []
  type: TYPE_NORMAL
- en: '**Details...**: In the plots section, we can visualize input current and tuning
    curves. The tuning curve shows how the neurons are reacting to the input current.
    If there is no pattern, then there must be an explanation or a configuration problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The visual control of tuning curves is a time saver by showing how they converge!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B15438_18_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.18: Tuning curves'
  prefs: []
  type: TYPE_NORMAL
- en: We have covered some of the main visual tools Nengo provides.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will see how to retrieve data from our system with probes.
  prefs: []
  type: TYPE_NORMAL
- en: Probes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can retrieve information with probes, either to visualize them or to process
    output data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, I enhanced `00-myintro.py` to produce numerical output as
    well as visual output using the information on the following page that you can
    get ideas from for your projects: [https://www.nengo.ai/nengo/examples/basic/single_neuron.html](https://www.nengo.ai/nengo/examples/basic/single_neuron.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The program I created is `nengo_probing.py` and is available in the GitHub repository
    of this book. The program is a standalone program that does not run in Nengo's
    GUI. You cannot use simulation commands as shown in the following in Nengo's GUI.
    Run this program in your Python interface. It shows yet another way to run the rich
    Nengo software.
  prefs: []
  type: TYPE_NORMAL
- en: 'The program contains additional headers for Matplotlib and distributions for
    data displaying and processing purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The program contains the same architecture as `00-myintro.py`. It creates an
    ensemble, adds a function, and then connects the objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now add a probing function using `nengo.Probe`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To obtain some data, let''s run the simulator for 5 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The simulator runs the calculation *before* displaying the outputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can probe the data and display it in numerical format. That way, we
    can retrieve output data from our system for further use, visualizing or chaining
    neuromorphic models to other algorithms in a few lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Decoded output**: The decoded output can be filtered (see the preceding filter):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output data is then displayed or can be processed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Nengo can produce a chart with Matplotlib:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding code is plotted as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B15438_18_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.19: Decoded input'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spikes**: Spikes are retrieved in a single line of code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output produces sequences of spikes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The program produces a figure for spikes that matches the data:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B15438_18_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.20: Spiking output'
  prefs: []
  type: TYPE_NORMAL
- en: We can check the visual display with valuable raw data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Voltage**: The simulation provides voltage data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The data is stored in a ready-to-use array:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The program produces a figure for the voltage of the ensemble as well:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B15438_18_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.21: Neuron voltage'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have covered the main features of Nengo. We will now see how
    Nengo can boost research in critical AI research areas.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Nengo's unique approach to critical AI research areas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is useless to apply the power of brain neuromorphic models to simple arithmetic
    or classical neural networks that do not require any more than TensorFlow 2.x,
    for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'But it is also a waste of time to try to solve problems with classical networks
    that neuromorphic computing can solve better with organic brain models. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: Deep learning, TensorFlow 2\. Convolutional models use a unique activation function
    such as ReLU (see *Chapter 9*, *Abstract Image Classification with Convolutional
    Neural Networks (CNNs)*). Neuromorphic neurons have a variety of reactions when
    stimulated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Neuromorphic models integrate time versus more static DL algorithms. When we
    run neuromorphic models, we are closer to the reality of our time-driven biological
    models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Human Brain Project, [https://www.humanbrainproject.eu/en/](https://www.humanbrainproject.eu/en/),
    provides wide research and examples of how neuromorphic computing provides additional
    insights to classical computing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I recommend testing a given problem with several AI tools and choosing the most
    efficient one.
  prefs: []
  type: TYPE_NORMAL
- en: The SPA examples demonstrate the efficiency of Nengo in several areas. All of
    the examples in the tutorial section are well documented and run well. You can
    apply the visualizing functions we explored in this chapter to them and also modify
    the code, experiment with them in your Python environment, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'I wish to highlight two domains: linguistics and weather representations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Linguistics**: `25-spa-parse.py` processes neuronal signals and produces
    words. When you run it, the performances look magical, thanks to the SPA. The
    code is well documented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The program contains the mind-blowing `thalamus` module that can simulate the
    subcortical nuclei in our brains (forebrain and midbrain). This part of our brain,
    the basal ganglia, has high-density connections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This class can reduce or even eliminate low responses and intensify high responses
    to the stimulations. The program is worth running and exploring! The Nengo GUI
    makes it intuitive to understand:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B15438_18_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.22: Nengo GUI options'
  prefs: []
  type: TYPE_NORMAL
- en: '**Weather representations**: `15-lorenz.py` is not an SPA program. It is only
    a few lines long. It displays the graphs of the three basic Lorenz equations that
    represent temperatures and variations in the atmosphere. Nengo modified the code
    for educational purposes as explained in a publication at [http://compneuro.uwaterloo.ca/publications/eliasmith2005b.html](http://compneuro.uwaterloo.ca/publications/eliasmith2005b.html).
    The Nengo GUI displays an exciting representation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B15438_18_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.23: Lorenz equations'
  prefs: []
  type: TYPE_NORMAL
- en: The code of `15-lorenz.py` is short, and the program looks simple. But weather
    forecasting is one of the toughest fields to represent events with AI models!
  prefs: []
  type: TYPE_NORMAL
- en: 'The potential of neuromorphic computing can be a real game-changer. Let''s
    conduct a mind experiment. Imagine that:'
  prefs: []
  type: TYPE_NORMAL
- en: A hurricane is like a living organism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That its center is connected to everything around it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That it "feeds" on the heat and waters of our oceans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That everything that is in it can be considered as small hurricane particles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s now continue the experiment by:'
  prefs: []
  type: TYPE_NORMAL
- en: Feeding the billions of particles in the neuromorphic model in a stream
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the power of a network of neuromorphic chips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the calculation power of quantum computing (see *Chapter 19*, *Quantum Computing*)
    to perform computations with the input/output of the chip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying SPA to the hurricane particle representations as if they were neurons
    and running predictions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I think the future of weather forecasting is in physical, neuromorphic models,
    that will take billions of parameters into account.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result: we will be able to predict the course and level of a hurricane
    a few hours to a few days more in advance. This could save lives.'
  prefs: []
  type: TYPE_NORMAL
- en: In a nutshell, neuromorphic computing has only just begun to demonstrate its
    worth. When neuromorphic chips hit the market, neuromorphic computing will grow
    exponentially.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built neuromorphic Python programs from scratch. Populations
    of neurons, in Nengo ensembles, are made up of neurons. The system then has stimulation
    functions, connections, and probing objects. Nengo offers many other examples
    you can explore.
  prefs: []
  type: TYPE_NORMAL
- en: The NEF was designed to implement neuromorphic computing models. The novel concept
    of SPA shows that our brains have enhanced pointers that have a meaning and are
    linked to our physical data.
  prefs: []
  type: TYPE_NORMAL
- en: Neuromorphic computing opens tremendous horizons for a complex program that
    classical machine learning and deep learning cannot solve. Weather forecasting,
    with the power of the neuromorphic chips that are reaching the market, can tap
    into the complexity and variety of a machine brain. A machine brain can produce
    unique calculations by firing hundreds of thousands of neurons with both individual and
    collective behavior.
  prefs: []
  type: TYPE_NORMAL
- en: We have covered many algorithms and frameworks in this book. We have access
    to the most powerful intelligent algorithms in the history of humanity. From MDP
    to GA algorithms, and from KMC, KNN, PCA, NLP, and CUI algorithms to CNN, RBM,
    RNN, and LSTM networks, we have explored many AI tools. But there may be ways
    to build unified models. We will see in the years to come. In the meantime, neuromorphic
    computing makes our toolbox incredibly intelligent. Google has TPU hardware to
    optimize TensorFlow, neuromorphic computing can rely on Intel chips, and many
    corporations are working to produce more innovative hardware.
  prefs: []
  type: TYPE_NORMAL
- en: The future will no doubt rely on hybrid architectures in which some or all of
    the AI tools will be built into meta-AI systems.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 19*, *Quantum Computing*, we will explore the exponential hardware
    available for quantum mechanics. Quantum computers, having no memory, rely on
    other systems to provide inputs and process outputs. Imagine a neuromorphic system
    chained to a quantum computer!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Neuromorphic computing reproduces our mental activity. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Neuromorphic computing reproduces our brain activity. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Semantic Pointer Architecture (SPA) is a hardware architecture. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NEF stands for Neural Engineering Framework. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loihi is a classical chip. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reproducing our brain's neural activity cannot solve an equation. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An ensemble in Nengo contains algorithms. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spiking blocks neuronal activity. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Firing patterns can be used to analyze brain activity. (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Machine learning and deep learning are only metaphors of our brain's activity.
    (Yes | No)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reference programs used for this chapter can be found at [https://www.nengo.ai](https://www.nengo.ai),
    [https://www.nengo.ai/examples/](https://www.nengo.ai/examples/).
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Research** – *How to Build a Brain*, *Chris Eliasmith*: This book provides
    the theoretical background for neuromorphic computing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Eliasmith is also one of the designers of Nengo.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Software** – Nengo ([https://www.nengo.ai/](https://www.nengo.ai/)): Nengo
    is based on solid research, documentation, and an excellent community.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hardware** – Intel: Intel is working hard to produce a neuromorphic chip
    ([https://www.intel.fr/content/www/fr/fr/research/neuromorphic-computing.html](https://www.intel.fr/content/www/fr/fr/research/neuromorphic-computing.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
