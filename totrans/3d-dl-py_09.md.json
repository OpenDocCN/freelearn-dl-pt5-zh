["```py\ncd chap8\n```", "```py\nconda create -n python2 python=2.7 anaconda\n```", "```py\nsource activate python2\n```", "```py\npip install –r requirements.txt\n```", "```py\n$ python render_smpl.py\n```", "```py\n    import cv2\n    import numpy as np\n    from opendr.renderer import ColoredRenderer\n    from opendr.lighting import LambertianPointLight\n    from opendr.camera import ProjectPoints\n    from smpl.serialization import load_model\n    ```", "```py\n    m = load_model('../smplify/code/models/basicModel_neutral_lbs_10_207_0_v1.0.0.pkl')\n    ```", "```py\n    m.pose[:] = np.random.rand(m.pose.size) * .2\n    m.betas[:] = np.random.rand(m.betas.size) * .03\n    m.pose[0] = np.pi\n    ```", "```py\n    rn = ColoredRenderer()\n    w, h = (640, 480)\n    rn.camera = ProjectPoints(v=m, rt=np.zeros(3), t=np.array([0, 0, 2.]), f=np.array([w,w])/2., c=np.array([w,h])/2., k=np.zeros(5))\n    rn.frustum = {'near': 1., 'far': 10., 'width': w, 'height': h}\n    rn.set(v=m, f=m.f, bgcolor=np.zeros(3))\n    rn.vc = LambertianPointLight(f=m.f, v=rn.v, num_verts=len(m), light_pos=np.array([-1000,-1000,-2000]), vc=np.ones_like(m)*.9, light_color=np.array([1., 1., 1.]))\n    ```", "```py\n    cv2.imshow('render_SMPL', rn.r)\n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\n    ```", "```py\nchap8\n  -- smplify\n    -- code\n      -- fit3d_utils.py\n      -- run_fit3d.py\n      -- render_model.py\n      -- lib\n      -- models\n    -- images\n    -- results\n```", "```py\nexport PYTHONPATH=$PYTHONPATH:<user-specific-path>/3D-Deep-Learning-with-Python/chap8/\n```", "```py\ncd smplify/code\n```", "```py\npython run_fit3d.py --base_dir ../ --out_dir .\n```", "```py\n    from os.path import join, exists, abspath, dirname\n    from os import makedirs\n    import cPickle as pickle\n    from glob import glob\n    import cv2\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import argparse\n    from smpl.serialization import load_model\n    from smplify.code.fit3d_utils import run_single_fit\n    ```", "```py\n    MODEL_DIR = join(abspath(dirname(__file__)), 'models')\n    MODEL_NEUTRAL_PATH = join(\n    MODEL_DIR, 'basicModel_neutral_lbs_10_207_0_v1.0.0.pkl')\n    ```", "```py\n    viz = True\n    n_betas = 10\n    flength = 5000.0\n    pix_thsh = 25.0\n    img_dir = join(abspath(base_dir), 'images/lsp')\n    data_dir = join(abspath(base_dir), 'results/lsp')\n    if not exists(out_dir):\n        makedirs(out_dir)\n    ```", "```py\n    model = load_model(MODEL_NEUTRAL_PATH)\n    ```", "```py\n    est = np.load(join(data_dir, 'est_joints.npz'))['est_joints']\n    ```", "```py\n    img_paths = sorted(glob(join(img_dir, '*[0-9].jpg')))\n    for ind, img_path in enumerate(img_paths):\n        img = cv2.imread(img_path)\n        joints = est[:2, :, ind].T\n        conf = est[2, :, ind]\n    ```", "```py\n    params, vis = run_single_fit(img, joints, conf, model, regs=sph_regs, n_betas=n_betas, flength=flength, pix_thsh=pix_thsh, scale_factor=2, viz=viz, do_degrees=do_degrees)\n    ```", "```py\n    if viz:\n        import matplotlib.pyplot as plt\n        plt.ion()\n        plt.show()\n        plt.subplot(121)\n        plt.imshow(img[:, :, ::-1])\n        for di, deg in enumerate(do_degrees):\n            plt.subplot(122)\n            plt.cla()\n            plt.imshow(vis[di])\n            plt.draw()\n            plt.title('%d deg' % deg)\n            plt.pause(1)\n            raw_input('Press any key to continue...')\n    ```", "```py\n        with open(out_path, 'w') as outf:\n            pickle.dump(params, outf)\n        if do_degrees is not None:\n            cv2.imwrite(out_path.replace('.pkl', '.png'), vis[0])\n    ```"]