["```py\n    import numpy as np\n    from keras.applications.vgg16 import VGG16\n    from keras.preprocessing import image\n    from keras.applications.vgg16 import preprocess_input\n    ```", "```py\n    classifier = VGG16()\n    ```", "```py\n    new_image= image.load_img('../Data/Prediction/pizza.jpg', \\\n                              target_size=(224, 224))\n    new_image\n    ```", "```py\n    transformed_image = image.img_to_array(new_image)\n    transformed_image.shape\n    ```", "```py\n    (224, 224, 3)\n    ```", "```py\n    transformed_image = np.expand_dims(transformed_image, axis=0)\n    transformed_image.shape\n    ```", "```py\n    (1, 224, 224, 3)\n    ```", "```py\n    transformed_image = preprocess_input(transformed_image)\n    transformed_image\n    ```", "```py\n    y_pred = classifier.predict(transformed_image)\n    y_pred\n    ```", "```py\n    y_pred.shape\n    ```", "```py\n    (1, 1000)\n    ```", "```py\n    from keras.applications.vgg16 import decode_predictions\n    decode_predictions(y_pred,top=5)\n    ```", "```py\n    [[('n07873807', 'pizza', 0.97680503),\n      ('n07871810', 'meat_loaf', 0.012848727),\n      ('n07880968', 'burrito', 0.0019428912),\n      ('n04270147', 'spatula', 0.0019108421),\n      ('n03887697', 'paper_towel', 0.0009799759)]]\n    ```", "```py\n    label = decode_predictions(y_pred)\n    \"\"\"\n    Most likely result is retrieved, for example, the highest probability\n    \"\"\"\n    decoded_label = label[0][0]\n    # The classification is printed \n    print('%s (%.2f%%)' % (decoded_label[1], \\\n          decoded_label[2]*100 ))\n    ```", "```py\n    pizza (97.68%)\n    ```", "```py\n    import numpy as np\n    from keras.applications.vgg16 import VGG16\n    from keras.preprocessing import image\n    from keras.applications.vgg16 import preprocess_input\n    ```", "```py\n    classifier = VGG16()\n    classifier.summary()\n    ```", "```py\n    new_image = \\\n    image.load_img('../Data/Prediction/stick_insect.jpg', \\\n                   target_size=(224, 224))\n    new_image\n    ```", "```py\n    transformed_image = image.img_to_array(new_image)\n    transformed_image.shape\n    ```", "```py\n    transformed_image = np.expand_dims(transformed_image, axis=0)\n    transformed_image.shape\n    ```", "```py\n    transformed_image = preprocess_input(transformed_image)\n    transformed_image\n    ```", "```py\n    y_pred = classifier.predict(transformed_image)\n    y_pred\n    ```", "```py\n    y_pred.shape\n    ```", "```py\n    (1, 1000)\n    ```", "```py\n    from keras.applications.vgg16 import decode_predictions\n    decode_predictions(y_pred, top=5)\n    ```", "```py\n    [[('n02231487', 'walking_stick', 0.30524516),\n      ('n01775062', 'wolf_spider', 0.26035702),\n      ('n03804744', 'nail', 0.14323168),\n      ('n01770081', 'harvestman', 0.066652186),\n      ('n01773549', 'barn_spider', 0.03670299)]]\n    ```", "```py\n    label = decode_predictions(y_pred)\n    \"\"\"\n    Most likely result is retrieved, for example, the highest probability\n    \"\"\"\n    decoded_label = label[0][0]\n    # The classification is printed\n    print('%s (%.2f%%)' % (decoded_label[1], decoded_label[2]*100 ))\n    ```", "```py\n    walking_stick (30.52%)\n    ```", "```py\n    import numpy as np\n    import keras\n    from keras.layers import Dense\n    from tensorflow import random\n    ```", "```py\n    vgg_model = keras.applications.vgg16.VGG16()\n    ```", "```py\n    vgg_model.summary()\n    ```", "```py\n    last_layer = str(vgg_model.layers[-1])\n    np.random.seed(42)\n    random.set_seed(42)\n    classifier= keras.Sequential()\n    for layer in vgg_model.layers:\n        if str(layer) != last_layer:\n            classifier.add(layer)\n    ```", "```py\n    classifier.summary()\n    ```", "```py\n    for layer in classifier.layers:\n        layer.trainable=False\n    ```", "```py\n    classifier.add(Dense(1, activation='sigmoid'))\n    classifier.summary()\n    ```", "```py\n    classifier.compile(optimizer='adam', loss='binary_crossentropy', \\\n                       metrics=['accuracy'])\n    ```", "```py\n    from keras.preprocessing.image import ImageDataGenerator\n    generate_train_data = \\\n    ImageDataGenerator(rescale = 1./255,\\\n                       shear_range = 0.2,\\\n                       zoom_range = 0.2,\\\n                       horizontal_flip = True)\n    generate_test_data = ImageDataGenerator(rescale =1./255)\n    training_dataset = \\\n    generate_train_data.flow_from_directory(\\\n        '../Data/Dataset/training_set',\\\n        target_size = (224, 224),\\\n        batch_size = 32,\\\n        class_mode = 'binary')\n    test_datasetset = \\\n    generate_test_data.flow_from_directory(\\\n        '../Data/Dataset/test_set',\\\n        target_size = (224, 224),\\\n        batch_size = 32,\\\n        class_mode = 'binary')\n    classifier.fit_generator(training_dataset,\\\n                             steps_per_epoch = 100,\\\n                             epochs = 10,\\\n                             validation_data = test_datasetset,\\\n                             validation_steps = 30,\\\n                             shuffle=False)\n    ```", "```py\n    100/100 [==============================] - 2083s 21s/step - loss: 0.5513 - acc: 0.7112 - val_loss: 0.3352 - val_acc: 0.8539\n    ```", "```py\n    from keras.preprocessing import image\n    new_image = \\\n    image.load_img('../Data/Prediction/test_image_2.jpg', \\\n                   target_size = (224, 224))\n    new_image\n    ```", "```py\n    new_image = image.img_to_array(new_image)\n    new_image = np.expand_dims(new_image, axis = 0)\n    result = classifier.predict(new_image)\n    if result[0][0] == 1:\n        prediction = 'It is a flower'\n    else:\n        prediction = 'It is a car'\n    print(prediction)\n    ```", "```py\n    It is a car\n    ```", "```py\n    import numpy as np\n    from keras.applications.resnet50 import ResNet50, preprocess_input\n    from keras.preprocessing import image \n    ```", "```py\n    classifier = ResNet50()\n    classifier.summary()\n    ```", "```py\n    new_image = \\\n    image.load_img('../Data/Prediction/test_image_3.jpg', \\\n                   target_size=(224, 224))\n    new_image\n    ```", "```py\n    transformed_image = image.img_to_array(new_image)\n    transformed_image.shape\n    ```", "```py\n    transformed_image = np.expand_dims(transformed_image, axis=0)\n    transformed_image.shape\n    ```", "```py\n    transformed_image = preprocess_input(transformed_image)\n    transformed_image\n    ```", "```py\n    y_pred = classifier.predict(transformed_image)\n    y_pred\n    ```", "```py\n    y_pred.shape\n    ```", "```py\n    (1, 1000)\n    ```", "```py\n    from keras.applications.resnet50 import decode_predictions\n    decode_predictions(y_pred, top=5)\n    ```", "```py\n    [[('n04037443', 'racer', 0.8013074),\n      ('n04285008', 'sports_car', 0.06431753),\n      ('n02974003', 'car_wheel', 0.024077434),\n      ('n02504013', 'Indian_elephant', 0.019822922),\n      ('n04461696', 'tow_truck', 0.007778575)]]\n    ```", "```py\n    label = decode_predictions(y_pred)\n    \"\"\"\n    Most likely result is retrieved, for example, the highest probability\n    \"\"\"\n    decoded_label = label[0][0]\n    # The classification is printed\n    print('%s (%.2f%%)' % (decoded_label[1], \\\n          decoded_label[2]*100 ))\n    ```", "```py\n    racer (80.13%)\n    ```"]