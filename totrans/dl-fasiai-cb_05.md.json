["```py\n    path = untar_data(URLs.ML_SAMPLE)\n    ```", "```py\n    path.ls()\n    ```", "```py\n    df = pd.read_csv(path/'ratings.csv')\n    ```", "```py\n    df.head()\n    ```", "```py\n    dls=CollabDataLoaders.from_df(df,bs= 64)\n    ```", "```py\n    dls.show_batch()\n    ```", "```py\n    learn=collab_learner(dls, y_range= [ 0 , 5.0 ] )\n    ```", "```py\n    learn.fit_one_cycle( 5 )\n    ```", "```py\n    scoring_columns = ['userId','movieId']\n    test_df = pd.DataFrame(columns=scoring_columns)\n    test_df.at[0,'userId'] = 388\n    test_df.at[0,'movieId'] = 153\n    test_df.at[1,'userId'] = 607\n    test_df.at[1,'movieId'] = 1210\n    test_df.head()\n    ```", "```py\n    dl = learn.dls.test_dl(test_df)\n    learn.get_preds(dl=dl)\n    ```", "```py\n    path = untar_data(URLs.ML_SAMPLE)\n    ```", "```py\n    dls=CollabDataLoaders.from_df(df,bs= 64)\n    ```", "```py\n    learn=collab_learner(dls, y_range= [ 0 , 5.0 ]\n    ```", "```py\nlearn.predict(\"what comes next\", n_words=20)\n```", "```py\n    dl = learn.dls.test_dl(test_df)\n    ```", "```py\n    learn.get_preds(dl=dl)\n    ```", "```py\n    apt update\n    ```", "```py\n    apt install tree\n    ```", "```py\n    path = untar_data(URLs.ML_100k)\n    ```", "```py\n    path.ls()\n    ```", "```py\n    cd /storage/data/ml-100k\n    ```", "```py\n    tree command lists the contents of the directory:\n\n    ```", "```py\n\n    We want to focus on the contents of two files from this set: `u.data`, which lists the ratings provided by users for movie IDs, and `u.item`, which lists details about the movies, including their titles.\n    ```", "```py\n    df_data = pd.read_csv(path/'u.data', delimiter = '\\t',\n    header = None,\\\n    names = ['userId','movieId','rating','timestamp'])\n    ```", "```py\n    df_item = pd.read_csv(path/'u.item', delimiter = '|',header = None,encoding = \"ISO-8859-1\")\n    ```", "```py\n    df_data.head()\n    ```", "```py\n    df_data.shape\n    ```", "```py\n    df_item.head()\n    ```", "```py\n    df_item DataFrame:![Figure 5.13 – The shape of the df_item DataFrame\n    ](img/B16216_5_13.jpg)Figure 5.13 – The shape of the df_item DataFrame\n    ```", "```py\n    df_item = df_item.iloc[:,0:2]: Removes all the columns in the DataFrame except for the first two columns that contain the movie ID and the movie titleb) `df_item.columns = ['movieId','movieName']`: Assigns names to the columns in the remaining columns in the DataFramec) `df_item.head()`: Displays the first few rows of the transformed DataFrameThis cell produces as output the first few rows of the transformed DataFrame, as shown in *Figure 5.14*:![Figure 5.14 – The first few rows of the updated df_item DataFrame\n    ](img/B16216_5_14.jpg)Figure 5.14 – The first few rows of the updated df_item DataFrame\n    ```", "```py\n    df =\\\n    pd.merge(df_data,df_item,on=['movieId'],how='left')\n    df.head()\n    ```", "```py\n    df DataFrame. Note that df has the same number of rows as df_data:![Figure 5.16 – The shape of the df DataFrame\n    ](img/B16216_5_16.jpg)Figure 5.16 – The shape of the df DataFrame\n    ```", "```py\n    df.nunique()\n    ```", "```py\n    df.isnull().sum()\n    ```", "```py\n    dls=/\n    CollabDataLoaders.from_df(df,item_name='movieName',bs= 64)\n    ```", "```py\n    dls.show_batch()\n    ```", "```py\n    learn=collab_learner(dls,y_range= [ 1 , 5 ] )\n    ```", "```py\n    learn.fit_one_cycle( 5 )\n    ```", "```py\n    df_one_movie = df[df.movieName=='Showgirls (1995)']\n    df_one_movie.head()\n    ```", "```py\n    df_one_movie['rating'].mean()\n    ```", "```py\n    scoring_columns = ['userId','movieId','movieName']\n    test_df = pd.DataFrame(columns=scoring_columns)\n    test_df.at[0,'userId'] = 607\n    test_df.at[0,'movieId'] = 242\n    test_df.at[0,'movieName'] = 'Kolya (1996)'\n    test_df.at[1,'userId'] = 607\n    test_df.at[1,'movieId'] = 302\n    test_df.at[1,'movieName'] = 'L.A. Confidential (1997)'\n    test_df.at[2,'userId'] = 607\n    test_df.at[2,'movieId'] = 375\n    test_df.at[2,'movieName'] = 'Showgirls (1995)'\n    test_df.head()\n    ```", "```py\n    dl = learn.dls.test_dl(test_df)\n    learn.get_preds(dl=dl)\n    ```", "```py\n    cd /storage/archive\n    ```", "```py\n    mkdir amazon_reviews\n    ```", "```py\n    cd /storage/archive/amazon_reviews\n    ```", "```py\n    notebooks/temp directory, make a new /notebooks/temp directory:\n\n    ```", "```py\n\n    ```", "```py\ncp /notebooks/temp/ratings_Electronics.csv /storage/archive/amazon_reviews/ratings_Electronics.csv\n```", "```py\n    path = URLs.path('amazon_reviews')\n    ```", "```py\n    path.ls()\n    ```", "```py\n    df = pd.read_csv(path/'ratings_Electronics.csv',header = None)\n    ```", "```py\n    df.columns = ['userID','productID','rating','timestamp']\n    ```", "```py\n    df.head()\n    ```", "```py\n    df.shape\n    ```", "```py\n    dls=CollabDataLoaders.from_df(df,bs= 64)\n    ```", "```py\n    dls.show_batch()\n    ```", "```py\n    learn=collab_learner(dls,y_range= [ 0 , 5.0 ] )\n    ```", "```py\n    learn.fit_one_cycle( 1 )\n    ```", "```py\n    scoring_columns = ['userID','productID']\n    test_df = pd.DataFrame(columns=scoring_columns)\n    test_df.at[0,'userID'] = 'A2NYK9KWFMJV4Y'\n    test_df.at[0,'productID'] = 'B008ABOJKS'\n    test_df.at[1,'userID'] = 'A29ZTEO6EKSRDV'\n    test_df.at[1,'productID'] = 'B006202R44'\n    test_df.head()\n    ```", "```py\n    dl = learn.dls.test_dl(test_df)\n    learn.get_preds(dl=dl)\n    ```"]