["```py\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n```", "```py\n!pip3 install matplotlib==3.7.1\n!pip3 install pandas==1.5.3\n !pip3 install seaborn==0.12.2\n```", "```py\n# Retrieve Dataset (House Sales Prices) from GitHub repository for Deep Learning with MXNet Cookbook by Packt\n!wget https://github.com/PacktPublishing/Deep-Learning-with-MXNet-Cookbook/raw/main/ch02/kc_house_data.zip\n# Uncompress kc_house_data.csv file\n!unzip /content/kc_house_data.zip\nhouse_df = pd.read_csv(\"kc_house_data.csv\")\n```", "```py\nhouse_df.info()\n```", "```py\nhouse_df.head()\n```", "```py\nhouse_df.hist(column = \"price\", bins = 24)\n plt.show()\n```", "```py\nhouse_df = house_df.drop([\"id\"], axis=1)\n```", "```py\nhouse_corr = house_df.corr()\n```", "```py\nplt.figure(figsize=(20, 10))\ncolormap = sns.color_palette(\"rocket_r\", as_cmap=True)\nsns.heatmap(house_corr, annot=True, cmap=colormap)\nplt.show()\n```", "```py\nhouse_corr[\"price\"].drop([\"price\"]).sort_values(ascending = False).plot.bar(figsize=(5,5))\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n```", "```py\nfrom sklearn import datasets\n```", "```py\n!pip3 install matplotlib\n!pip3 install pandas\n!pip3 install seaborn\n!pip3 install scikit-learn\n```", "```py\niris = datasets.load_iris()\niris_df = pd.DataFrame(iris.data, columns = iris.feature_names)\n iris_df.insert(0, \"class\", iris.target)\n```", "```py\niris_df.info()\n```", "```py\niris_df.head()\n```", "```py\niris.target_names\n```", "```py\narray(['setosa', 'versicolor', 'virginica'], dtype='<U10')\n```", "```py\niris_df.groupby(\"class\").size()\n```", "```py\nClass\n0 50\n1 50\n2 50\ndtype: int64\n```", "```py\niris_corr = iris_df.corr()\n```", "```py\nplt.figure(figsize=(10, 10))\ncolormap = sns.color_palette(\"rocket_r\", as_cmap=True)\nsns.heatmap(iris_corr, annot=True, cmap=colormap)\nplt.show()\n```", "```py\niris_corr[\"class\"].drop([\"class\"]).sort_values(\n    ascending = False).plot.bar(figsize=(5,5))\nplt.show()\n```", "```py\ng = sns.pairplot(iris_df, hue=\"class\", height=2, palette=\"rocket_r\")\nhandles = g._legend_data.values()\nlabels = list(iris.target_names)\n g._legend.remove()\ng.fig.legend(handles=handles, labels=labels, loc='upper left', ncol=3)\n```", "```py\nfig, axs = plt.subplots(2, 1)\n sns.violinplot(x=\"class\", y=\"petal length (cm)\", data=iris_df, size=5, palette='rocket_r', ax = axs[0])\n sns.violinplot(x=\"class\", y=\"petal width (cm)\", data=iris_df, size=5, palette='rocket_r', ax = axs[1])\n```", "```py\nfrom mxnet import gluon\ntraining_data_raw = gluon.data.vision.FashionMNIST(train=True)\n test_data_raw = gluon.data.vision.FashionMNIST(train=False)\n```", "```py\nbatch_size = 128\ntraining_data_aux = gluon.data.DataLoader(\n    training_data_raw, batch_size= batch_size, shuffle=True)\n test_data_aux = gluon.data.DataLoader(\n    test_data_raw, batch_size= batch_size, shuffle=False)\n```", "```py\ntraining_data_size = 0\nfor X_batch, y_batch in training_data_aux:\n    if not training_data_size:\n        print(\"X_batch has shape {}, and y_batch has shape {}\"        .format(X_batch.shape, y_batch.shape))\n    training_data_size += X_batch.shape[0]\n print(\"Training Dataset Samples: {}\".format(training_data_size))\n test_data_size = 0\nfor X_batch, y_batch in test_data_aux:\n    test_data_size += X_batch.shape[0]\nprint(\"Test Dataset Samples: {}\".format(test_data_size))\n```", "```py\nX_batch has shape (128, 28, 28, 1), and y_batch has shape (128,)\n Training Dataset Samples: 60000\nTest Dataset Samples: 10000\n```", "```py\n!pip3 install umap-learn\n```", "```py\n!pip3 install pymde\n```", "```py\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n```", "```py\nemails_df = pd.read_csv(\"spam_ham_dataset.csv\")\n```", "```py\n# Removing Unnecessary column\nemails_df.drop(\"Unnamed: 0\", axis=1, inplace=True)\n # Changing column names\nemails_df.columns = [\"label\", \"text\", \"class\"]\n```", "```py\n(5171, 3)\n```", "```py\nLabel\nham 3672\nspam 1499\ndtype: int64\n```", "```py\n!pip3 install nltk\n```", "```py\nRaw Corpus (Ham): 3133632\nProcessed Corpus (Ham): 317496 (~10%)\nRaw Corpus (Spam): 1712737\nProcessed Corpus (Spam): 177780 (~10%)\n```", "```py\n    math_weaker = w2v[\"stronger\"] - w2v[\"strong\"] + w2v[\"weak\"]\n    np.linalg.norm(math_weaker - w2v[\"weaker\"])\n    ```", "```py\n    [('kings', 0.7138046026229858), ('queen', 0.6510956883430481), ('monarch', 0.6413194537162781), ('crown_prince', 0.6204220056533813), ('prince', 0.6159993410110474), ('sultan', 0.5864822864532471), ('ruler', 0.5797567367553711), ('princes', 0.5646552443504333), ('Prince_Paras', 0.543294370174408), ('throne', 0.5422104597091675)]\n    ```"]