- en: '*Chapter 7*: Deployment and Model Maintenance'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, you have trained a wide variety of fastai models, including
    models trained with tabular datasets, models trained with text datasets, recommender
    systems, and models trained with image data. All the models that you have trained
    have been exercised in the context of Jupyter notebooks. Jupyter notebooks are
    great for training models and exercising them with a couple of test examples,
    but what about actually making your model useful? How do you make your model available
    to other people or applications to actually solve problems?
  prefs: []
  type: TYPE_NORMAL
- en: The process of making your deep learning models available to other people or
    applications is called **deployment**. In this chapter, we will go through recipes
    that show how to deploy your fastai models. The industrial-strength production
    deployment of deep learning models is beyond the scope of this book. Instead,
    in this chapter, you will learn how to create simple, self-contained deployments
    that you can serve from your own local system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the recipes that will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up fastai on your local system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a fastai model trained on a tabular dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a fastai model trained on an image dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining your fastai model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test your knowledge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will be running deployments on your local system, which
    requires having fastai installed on your local system. To run fastai locally,
    a Windows or Linux system is recommended, with Python installed. While fastai
    can be installed on macOS, you will save yourself a lot of headaches if you use
    a Windows or Linux system for your local installation of fastai.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you have cloned the repo for the book at [https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook](https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook)
    and have access to the `ch7` folder. This folder contains the code samples described
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up fastai on your local system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in being able to do a simple web deployment of a fastai deep
    learning model is to set up your local system with PyTorch and fastai. You need
    to do this because you will be running code on your local system that invokes
    models that you trained earlier in this book. To exercise models to make predictions
    on your local system, you need to have the fastai framework installed. In this
    recipe, you will see how to set up fastai on your local system and how to validate
    your installation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have Python (at least 3.7) installed on your local system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the level of Python, enter the following command on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will show the version of Python installed on your local system as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Python version'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16216_7_1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Python version
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you have cloned the book's repo at [https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook](https://github.com/PacktPublishing/Deep-Learning-with-fastai-Cookbook)
    to your local system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set up fastai on your local system, you need to set up PyTorch (the deep
    learning framework upon which fastai runs) and then fastai. To do this, run through
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install PyTorch on your local system by running the following command in a
    terminal or command window of your local system. You can find complete details
    about installing PyTorch on your local system here: [https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install fastai on your local system by following the instructions here for
    your operating system and typical Python installation approach: [https://docs.fast.ai/](https://docs.fast.ai/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have installed PyTorch and fastai, validate your installation by opening
    up the `validate_local_setup.ipynb` notebook from the `ch7` directory in your
    local repo and run the following cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Congratulations! You have successfully set up fastai on your local system.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may be asking why it''s necessary to set up fastai on a local system to
    demonstrate how to deploy a fastai model. While it is possible to deploy fastai
    models without using your local system, there are several advantages to installing
    fastai locally:'
  prefs: []
  type: TYPE_NORMAL
- en: You have complete control over the entire environment. By installing fastai
    locally, you can control the entire stack, from the level of pandas to the details
    of the web pages that you will use for deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By deploying fastai models locally, you will avoid shortcuts that could limit
    your complete appreciation of how fastai models work when they are deployed. The
    deployments that you will see in this chapter may be simple but they are complete.
    By working through recipes where nothing is left as a black box, you will gain
    a thorough understanding of what is really happening when a fastai model is deployed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are serious about exploiting fastai, it is handy to have a local installation.
    Back in [*Chapter 1*](B16216_01_Final_VK_ePub.xhtml#_idTextAnchor019)*, Getting
    Started with fastai*, I specified that you would need a cloud environment, either
    Gradient or Colab, to run through the recipes in this book. Most fastai applications
    require GPUs to be trained efficiently. Setting up a GPU on an existing local
    system is not easy, and buying a pre-configured system with a GPU only makes sense
    if you are fully committed to exploiting the GPU regularly by working full-time
    on deep learning applications. So, a cloud environment that is GPU-enabled is
    the best place to start. However, having a working fastai environment on your
    local system can be very useful even if you're not going to be using the local
    system for model training. For example, in the process of writing this book, there
    were a couple of instances where there was a problem with the Gradient environment
    where I did most of the development of recipes for this book. Because I have fastai
    installed locally, when Gradient was unavailable, I could still use my local system
    to make progress on coding outside of the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don't already have some exposure to web application development, you
    will benefit from the brief experience you will get in this chapter. In my experience,
    many data scientists have zero idea of how web applications work, and since most
    of what we work on will eventually be rendered in one form or another in a web
    framework, it behooves us to get a basic understanding of how web applications
    work. By using a combination of the Python Flask library and basic HTML and JavaScript,
    we will create a very simple, yet complete, web application that illustrates some
    basic web application principles. If you haven't come across these principles
    before, you will find them useful to have in your toolbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I hope that this background helps to convince you of the value of having a working
    fastai setup on your local system. Now that you have completed the fastai setup,
    you are ready for the subsequent sections where you deploy models on your local
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a fastai model trained on a tabular dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Back in the *Saving a trained tabular model* recipe in [*Chapter 3*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)*,
    Training Models with Tabular Data*, you exercised a fastai model that you had
    saved. Recall the steps you went through in the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you loaded the saved model as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you took a test sample and generated a prediction from the model for the
    test sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the prediction, as shown in the following screenshot, included
    the values of the input sample, the prediction, and probability of each outcome
    for the prediction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Output of running a prediction on the saved adult_sample_model
    model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16216_7_2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Output of running a prediction on the saved adult_sample_model
    model
  prefs: []
  type: TYPE_NORMAL
- en: 'In the web deployment of the model described in this recipe, you will be going
    through exactly the same steps (as outlined in the following list) as you went
    through in the recipe from [*Chapter 3*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)*,
    Training Models with Tabular Data*, that we just reviewed:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the saved, trained model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the model to an input sample.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get the prediction from the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unlike the recipe in [*Chapter 3*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)*,
    Training Models with Tabular Data*, where all the action took place in the context
    of a Jupyter notebook, in this recipe you will be accomplishing these steps through
    a simple web application. You will be able to enter new input samples and get
    predictions on them in a very natural fashion, and you will see the predictions
    as clear English statements rather than as tensors. Even better, you will be able
    to share your web application with others so they can exercise your model and
    see the predictions that it makes. In short, by deploying your model, you will
    transform it from an abstract coding artifact that can only be accessed in a program
    to a useful piece of software that non-programmers can actually use.
  prefs: []
  type: TYPE_NORMAL
- en: The deployment described in this section incorporates a web server implemented
    as a Flask module. Flask is a Python library that lets you serve web applications
    from the familiar surroundings of Python. In this recipe, you will start the Flask
    module and then use the web pages that it serves to exercise the model.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have followed the steps in the *Setting up fastai on your local
    system* recipe to get fastai installed on your local system. Confirm that you
    can access the files in the `deploy_tabular` directory of the `ch7` directory
    of your repo.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To deploy a model trained on a tabular dataset on your system, you will start
    the Flask server and work through the associated web pages to validate that you
    can get a prediction from the model for a given set of input scoring parameters.
    Complete the following steps to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: From a command window/terminal on your local system, make `deploy_tabular` in
    the `ch7` directory of your repo your current directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command in the command line/terminal to start the Flask
    server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a browser window and enter the following in the address field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, select `home.html`, in this case the default values for the fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – The query string generated with the default setting in home.html'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16216_7_5.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – The query string generated with the default setting in home.html
  prefs: []
  type: TYPE_NORMAL
- en: 'After a few seconds, the `show-prediction.html` web page is displayed with
    the prediction the model made for the values entered in `home.html`, as shown
    in *Figure 7.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – The model''s prediction displayed in show-prediction.html'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16216_7_6.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – The model's prediction displayed in show-prediction.html
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have successfully set up a Flask server and exercised the
    web deployment of a fastai model in the context of simple web page deployment.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There was a lot going on behind the scenes when you ran through this recipe.
    In this section, we'll begin by going through an overview of the flow through
    the web deployment and then we'll dig deeper into the key pieces of code that
    make up the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of how the web deployment of the fastai tabular model works
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The web deployment described in this recipe is a departure from the recipes
    you have seen so far in this book. Unlike the other recipes, which involved a
    single code file in the form of a Jupyter notebook, the web deployment incorporates
    code that is spread across a series of files, as shown in *Figure 7.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Overview of the web deployment of a fastai model using Flask'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16216_7_7.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.7 – Overview of the web deployment of a fastai model using Flask
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the key items highlighted by the numbers in *Figure 7.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '`home.html` – This is the web page where the user specifies the `home.html`
    for every feature that was used to train the model. `home.html` incorporates a
    set of JavaScript functions that set the available values in each control, package
    up the user''s entries, and call `show-prediction.html` with the scoring parameters
    as arguments.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Flask `web_flask_deploy.py` module – A Python module that uses the Flask
    library to serve the web pages that make up the web deployment. This module includes
    `home.html` and `show-prediction.html` that do most of the work for the web deployment.
    The view function for `show-prediction.html` parses the scoring parameters sent
    from `home.html`, assembles the scoring parameter values into a DataFrame, calls
    the trained model using the DataFrame containing the scoring parameters to get
    a prediction, generates a string from the model's prediction, and finally triggers
    `show-prediction.html` to be displayed with the prediction string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The fastai `adult_sample_model.pkl` model – This is the model that you trained
    and saved in the *Saving a trained tabular model* recipe of [*Chapter 3*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)*,
    Training Models with Tabular Data*. The view function for `show-prediction.html`
    in the `web_flask_deploy.py` Flask module loads this model and then uses it to
    make a prediction with the scoring parameters entered in `home.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`show-prediction.html` – This web page displays the prediction made by the
    model on the scoring parameters entered in `home.html`. Once the user has read
    the prediction, they can select the `home.html` to enter another set of scoring
    parameters.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That is a high-level summary of how the web deployment works. Next, we'll take
    a look at some of the key pieces of code that make up the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Digging deeper into the code behind the web deployment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have seen the high-level picture of what's happening behind the
    scenes, let's dig into two pieces of code that are particularly important to the
    overall web deployment. We'll go through the major code items that make up the
    deployment, including the Python code in the Flask server module as well as the
    JavaScript functions in the HTML files.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you start the Flask server, as shown in *Step 2* of the recipe, the trained
    model is loaded into the Python module, as shown in this snippet from the Flask
    server code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the key parts of this snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path = Path(os.getcwd())` – Sets `path` to be the directory where you started
    the Flask server. The code assumes the model file is in the same directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full_path = os.path.join(path,''adult_sample_model.pkl'')` – Defines the full
    path for the model, including the filename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`learner = load_learner(full_path)` – Loads the model into `learner`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you go to `localhost:5000` in your browser, the `home.html` page gets
    displayed. How does this happen? In the `web_flask_deploy.py` Flask module, the
    `home.html` controls what happens when you navigate to `localhost:5000` when the
    Flask server is active, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the key parts of this view function:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@app.route(''/'')` – Specifies that this view function is applied when you
    navigate to the `localhost:5000` address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return render_template(''home.html'',title=title)` – Specifies that `home.html`
    is displayed when you navigate to `localhost:5000`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As `home.html` is loaded, the action moves from Python in the Flask server
    module to a combination of HTML and JavaScript in `home.html`. First, the `load_selections()`
    function is called to load values into the controls in the web page, as shown
    in the following HTML statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `load_selections()` function populates the select controls (drop-down lists)
    on the page with lists specifying the valid values, such as the following for
    the `relationship` control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `load_selections()` function also includes `for` loops that set the values
    in the select controls to the lists of valid values, such as the following `for`
    loop that populates the `relationship` control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For the controls for entering numeric values, the `load_selections()` function
    sets the default values that appear when the page is loaded. For example, the
    following statement in the `load_selections()` function sets the default value
    for the `age` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Once the values are loaded in the controls and the page is displayed, the user
    can select values for the scoring parameters in the controls that are different
    from the defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the user has selected values for the scoring parameters, the user can
    select the `link_with_args()` function gets called when the button is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `link_with_args()` function calls the `getOption()` function that loads
    the values the user selected in the controls in `home.html` and builds the query
    string with these values, as shown in the following snippet from `getOption()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the key parts of this snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`prefix = "/show-prediction/?"` – Specifies which view function in the Flask
    module will be invoked when the link is triggered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`window.output` – Specifies the set of parameters included in the query string.
    This string is made up of a series of key value pairs, where each value equals
    the corresponding control in `home.html`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`document.querySelector(''.output'').textContent = window.output;` – Specifies
    that the query string is displayed in the browser window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may recall seeing the query string in this recipe. In *Step 4* of the recipe,
    when you selected the `home.html`, the query string was briefly displayed at the
    bottom of the page before `show-prediction.html` was loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'After calling `getOption()`, the `link_with_args()` function triggers a reference
    to `show-prediction.html` with the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'With this statement, the action switches from the world of HTML and JavaScript
    back to Python, and the view function for `show-prediction.html` is invoked in
    the Flask server. Here is the beginning of this view function where the scoring
    parameter values that were entered in `home.html` and passed along in the query
    string are loaded into the `score_df` DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the key parts of this snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@app.route(''/show-prediction/'')` – Specifies that this view function is
    applied for the `show-prediction.html` web page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`score_df = pd.DataFrame(columns=scoring_columns)` – Creates an empty dataframe
    to hold the scoring parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`score_df.at[0,col] = request.args.get(col)` – This statement is run for every
    column in the `scoring_columns` list. It copies the values in the query string
    that was built in the `getOption()` JavaScript function and passed as part of
    the reference to `show-prediction.html` to the corresponding column in the first
    row of the `score_df` dataframe. This is how the scoring parameter values that
    the user entered in `home.html` are brought into the Python Flask server module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that the scoring parameters have been loaded into the first row of the
    `score_df` dataframe, we can invoke the model on the first row of the dataframe,
    as shown in the following code snippet from the view function for `show-prediction.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the key parts of this snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pred_class,pred_idx,outputs = learner.predict(score_df.iloc[0])` – Invokes
    the model with the first row of the `score_df` DataFrame as input. The call has
    three outputs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a) `pred_class` lists the scoring parameters as they were fed into the model.
    For the categorical columns, the original scoring parameter value is replaced
    with the category identifier. For example, the value `United States` in the `native-country`
    column is replaced with `40.0`. These transformations are exactly the same as
    the transformations that were done on the training data back when you trained
    the model in [*Chapter 3*](B16216_03_Final_VK_ePub.xhtml#_idTextAnchor083)*, Training
    Models with Tabular Data*. Thanks to the way that fastai manages these transformations,
    unlike Keras, you don't need to worry about maintaining a pipeline object and
    applying it when you deploy a model – fastai just takes care of it. This is a
    great advantage of fastai.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) `pred_idx` – The index of the prediction. For this model, the prediction
    will be either 0 (indicating the individual has an income less than 50,000) or
    1 (indicating the individual has an income more than 50,000).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) `outputs` – Shows the probability of each prediction value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Figure 7.8* shows an example of prediction output and how it corresponds to
    the `pred_class`, `pred_idx`, and `outputs` variables:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Example of model prediction output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16216_7_8.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – Example of model prediction output
  prefs: []
  type: TYPE_NORMAL
- en: '`return(render_template(''show-prediction.html'',prediction=prediction))` –
    Specifies that `show-prediction.html` is displayed with the argument value set
    in this view function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With this statement, the action moves back to HTML as `show-prediction.html`
    is loaded in the browser. The following snippet shows the HTML that displays the
    prediction text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `{{ prediction.prediction_key }}` value corresponds to the `predict_string`
    value that was set in the view function for `show-prediction` in the Flask server.
    The result is that the prediction that the model made on the scoring parameters
    is displayed, as shown in *Figure 7.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – The end result of the deployed model – a prediction on the scoring
    parameters'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16216_7_9.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.9 – The end result of the deployed model – a prediction on the scoring
    parameters
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you have seen all the major code items that make up the entire flow of
    this web deployment of a fastai model. The flow goes through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The flow begins when you start the Flask server. Once you have started the Flask
    server, it is ready to serve `home.html` at `localhost:5000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you go to `localhost:5000` in your browser, the view function for `home.html`
    runs in the Flask server and `home.html` is displayed in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The flow then goes to HTML/JavaScript in `home.html`, where the user selects
    the scoring parameters and selects the **Get prediction** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The flow then returns to the Flask server where the view function for `show-prediction.html`
    is run to get a prediction from the model on the scoring parameters and to display
    `show-prediction.html` in the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the flow returns back to HTML in `show-prediction.html`, where the
    model's prediction is displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, the user can select the `show-prediction.html` to start the process
    over again at *Step 2* with a different set of scoring parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The tour through the web deployment example in this recipe only scratches the
    surface of what you can do with Flask, and it covers only the bare minimum of
    what you can do with modern HTML and JavaScript. A thorough exploration of how
    to develop web applications with Python is beyond the scope of this book, but
    if you are interested in learning more, you can check out the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Deploying a Deep Learning Model using Flask* ([https://towardsdatascience.com/deploying-a-deep-learning-model-using-flask-3ec166ef59fb](https://towardsdatascience.com/deploying-a-deep-learning-model-using-flask-3ec166ef59fb))
    goes into additional details about how to use Flask to deploy deep learning models.
    This article is focused on deploying Keras models rather than fastai models, but
    the principles described in the article apply to both frameworks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Responsive Web Design with HTML5 and CSS* ([https://www.amazon.com/Responsive-Web-Design-HTML5-CSS/dp/1839211563/ref=sr_1_2?dchild=1&keywords=html5+packt&qid=1623
    055650&sr=8-2](https://www.amazon.com/Responsive-Web-Design-HTML5-CSS/dp/1839211563/ref=sr_1_2?dchild=1&keywords=html5+packt&qid=1623055650&sr=8-2))
    gives a broad background on modern HTML and also covers **cascading style sheets**
    (**CSS**), which are used to control how web pages are rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Clean Code in JavaScript* ([https://www.amazon.com/Clean-Code-JavaScript-reliable-maintainable/dp/1789957648/ref=sr_1_6?dchild=1&keywords=Javascript+Packt&qid
    =1623055616&sr=8-6](https://www.amazon.com/Clean-Code-JavaScript-reliable-maintainable/dp/1789957648/ref=sr_1_6?dchild=1&keywords=Javascript+Packt&qid=1623055616&sr=8-6))
    describes good programming practices for JavaScript. If you are reading this book,
    you are reasonably comfortable with Python, and you should not have much trouble
    picking up JavaScript. JavaScript doesn''t always get the respect it deserves
    from people who program in more illustrious languages such as C++ and Scala, but
    the fact is that JavaScript is remarkably flexible and really useful to know.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a fastai model trained on an image dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Deploying a fastai model trained on a tabular dataset* recipe, we went
    through the process of deploying a model trained on a tabular dataset. We deployed
    a model that predicted whether an individual would have an income over 50,000
    based on a set of characteristics called **scoring parameters**, including education,
    job category, and hours worked per week. To do this deployment, we needed a way
    to allow the user to select values for the scoring parameters and then show the
    prediction made by the trained fastai model on these scoring parameters.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will deploy the image classification model that you trained
    in the *Training a classification model with a standalone vision dataset* recipe
    of [*Chapter 6*](B16216_06_Final_VK_ePub.xhtml#_idTextAnchor152)*, Training Models
    with Visual Data*. This model predicts what fruit or vegetable is depicted in
    an image. Unlike the deployment of the tabular dataset model, to deploy the image
    dataset model we will need to be able to specify an image file on which to make
    a prediction.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of simplicity, this deployment uses web pages with the same names
    (`home.html` and `show-prediction.html`) as the deployment of a tabular dataset
    that we did in the *Deploying a fastai model trained on a tabular dataset* recipe.
    However, these web pages are customized for the image model deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have followed the steps in the *Setting up fastai on your local
    system* recipe to get fastai installed on your local system. Confirm that you
    can access the files in the `deploy_image` directory of the `ch7` directory of
    your repo.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To exercise the deployment of an image classification model on your local system,
    you will start the Flask server, open up the `home.html` page for this deployment
    in your browser, select an image file to get a prediction on, and then validate
    that you get a prediction for the image displayed in the `show-prediction.html`
    page for this deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete the following steps to exercise the deployment of a fastai model trained
    on an image dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: From a command window/terminal on your local system, make `deploy_image` in
    the `ch7` directory of your repo your current directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command in the command line/terminal to start the Flask
    server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a browser window and enter the following in the address field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now select `test_images` subdirectory in your `deploy_images` directory. Select
    the lemon image file, `5_100.jpg`, and close the file dialog, for example, by
    selecting **Open** in Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the file dialog closes, the name of the file you selected shows in `home.html`
    beside the **Choose File** button, as shown in *Figure* *7.12*:![Figure 7.12 –
    The name of the file you selected displayed in home.html
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16216_7_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.12 – The name of the file you selected displayed in home.html
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now select `show-prediction.html` page is displayed with the model''s prediction
    for what is displayed in the image you selected in `home.html`, as shown in *Figure*
    *7.13*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.13 – The model''s prediction of what is in the image, shown in show-prediction.html'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16216_7_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.13 – The model's prediction of what is in the image, shown in show-prediction.html
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have successfully set up a Flask server and exercised the
    web deployment of a fastai model that predicts the object depicted in an image.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have worked through the web deployment of a fastai image classification
    model, let's go through what's happening behind the scenes. We'll start by going
    through an overview of the deployment and then digging into the code differences
    between the deployment of the image classification model and the deployment of
    a tabular dataset model as described in the *Deploying a fastai model trained
    on a tabular dataset* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of how the web deployment of the fastai image classification model
    works
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s review the end-to-end flow of the deployment, as shown in *Figure 7.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Overview of web deployment of a fastai image classification
    model using Flask'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16216_7_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.14 – Overview of web deployment of a fastai image classification model
    using Flask
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the key items highlighted by the numbers in *Figure 7.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '`home.html` – This is the web page where the user specifies the image file
    that they want the model to make a prediction on. The version of `home.html` used
    for the image classification model deployment incorporates HTML and JavaScript
    functions that display a file selection dialog, package up the name of the selected
    file, and call `show-prediction.html` with the name of the selected image file
    as an argument.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Flask `web_flask_deploy_image_model.py` module – The Python module that
    uses the Flask library to serve the web pages that make up the web deployment.
    This module includes view functions for `home.html` and `show-prediction.html`.
    The view function for `show-prediction.html` ingests the name of the image file
    selected in `home.html`, calls the trained model using this filename to get a
    prediction, generates a string from the model's prediction, and finally triggers
    `show-prediction.html` to be displayed with the prediction string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The fastai `fruits_360may3.pkl` image classification model – This is the model
    that you trained and saved in the *Training a classification model with a standalone
    vision dataset* recipe of [*Chapter 6*](B16216_06_Final_VK_ePub.xhtml#_idTextAnchor152)*,
    Training Models with Visual Data*. The view function for `show-prediction.html`
    in the `web_flask_deploy_image_model.py` Flask module loads this model and then
    uses it to make a prediction for the image file selected in `home.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`show-prediction.html` – This web page displays the prediction made by the
    model on the image file selected in `home.html`. On this page, the user can optionally
    select the `home.html` to select another image file to make a prediction on.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That is a high-level summary of how the web deployment of the image classification
    model works.
  prefs: []
  type: TYPE_NORMAL
- en: Digging deeper into the code behind the web deployment of the image classification
    model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have reviewed the overall flow of the deployment of the image classification
    model, let''s take a look at some of the key differences between the deployment
    of a tabular model that we covered in the *Deploying a fastai model trained on
    a tabular dataset* recipe and the deployment of an image classification model
    that we worked through in this section. Here are the key differences:'
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML in `home.html` – The version of `home.html` for the deployment of the
    tabular dataset model required a large number of controls to allow the user to
    specify all the required scoring parameters. The user needed to be able to specify
    values for all the features that were used to train the model. For the deployment
    of the image classification model, there is only one feature – the image file
    – so we only need a control for selecting a file. Here is the HTML for the file
    selection control:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here are the key items in this piece of HTML:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a) `input type="file"` – Specifies that this control is for inputting files
    from the local filesystem.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) `accept="image/png, image/jpeg"` – Specifies that the file dialog that is
    opened from this control will only allow image files with `image/png` or `image/jpeg`
    content types to be selected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'JavaScript in `home.html` – The version of `home.html` for the deployment of
    the tabular dataset model has three JavaScript functions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a) `getOption()`, to get the values from the controls
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) `link_with_args()`, to call `getOption()` and send the query string to the
    view function for `show-prediction.html`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) `load_selections()`, to initialize the controls
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The version of `home.html` used for the image classification model deployment
    doesn''t need `load_selections()` (because there aren''t any controls that need
    to initialized) and its version of `link_with_args()` is identical to the tabular
    model deployment version. That leaves the `getOption()` function, which is significantly
    different from the version in the tabular model deployment. Here is the image
    classification deployment version of `getOption()`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here are the key items in the definition of `getOption()`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a) `const input = document.querySelector('input');` – Associates `input` with
    the file selector.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) `const curFiles = input.files;` – Assigns the list of files associated with
    the file selector to `curFiles`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) `for(const file of curFiles) { file_value.push(file.name);}` – Loops through
    the files in the file list associated with the file selector and adds each filename
    to the `file_value` list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'd) `window.output = prefix.concat("file_name=",file_value[0])` – Builds the
    query string using the first element from the `file_value` list of filenames.
    We will only make predictions on one file at a time, so we just need one filename
    for the query string. The resulting query string would look something like this:
    `/show-prediction/?file_name=5_100.jpg`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'View function for `show-prediction.html` in the Flask server – The following
    code snippet shows what this view function looks like for the image classification
    web deployment:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here are the key items in the definition of this view function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a) `image_file_name = request.args.get("file_name")` – Sets the value of `image_file_name`
    to be the filename from the query string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) `full_path = os.path.join(path,image_directory,image_file_name)` – Sets the
    value of `full_path` to be the fully qualified filename for the image file selected
    in `home.html`. This assumes that the file was selected from the `test_images`
    subdirectory of the directory where you are running the Flask server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) `img = PILImage.create(full_path)` – Creates an image object called `img`
    for the image file selected in `home.html`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) `pred_class, ti1, ti2 = learner.predict(img)` – Gets a prediction from the
    image classification model for the `img` object. `pred_class` contains the category
    (such as *Apple* or *Pear*) predicted by the model for the image file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e) `return(render_template('show-prediction.html',prediction=prediction))` –
    Specifies that `show-prediction.html` is displayed with the argument value set
    in this view function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now you have seen all the major code differences between the deployment of the
    tabular dataset model and the deployment of the image classification model.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you have seen two examples of deploying fastai models using
    a Flask-based web application. This isn't the only approach that you can take
    to deploy models. Other approaches include deploying models via REST API endpoints
    (so that other applications can invoke the models directly) or encapsulating models
    along with their dependencies in other applications. Models can be packaged with
    the dependencies (such as required Python libraries) in Docker containers, and
    then these containers can be made available to other applications through orchestration
    systems such as Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than dwelling on these general deployment concepts, it may be more useful
    to review some concrete approaches to deploying fastai models in particular. Here
    is a sample of approaches to deploying fastai models:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploying with Amazon SageMaker, the AWS machine learning environment, as described
    here: [https://aws.amazon.com/blogs/machine-learning/building-training-and-deploying-fastai-models-with-amazon-sagemaker/](https://aws.amazon.com/blogs/machine-learning/building-training-and-deploying-fastai-models-with-amazon-sagemaker/).
    This approach requires using some PyTorch code directly and may not have been
    validated on the latest version of fastai.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deploying in AWS using TorchServe, as described here: [https://aws.amazon.com/blogs/opensource/deploy-fast-ai-trained-pytorch-model-in-torchserve-and-host-in-amazon-sagemaker-inference-endpoint/](https://aws.amazon.com/blogs/opensource/deploy-fast-ai-trained-pytorch-model-in-torchserve-and-host-in-amazon-sagemaker-inference-endpoint/).
    This approach has fewer *moving parts* than the approach described in the previous
    point, and it is more current, but the essence of the approach seems to be re-implementing
    the fastai model in PyTorch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deploying using Google Cloud Platform, as described here: [https://jianjye.medium.com/how-to-deploy-fast-ai-models-to-google-cloud-functions-for-predictions-e3d73d71546b](https://jianjye.medium.com/how-to-deploy-fast-ai-models-to-google-cloud-functions-for-predictions-e3d73d71546b).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deploying using Azure, as described here: [https://forums.fast.ai/t/platform-azure/65527/7](https://forums.fast.ai/t/platform-azure/65527/7).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This list is not exhaustive but it does demonstrate the variety of deployment
    options available for fastai models.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining your fastai model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying a model is not the end of the story. Once you have deployed a model,
    you need to maintain the deployment so that it matches the current characteristics
    of the data on which the model is trained. A thorough description of how to maintain
    a deep learning model in production is beyond the scope of this book, but it is
    worthwhile to touch on how to maintain models in the context of the simple model
    deployments described in this chapter. In this recipe, we will look at actions
    you could take to maintain the tabular model that you deployed in the *Deploying
    a fastai model trained on a tabular dataset* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have followed the steps in the *Setting up fastai on your local
    system* recipe to get fastai installed on your local system. Also ensure that
    you have the Flask server started for the tabular model deployment by following
    *Steps 1, 2, and 3* from the *Deploying a fastai model trained on a tabular dataset*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, you will be doing some basic analysis of the training data
    that you used to train the tabular model deployed in the *Deploying a fastai model
    trained on a tabular dataset* recipe. To prepare for this analysis, confirm that
    you can use your spreadsheet of choice (such as Excel or Google Sheets) to open
    up `adult.csv`, the file in the `ADULT_SAMPLE` dataset that contains the training
    data. If you don''t already have `adult.csv` on your local system, follow these
    steps to get this file on your local system and confirm you can open it up with
    your spreadsheet application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your Gradient environment, enter the following command in a terminal window
    to copy `adult.csv` to your `temp` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In JupyterLab in your Gradient environment, navigate to the `temp` directory
    where you copied `adult.csv` in the previous step, right-click on `adult.csv`,
    and select **Download**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use your spreadsheet application to open up the local copy of `adult.csv` that
    you downloaded in the previous step. *Figure 7.15* shows what the first few rows
    of `adult.csv` look like in Excel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.15 – The first few rows of adult.csv in Excel'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16216_7_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.15 – The first few rows of adult.csv in Excel
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You may wonder why I am suggesting using a spreadsheet to examine the data
    in this recipe. Why not use Python? There are a couple of reasons I recommend
    a spreadsheet here. First, no less an authority than Jeremy Howard stated that
    Excel is a great data science tool, and I happen to think he is absolutely right.
    It''s flexible, lightweight, and faster than Python for the kind of simple investigation
    on a small dataset that I''m featuring in this recipe. Second, Excel helped me
    to debug a problem with the deployment of the tabular model. When I first tested
    the deployment, I struggled to understand why the deployed model produced different
    predictions than the model invoked in a Python notebook. However, once I examined
    the data in Excel, the problem was obvious: all categorical values began with
    spaces in the data used for training the model. The categorical values that users
    could select in the deployment didn''t start with spaces, so the model did not
    recognize them as being the same as the categorical values it had encountered
    at training time. Excel gave me a quick way to detect the root cause of the problem.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To exercise some model maintenance actions, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, take a closer look at how categorical values are represented in `ADULT_SAMPLE`.
    If you don''t already have your local copy of `adult.csv` open in your spreadsheet
    application, open it up now. Select one of the values in the `workclass` column.
    Do you notice anything unusual about the value? Check out the values in some of
    the other categorical columns: `relationship` and `native-country`. You will see
    that the values in every categorical column begin with a blank.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Recall that in `home.html`, the user is constrained in the choices they can
    make for each of the categorical features. Open up `home.html` in the tabular
    model deployment and see what values are available for `workclass`. *Figure 7.16*
    shows the values that the user can select for `workclass`:![Figure 7.16 – Values
    available for workclass in home.html
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16216_7_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.16 – Values available for workclass in home.html
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The values that users can choose in `home.html` for the categorical columns
    are defined in a series of lists in the `load_selections()` JavaScript function.
    Here are the lists defined in the `load_selections()` JavaScript function for
    `workclass`, `relationship`, and `native-country`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice how the values in each of these lists begin with a blank, just like the
    values in the corresponding categorical columns in `adult.csv`. The values in
    these lists are used to build the query string, which in turn gets used as input
    to get a prediction from the model in the view function for `show-prediction.html`.
    What would have happened if the values in the lists in `home.html` had been defined
    without leading blanks?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Suppose that the training data for the model gets expanded to include individuals
    who come from the `adult.csv` that includes rows with the value `United-Kingdom`
    in the `native-country` column. Here is what you would need to do to update the
    deployment to adapt to this change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Retrain the model with the new version of `adult.csv` and save the new trained
    model to a `pkl` file using the `learner.export()` fastai API. For the purposes
    of this recipe, suppose that you call the new `adult_sample_model_new.pkl` model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Copy the updated `adult_sample_model_new.pkl` model file into the `deploy_tabular`
    directory on your local system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'c) Update the definition of the model path in the `web_flask_deploy.py` Flask
    server module to include the new model filename:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'd) Update `native_country_list` in `home.html` to include the new value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You would need to take the same steps to update the deployment for new values
    in any of the categorical columns: retrain the model with the updated training
    dataset, copy the updated trained model to the deployment directory, update the
    Flask server so that it loads the updated model, and update the list of valid
    categorical values in `home.html`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the previous step, we saw what we will need to do if the dataset gets expanded
    with new categorical values. What if a brand-new column is added to the dataset?
    Just like the process described in *Step 4*, you would need to retrain the model
    on the updated training dataset that includes the new column, copy the new model
    into the `deploy_tabular` directory, and update `web_flask_deploy.py` so that
    it loads the new model. Finally, you would need to update `home.html` to allow
    the user to enter information about the new column. The updates you need to make
    depend on whether the new column is `home.html` in each case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Suppose you need to update the deployment to handle a new continuous column
    called `years-in-job` – a count of how many years the individual has been in their
    current job. The valid values are 0 to 45, and the default value is 5\. To add
    this column, you need to make several updates to `home.html`. First, you need
    to add the following code to define a control for this new column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, you need to add the following line to the `load_selection()` JavaScript
    function to set the default value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, you need to add the following line to the `getOption()` JavaScript function
    to set the value that will be included in the query string for this column:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, you need to add the following to the end of the query string used
    to define `window.output`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Suppose you need to update the deployment to handle a new categorical column
    called `work-location` that specifies the location of the individual''s current
    job. Valid values for this column are `remote`, `on-site`, and `mixed`. To adapt
    `home.html` to work with this new column, start by adding the following code to
    define a control for the `work-location` column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following lines to the `load_selection()` JavaScript function
    to set the values for the control for the new column. Note that we assume that
    like the other categorical columns, values in `work-location` will be preceded
    by a blank, so the values in `work_location_list` all begin with blanks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following lines to the `getOption()` JavaScript function to set
    the value that will be included in the query string for this column:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the following to the end of the query string used to define `window.output`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Congratulations! You have worked through some of the actions required to maintain
    the deployment of a model to ensure it can adapt to changes in the training dataset.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we reviewed how you could maintain the web deployment of a model
    trained on tabular data. We saw the steps we would take to adapt the deployment
    to work with changes in the training dataset. The dataset changes we covered were
    new values in existing categorical columns, new continuous columns, and new categorical
    columns.
  prefs: []
  type: TYPE_NORMAL
- en: In an industrial-strength production deployment, the schema of the dataset,
    that is, the characteristics of all the columns that make up the dataset, would
    be maintained outside of the HTML files. For example, we might maintain the schema
    in a separate configuration file that had information about the columns in the
    dataset. Instead of being hardcoded, the controls and valid values in `home.html`
    would be built on the fly using the contents of the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: With this kind of dynamic setup, when a new column is added to the dataset or
    the valid values for a column change, we will only have to update the definition
    of the dataset schema in the configuration file and `home.html` would be updated
    automatically. To keep the web deployment as easy to follow as possible, we code
    the controls and valid values directly in `home.html` instead of building them
    dynamically. This made the *Deploying a fastai model trained on a tabular dataset*
    recipe easier to follow, but it also meant there were several places in `home.html`
    that had to be updated to maintain the deployment when the dataset changed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we talked about how to handle changes to the dataset schema,
    but we didn't talk about how to deal with changes in the distribution of the dataset
    or how to monitor the model to ensure that it maintained its performance over
    time. Both of these issues are critical to maintaining a deployed model but they
    are beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in learning more about monitoring the performance of
    models in production, this article provides a great overview: [https://christophergs.com/machine%20learning/2020/03/14/how-to-monitor-machine-learning-models/](https://christophergs.com/machine%20learning/2020/03/14/how-to-monitor-machine-learning-models/).'
  prefs: []
  type: TYPE_NORMAL
- en: Test your knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have deployed two kinds of fastai models and worked through some
    of the challenges related to maintaining deployed models, you can try some additional
    variations on deployment to exercise what you've learned.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure that you have followed the steps in the *Setting up fastai on your local
    system* recipe to get fastai installed on your local system. Also, ensure that
    you have the Flask server started for the image classification model deployment
    by following *Steps 1, 2,* and *3* in the *Deploying a fastai model trained on
    an image dataset* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'To experiment on the image classification model deployment, make a copy of
    the `deploy_image` directory. To do this, make the directory that contains `deploy_image`
    your current directory and run the following command to make a copy of the directory
    and its contents called `deploy_image_test`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can follow the steps in this recipe to extend and enhance the model deployment
    that you followed in the *Deploying a fastai model trained on an image dataset*
    recipe to allow the user to select multiple image files in `home.html` and show
    predictions for all the images in `show-prediction.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: Make `deploy_image_test` your current directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To allow users to select multiple files and show predictions for all the files
    at once, you will need to update `home.html`, the Flask server, and `show-prediction.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start by updating `home.html` so that the user can select multiple files in
    the file dialog. Add the `multiple` attribute to the definition of the file dialog
    control, as shown in the following HTML snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now the user will be able to select more than one file in the file dialog.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, update the `getOption()` JavaScript function in `home.html` to build
    a list of filenames to add to the query string and send back to the Flask server.
    The updated `getOption()` function looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here are the key updated items in the `getOption()` function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a) `var file_list = file_list_prefix.concat(file.name);` – Specifies that if
    this is the first file, initialize the `file_list` string
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) `file_list = file_list.concat("&file_name=",file.name);` – Specifies that
    if this isn't the first file, add the filename to the end of the `file_list` string
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) `window.output = prefix.concat("file_path=",file_path,file_list)` – Specifies
    that the query string includes the `file_list` string, which has the filenames
    for all the image files selected by the user
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have completed the updates required in `home.html` to handle multiple image
    files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now it''s time to update the Flask server. First, add the following function
    to the Flask server. You will use this function later to build the parameters
    that you will send to `show-prediction.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, update the view function for `show-prediction.html`. First, you will
    want to bring the list of filenames that you built in the `getOption()` function
    of `home.html` into a Python list. The following statement will create such a
    list called `image_file_name_list`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, update the view function for `show-prediction.html` so that you iterate
    through `image_file_name_list` to get a prediction for each file in the list.
    Save the `pred_class` value for each prediction in a list called `prediction_string_list`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `package_list` function that you defined in *Step 5* to prepare `prediction_string_list`
    to send to `show-prediction.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `return` statement of the view function to include `prediction_list`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now you have completed the updates to the Flask server required to handle multiple
    image files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, update `show-prediction.html` to show the predictions for each of the
    images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now test whether everything works. Start the Flask server in `deploy_image_test`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to `localhost:5000` in your browser to display `home.html`. Select the `4_100.jpg`,
    `5_100.jpg`, and `26_100.jpg` files from the `deploy_image_test/test_images` directory.
    Once you have selected these files, `home.html` will be updated to indicate that
    three files have been selected, as shown in *Figure 7.17*:![Figure 7.17 – home.html
    after selecting three image files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16216_7_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.17 – home.html after selecting three image files
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the `show-predictions.html`, as shown in *Figure 7.18*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.18 – show-prediciton.html showing predictions for multiple images'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16216_7_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.18 – show-prediciton.html showing predictions for multiple images
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have completed a useful extension to the deployment of
    the image classification model.
  prefs: []
  type: TYPE_NORMAL
