["```py\n> curl --output bundles/drum_kit_rnn.mag http://download.magenta.tensorflow.org/models/drum_kit_rnn.mag\n```", "```py\n> drums_rnn_generate --bundle_file=bundles/drum_kit_rnn.mag --output_dir output\n```", "```py\n# Replace GENERATED by the name of the file\n> visual_midi \"output/GENERATED.mid\"\n```", "```py\n> drums_rnn_generate --helpfull\n\n    USAGE: drums_rnn_generate [flags]\n    ...\n\nmagenta.models.drums_rnn.drums_rnn_config_flags:\n    ...\n\nmagenta.models.drums_rnn.drums_rnn_generate:\n    ...\n```", "```py\n--num_outputs: The number of drum tracks to generate. One MIDI file will be created for each. (default: '10')\n```", "```py\n--num_steps: The total number of steps the generated drum tracks should be, priming drum track length + generated steps. Each step is a 16th of a bar. (default: '128')\n```", "```py\n--qpm: The quarters per minute to play generated output at. If a primer MIDI is given, the qpm from that will override this flag. (default: '120')\n```", "```py\n--config: Which config to use. Must be one of 'one_drum' or 'drum_kit'. (default: 'drum_kit')\n```", "```py\n--primer_drums: A string representation of a Python list of tuples containing drum pitch values. For example: \"[(36,42),(),(),(),(42,),(),(),()]\". If specified, this drum track will be used as the priming drum track. If a priming drum track is not specified, drum tracks will be generated from scratch. (default: ''\n```", "```py\n--primer_midi: The path to a MIDI file containing a drum track that will  be used as a priming drum track. If a primer drum track is not specified, drum tracks will be generated from scratch. (default: '')\n```", "```py\n> drums_rnn_generate --bundle_file=bundles/drum_kit_rnn.mag --output_dir=output --primer_drums=\"[(36,),(36,),(36,),(36,)]\" --num_steps=4\n```", "```py\nCRITICAL - Priming sequence is longer than the total number of steps requested: Priming sequence length: 0.625, Generation length requested: 0.62\n```", "```py\ndrums_rnn_generate --bundle_file bundles/drum_kit_rnn.mag --output_dir output --num_steps 46 --primer_midi primers/When_The_Levee_Breaks_Led_Zeppelin.mid --temperature 1.1\n```", "```py\n--temperature: The randomness of the generated drum tracks. 1.0 uses the unaltered softmax probabilities, greater than 1.0 makes tracks more random, less than 1.0 makes tracks less random. (default: '1.0')\n```", "```py\n--beam_size: The beam size to use for beam search when generating drum tracks. (default: '1')\n--branch_factor: The branch factor to use for beam search when generating drum tracks. (default: '1')\n--steps_per_iteration: The number of steps to take per beam search iteration. (default: '1')\n```", "```py\ndrums_rnn_generate --bundle_file=bundles/drum_kit_rnn.mag --output_dir=output --temperature 1.1 --beam_size 1 --branch_factor 2 --steps_per_iteration 1 --num_steps 64\n```", "```py\nBeam search yields sequence with log-likelihood: -16.006279\n```", "```py\nBeam search yields sequence with log-likelihood: -57.161125\n```", "```py\nBeam search yields sequence with log-likelihood: -140.033295\n```", "```py\nimport os\nimport magenta.music as mm\n\nmm.notebook_utils.download_bundle(\"drum_kit_rnn.mag\", \"bundles\")\nbundle = mm.sequence_generator_bundle.read_bundle_file(\n os.path.join(\"bundles\", \"drum_kit_rnn.mag\"))\n```", "```py\nfrom magenta.models.drums_rnn import drums_rnn_sequence_generator\n\ngenerator_map = drums_rnn_sequence_generator.get_generator_map()\ngenerator = generator_map[\"drum_kit\"](checkpoint=None, bundle=bundle)\ngenerator.initialize()\n```", "```py\nfrom magenta.music import constants\n\nqpm = 120\nseconds_per_step = 60.0 / qpm / generator.steps_per_quarter\n```", "```py\nnum_steps_per_bar = constants.DEFAULT_STEPS_PER_BAR\nseconds_per_bar = num_steps_per_bar * seconds_per_step\n\nprint(\"Seconds per step: \" + str(seconds_per_step))\nprint(\"Seconds per bar: \" + str(seconds_per_bar))\n```", "```py\nprimer_drums = mm.DrumTrack(\n [frozenset(pitches) for pitches in\n   [(38, 51),     (), (36,),    (),\n    (38, 44, 51), (), (36,),    (),\n    (),           (), (38,),    (),\n    (38, 44),     (), (36, 51), (),]])\nprimer_sequence = primer_drums.to_sequence(qpm=qpm)\n```", "```py\nprimer_start_time = 0\nprimer_end_time = primer_start_time + seconds_per_bar\n```", "```py\nnum_bars = 3\ngeneration_start_time = primer_end_time\ngeneration_end_time = generation_start_time + (seconds_per_bar * num_bars)\n\nprint(\"Primer start and end: [\" + str(primer_start_time) + \", \" \n + str(primer_end_time) + \"]\")\nprint(\"Generation start and end: [\" + str(generation_start_time) + \", \" \n + str(generation_end_time) + \"]\")\n```", "```py\nfrom magenta.protobuf import generator_pb2\n\ngenerator_options = generator_pb2.GeneratorOptions()\ngenerator_options.args['temperature'].float_value = 1.1\ngenerator_options.generate_sections.add(\n start_time=generation_start_time,\n end_time=generation_end_time)\n```", "```py\nsequence = generator.generate(primer_sequence, generator_options)\n```", "```py\nfrom visual_midi import Plotter\n\n# Write the resulting midi file to the output directory\nmidi_file = os.path.join(\"output\", \"out.mid\")\nmm.midi_io.note_sequence_to_midi_file(sequence, midi_file)\nprint(\"Generated midi file: \" + str(os.path.abspath(midi_file)))\n\n# Write the resulting plot file to the output directory\nfrom visual_midi import Plotter\nplot_file = os.path.join(\"output\", \"out.html\")\nprint(\"Generated plot file: \" + str(os.path.abspath(plot_file)))\npretty_midi = mm.midi_io.note_sequence_to_pretty_midi(sequence)\nplotter = Plotter()\nplotter.show(pretty_midi, plot_file)\n```", "```py\n[(38, 51),     (), (36),     (),\n (38, 44, 51), (), (36),     (),\n (),           (), (38),     (),\n (38, 44),     (), (36, 51), (),]\n```"]