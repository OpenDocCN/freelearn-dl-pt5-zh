["```py\nclassifier.add(MaxPool2D(2,2))\n```", "```py\nclassifier.add(Flatten())\n```", "```py\nclassifier.add(Conv2D(32,3,3,input_shape=(64,64,3),activation='relu'))\n```", "```py\nclassifier.fit_generator(training_set,steps_per_epoch = 5000,\\\n                         epochs = 25,validation_data = test_set,\\\n                         validation_steps = 1000)\n```", "```py\nfrom keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(rescale = 1./255.0,\\\n                                   shear_range = 0.3,\\\n                                   zoom_range = 0.3,\\\n                                   horizontal_flip = False)\ntest_datagen = ImageDataGenerator(rescale = 1./255.0)\n```", "```py\n    # Import the Libraries\n    from keras.models import Sequential\n    from keras.layers import Conv2D, MaxPool2D, Flatten, Dense\n    import numpy as np\n    from tensorflow import random\n    ```", "```py\n    # Initiate the classifier\n    seed = 1\n    np.random.seed(seed)\n    random.set_seed(seed)\n    classifier = Sequential()\n    ```", "```py\n    classifier.add(Conv2D(32,3,3, input_shape=(64,64,3), \\\n                   activation='relu'))\n    ```", "```py\n    classifier.add(MaxPool2D(2,2))\n    ```", "```py\n    classifier.add(Flatten())\n    ```", "```py\n    classifier.add(Dense(128, activation='relu')) \n    ```", "```py\n    classifier.add(Dense(1, activation='sigmoid')) \n    ```", "```py\n    #Compile the network\n    classifier.compile(optimizer='adam', loss='binary_crossentropy', \\\n                       metrics=['accuracy'])\n    ```", "```py\n    from keras.preprocessing.image import ImageDataGenerator\n    train_datagen = ImageDataGenerator(rescale = 1./255,\\\n                                       shear_range = 0.2,\\\n                                       zoom_range = 0.2,\\\n                                       horizontal_flip = True)\n    test_datagen = ImageDataGenerator(rescale = 1./255)\n    ```", "```py\n    training_set = train_datagen.flow_from_directory(\\\n                   '../dataset/training_set',\\\n                   target_size = (64, 64),\\\n                   batch_size = 32,\\\n                   class_mode = 'binary')\n    ```", "```py\n    test_set = test_datagen.flow_from_directory(\\\n               '../dataset/test_set',\\\n               target_size = (64, 64),\\\n               batch_size = 32,\\\n               class_mode = 'binary')\n    ```", "```py\n    classifier.fit_generator(training_set,steps_per_epoch = 10000,\\\n                             epochs = 2,validation_data = test_set,\\\n                             validation_steps = 2500,shuffle=False)\n    ```", "```py\n    Epoch 1/2\n    10000/10000 [==============================] - 1994s 199ms/step - loss: 0.2474 - accuracy: 0.8957 - val_loss: 1.1562 - val_accuracy: 0.8400\n    Epoch 2/2\n    10000/10000 [==============================] - 1695s 169ms/step - loss: 0.0867 - accuracy: 0.9689 - val_loss: 1.4379 - val_accuracy: 0.8422\n    ```", "```py\nEpoch 1/2\n10000/10000 [==============================] - 2452s 245ms/step - loss: 8.1783 - accuracy: 0.4667 - val_loss: 11.4999 - val_accuracy: 0.4695\nEpoch 2/2\n10000/10000 [==============================] - 2496s 250ms/step - loss: 8.1726 - accuracy: 0.4671 - val_loss: 10.5416 - val_accuracy: 0.4691\n```", "```py\n    # Import the Libraries \n    from keras.models import Sequential\n    from keras.layers import Conv2D, MaxPool2D, Flatten, Dense\n    import numpy as np\n    from tensorflow import random\n    ```", "```py\n    # Initiate the classifier\n    seed = 43\n    np.random.seed(seed)\n    random.set_seed(seed)\n    classifier = Sequential()\n    ```", "```py\n    classifier.add(Conv2D(32,3,3,input_shape=(64,64,3),\\\n                          activation='relu'))\n    classifier.add(Conv2D(32, (3, 3), activation = 'relu'))\n    classifier.add(Conv2D(32, (3, 3), activation = 'relu'))\n    ```", "```py\n    classifier.add(MaxPool2D(2,2))\n    ```", "```py\n    classifier.add(Conv2D(32, (3, 3), activation = 'relu'))\n    classifier.add(MaxPool2D(pool_size = (2, 2)))\n    ```", "```py\n    classifier.add(Flatten())\n    ```", "```py\n    classifier.add(Dense(128,activation='relu'))\n    classifier.add(Dense(128,activation='relu'))\n    classifier.add(Dense(128,activation='relu'))\n    classifier.add(Dense(128,activation='relu'))\n    ```", "```py\n    classifier.add(Dense(1,activation='sigmoid')) \n    ```", "```py\n    classifier.compile(optimizer='adam', loss='binary_crossentropy', \\\n                       metrics=['accuracy'])\n    ```", "```py\n    from keras.preprocessing.image import ImageDataGenerator\n    train_datagen = ImageDataGenerator(rescale = 1./255,\n                                       shear_range = 0.2,\n                                       zoom_range = 0.2,\n                                       horizontal_flip = True)\n    test_datagen = ImageDataGenerator(rescale = 1./255)\n    ```", "```py\n    training_set = \\\n    train_datagen.flow_from_directory('../dataset/training_set',\\\n                                      target_size = (64, 64),\\\n                                      batch_size = 32,\\\n                                      class_mode = 'binary')\n    ```", "```py\n    test_set = \\\n    test_datagen.flow_from_directory('../dataset/test_set',\\\n                                     target_size = (64, 64),\\\n                                     batch_size = 32,\\\n                                     class_mode = 'binary')\n    ```", "```py\n    classifier.fit_generator(training_set,steps_per_epoch = 10000,\\\n                             epochs = 2,validation_data = test_set,\\\n                             validation_steps = 2500,shuffle=False)\n    ```", "```py\n    Epoch 1/2\n    10000/10000 [==============================] - 2241s 224ms/step - loss: 0.2339 - accuracy: 0.9005 - val_loss: 0.8059 - val_accuracy: 0.8737\n    Epoch 2/2\n    10000/10000 [==============================] - 2394s 239ms/step - loss: 0.0810 - accuracy: 0.9699 - val_loss: 0.6783 - val_accuracy: 0.8675\n    ```", "```py\n    # Import the Libraries \n    from keras.models import Sequential\n    from keras.layers import Conv2D, MaxPool2D, Flatten, Dense\n    import numpy as np\n    from tensorflow import random\n    ```", "```py\n    # Initiate the classifier\n    seed = 42\n    np.random.seed(seed)\n    random.set_seed(seed)\n    classifier = Sequential()\n    ```", "```py\n    classifier.add(Conv2D(32,(3,3),input_shape=(64,64,3),\\\n                   activation='relu'))\n    classifier.add(Conv2D(32,(3,3),activation='relu'))\n    classifier.add(Conv2D(32,(3,3),activation='relu'))\n    ```", "```py\n    classifier.add(MaxPool2D(pool_size=(2, 2)))\n    ```", "```py\n    classifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), \\\n                   activation = 'relu'))\n    classifier.add(MaxPool2D(pool_size=(2, 2)))\n    ```", "```py\n    classifier.add(Flatten())\n    ```", "```py\n    classifier.add(Dense(128,activation='relu')) \n    classifier.add(Dense(128,activation='relu'))\n    classifier.add(Dense(128,activation='relu'))\n    classifier.add(Dense(128,activation='relu'))\n    ```", "```py\n    classifier.add(Dense(1,activation='sigmoid')) \n    ```", "```py\n    classifier.compile(optimizer='SGD', loss='binary_crossentropy', \\\n                       metrics=['accuracy'])\n    ```", "```py\n    from keras.preprocessing.image import ImageDataGenerator\n    train_datagen = ImageDataGenerator(rescale = 1./255,\\\n                                       shear_range = 0.2,\\\n                                       zoom_range = 0.2,\\\n                                       horizontal_flip = True)\n    test_datagen = ImageDataGenerator(rescale = 1./255)\n    ```", "```py\n    training_set = \\\n    train_datagen.flow_from_directory('../dataset/training_set',\\\n                                      target_size = (64, 64),\\\n                                      batch_size = 32,\\\n                                      class_mode = 'binary')\n    ```", "```py\n    test_set = \\\n    test_datagen.flow_from_directory('../dataset/test_set',\\\n                                     target_size = (64, 64),\\\n                                     batch_size = 32,\\\n                                     class_mode = 'binary')\n    ```", "```py\n    classifier.fit_generator(training_set,steps_per_epoch = 10000,\\\n                             epochs = 2,validation_data = test_set,\\\n                             validation_steps = 2500,shuffle=False)\n    ```", "```py\n    Epoch 1/2\n    10000/10000 [==============================] - 4376s 438ms/step - loss: 0.3920 - accuracy: 0.8201 - val_loss: 0.3937 - val_accuracy: 0.8531\n    Epoch 2/2\n    10000/10000 [==============================] - 5146s 515ms/step - loss: 0.2395 - accuracy: 0.8995 - val_loss: 0.4694 - val_accuracy: 0.8454\n    ```", "```py\n    from keras.preprocessing import image\n    new_image = image.load_img('../test_image_1.jpg', \\\n                               target_size = (64, 64))\n    new_image\n    ```", "```py\n    training_set.class_indices\n    ```", "```py\n    new_image = image.img_to_array(new_image)\n    new_image = np.expand_dims(new_image, axis = 0)\n    ```", "```py\n    result = classifier.predict(new_image)\n    ```", "```py\n    if result[0][0] == 1:\n        prediction = 'It is a flower'\n    else:\n        prediction = 'It is a car'\n    print(prediction)\n    ```", "```py\n    It is a car\n    ```", "```py\nIt is a flower\n```"]