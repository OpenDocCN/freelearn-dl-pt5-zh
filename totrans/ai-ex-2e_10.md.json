["```py\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import datasets, layers, models\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nimport numpy as np\nfrom PIL import Image\n#Directory\ndirectory='dataset/'\nprint(\"directory\",directory) \n```", "```py\n#____________________LOAD MODEL____________________________\nloaded_model = keras.models.load_model(directory+\"model/model3.h5\")\nprint(loaded_model.summary()) \n```", "```py\n# __________________compile loaded model\nloaded_model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy']) \n```", "```py\nprint(\"GLOBAL MODEL STRUCTURE\")\nprint(loaded_model.summary()) \n```", "```py\nMODEL STRUCTURE\nModel: \"sequential\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nconv2d (Conv2D)              (None, 62, 62, 32)        896       \n_________________________________________________________________\nmax_pooling2d (MaxPooling2D) (None, 31, 31, 32)        0         \n_________________________________________________________________\nconv2d_1 (Conv2D)            (None, 29, 29, 32)        9248      \n_________________________________________________________________\nmax_pooling2d_1 (MaxPooling2 (None, 14, 14, 32)        0         \n_________________________________________________________________\nflatten (Flatten)            (None, 6272)              0         \n_________________________________________________________________\ndense (Dense)                (None, 128)               802944    \n_________________________________________________________________\ndense_1 (Dense)              (None, 1)                 129       \n=================================================================\nTotal params: 813,217\nTrainable params: 813,217\nNon-trainable params: 0 \n```", "```py\nDETAILED MODEL STRUCTURE\n{'name': 'conv2d', 'trainable': True, 'batch_input_shape': (None, 64, 64, 3), 'dtype': 'float32', 'filters': 32, 'kernel_size': (3, 3), 'strides': (1, 1), 'padding': 'valid', 'data_format': 'channels_last', 'dilation_rate': (1, 1), 'activation': 'relu', 'use_bias': True, 'kernel_initializer': {'class_name': 'GlorotUniform', 'config': {'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}\n{'name': 'max_pooling2d', 'trainable': True, 'dtype': 'float32', 'pool_size': (2, 2), 'padding': 'valid', 'strides': (2, 2), 'data_format': 'channels_last'} \n```", "```py\ninitial shape (570, 597, 4)\nlay: 1 filters shape (568, 595, 3)\nlay: 2 Pooling shape (113, 119, 3)\nlay: 3 filters shape (111, 117, 3)\nlay: 4 pooling shape (22, 23, 3)\nlay: 5 flatten shape (1518,)\nlay: 6 dense shape (128,)\nlay: 7 dense shape (1,) \n```", "```py\nprint(\"WEIGHTS\")\nfor layer in loaded_model.layers:\n    weights = layer.get_weights() # list of numpy arrays\n    print(weights) \n```", "```py\nWEIGHTS\n[array([[ 6.25981949e-03,  2.35006157e-02, -1.28920656e-02, ...,\n        -8.34930502e-03,  2.00010985e-02, -1.84428487e-02],\n       [-1.01672988e-02,  1.87084991e-02,  2.49958578e-02, ...,\n        -2.92361379e-02, -2.33592112e-02, -1.64737436e-03],\n       [-2.71108598e-02,  2.53492035e-03, -2.90711448e-02, ..., \n```", "```py\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import datasets, layers, models\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nimport numpy as np\nfrom PIL import Image \n```", "```py\n# __________________compile loaded model\nloaded_model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy']) \n```", "```py\ndef identify(target_image):\n    filename = target_image\n    original = load_img(filename, target_size=(64, 64))\n    #print('PIL image size',original.size)\n    if(display==1):\n        plt.imshow(original)\n        plt.show()\n    numpy_image = img_to_array(original)\n    inputarray = numpy_image[np.newaxis,...] # extra dimension to fit model\n    arrayresized=np.resize(inputarray,(64,64))\n    #print('Resized',arrayresized) \n```", "```py\n#___PREDICTION___\n    prediction = loaded_model.predict_proba(inputarray)\n    return prediction \n```", "```py\nMS1='productive'\nMS2='gap'\ns=identify(directory+'classify/img1.jpg')\nif (int(s)==0):\n    print('Classified in class A')\n    print(MS1) \n```", "```py\ndirectory dataset/\nStrategy model loaded from training repository.\nimage dataset/classify/img1.jpg predict_proba: [[ 0.]] predict: [[ 0.]]\nClassified in class A\nProductive\nSeeking... \n```", "```py\nimage dataset/classify/img2.jpg predict_proba: [[ 1.]] predict: [[ 1.]]\nClassified in class B\ngap \n```", "```py\n#loads,traffic,food processing\nA=['dataset_O/','dataset_traffic/','dataset/']\nMS1=['loaded','jammed','productive']\nMS2=['unloaded','change','gap']\n#____________________LOAD MODEL____________________________\nloaded_model = keras.models.load_model(directory+\"model/model3.h5\")....\") \n```", "```py\ns=identify(directory+'classify/img1.jpg') \n```", "```py\nA=['dataset_O/','dataset_traffic/','dataset/']\nscenario=3 #reference to A\ndirectory=A[scenario] #transfer learning parameter (choice of images)\nprint(\"directory\",directory) \n```", "```py\ndirectory dataset_O/\nStrategy model loaded from training repository.\nimage dataset_O/classify/img1.jpg predict_proba: [[ 0.]] predict: [[ 0.]]\nClassified in class A\nloaded\nSeeking... \n```", "```py\nSeeking...\nimage dataset_O/classify/img2.jpg predict_proba: [[ 1.]] predict: [[ 1.]]\nClassified in class\nunloaded \n```", "```py\ndirectory dataset_traffic/\nStrategy model loaded from training repository.\nimage dataset_traffic/classify/img1.jpg predict_proba: [[ 0.]] predict: [[ 0.]]\nClassified in class A\njammed \n```", "```py\nSeeking...\nimage dataset_traffic/classify/img2.jpg predict_proba: [[ 1.]] predict: [[ 1.]]\nClassified in class B\nchange \n```"]